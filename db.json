{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/jvm_stack_01.gif","path":"images/jvm_stack_01.gif","modified":0,"renderable":0},{"_id":"source/images/jpa_hibernate_relationship.png","path":"images/jpa_hibernate_relationship.png","modified":0,"renderable":0},{"_id":"source/images/security-interception.png","path":"images/security-interception.png","modified":0,"renderable":0},{"_id":"source/images/Spring_Bean_Name_Aware.png","path":"images/Spring_Bean_Name_Aware.png","modified":0,"renderable":0},{"_id":"source/images/application-argument/CommandLineArgs.png","path":"images/application-argument/CommandLineArgs.png","modified":0,"renderable":0},{"_id":"source/images/application-argument/SimpleCommandLineProperty.png","path":"images/application-argument/SimpleCommandLineProperty.png","modified":0,"renderable":0},{"_id":"source/images/application-argument/DefaultApplicationArguments.png","path":"images/application-argument/DefaultApplicationArguments.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/paintedAPI_4.png","path":"images/next-generation-web-styling/paintedAPI_4.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/property_value_2.png","path":"images/next-generation-web-styling/property_value_2.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/property_value_3.png","path":"images/next-generation-web-styling/property_value_3.png","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/images/adaptiveLoading/adaptiveLoading_2.png","path":"images/adaptiveLoading/adaptiveLoading_2.png","modified":0,"renderable":0},{"_id":"source/images/adaptiveLoading/adaptiveLoading_5.png","path":"images/adaptiveLoading/adaptiveLoading_5.png","modified":0,"renderable":0},{"_id":"source/images/adaptiveLoading/adaptiveLoading_3.png","path":"images/adaptiveLoading/adaptiveLoading_3.png","modified":0,"renderable":0},{"_id":"source/images/adaptiveLoading/adaptiveLoading_4.png","path":"images/adaptiveLoading/adaptiveLoading_4.png","modified":0,"renderable":0},{"_id":"source/images/adaptiveLoading/adaptiveLoading_7.png","path":"images/adaptiveLoading/adaptiveLoading_7.png","modified":0,"renderable":0},{"_id":"source/images/adaptiveLoading/adaptiveLoading_6.png","path":"images/adaptiveLoading/adaptiveLoading_6.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/houdini_1.png","path":"images/next-generation-web-styling/houdini_1.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/animation_worklet_1.png","path":"images/next-generation-web-styling/animation_worklet_1.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/localproperty_1.png","path":"images/next-generation-web-styling/localproperty_1.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/localproperty_4.png","path":"images/next-generation-web-styling/localproperty_4.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/paintedAPI_2.png","path":"images/next-generation-web-styling/paintedAPI_2.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/paintedAPI_3.png","path":"images/next-generation-web-styling/paintedAPI_3.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/prefer_1.png","path":"images/next-generation-web-styling/prefer_1.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/typedOM_1.png","path":"images/next-generation-web-styling/typedOM_1.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/worklet_1.png","path":"images/next-generation-web-styling/worklet_1.png","modified":0,"renderable":0},{"_id":"source/images/adaptiveLoading/adaptiveLoading_1.png","path":"images/adaptiveLoading/adaptiveLoading_1.png","modified":0,"renderable":0},{"_id":"source/images/java/stream/fork_join.jpg","path":"images/java/stream/fork_join.jpg","modified":0,"renderable":0},{"_id":"source/images/java/stream/fork_join_queue.jpg","path":"images/java/stream/fork_join_queue.jpg","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/houdini_2.png","path":"images/next-generation-web-styling/houdini_2.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/localproperty_2.png","path":"images/next-generation-web-styling/localproperty_2.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/prefer_2.png","path":"images/next-generation-web-styling/prefer_2.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/property_value_1.png","path":"images/next-generation-web-styling/property_value_1.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/localproperty_3.png","path":"images/next-generation-web-styling/localproperty_3.png","modified":0,"renderable":0},{"_id":"source/images/next-generation-web-styling/paintedAPI_1.png","path":"images/next-generation-web-styling/paintedAPI_1.png","modified":0,"renderable":0},{"_id":"source/images/springboot/eventpublishinglistener/eventpublisingrunlistener.png","path":"images/springboot/eventpublishinglistener/eventpublisingrunlistener.png","modified":0,"renderable":0},{"_id":"source/images/java/fundamental/method_area/method_area.png","path":"images/java/fundamental/method_area/method_area.png","modified":0,"renderable":0},{"_id":"source/images/java/fundamental/method_stack_memory/native_method.png","path":"images/java/fundamental/method_stack_memory/native_method.png","modified":0,"renderable":0},{"_id":"source/images/java/fundamental/runtime_data_areas/runtime_data_areas.png","path":"images/java/fundamental/runtime_data_areas/runtime_data_areas.png","modified":0,"renderable":0},{"_id":"source/images/java/fundamental/method_stack_memory/method_stacks.png","path":"images/java/fundamental/method_stack_memory/method_stacks.png","modified":0,"renderable":0},{"_id":"source/images/java/fundamental/method_stack_memory/operand_stack.png","path":"images/java/fundamental/method_stack_memory/operand_stack.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"8d852a77bc2a7d2eeafa77c4a93f82e75ddffe2f","modified":1574018214946},{"_id":"themes/icarus/.gitignore","hash":"35572c0f161a751b9f30ae3a9935ac045dba5220","modified":1583069177304},{"_id":"themes/icarus/_config.yml","hash":"35e9e85d1b8d3783911ff5aa54149d6f0b143c6e","modified":1583069809384},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1583069046140},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1583069046144},{"_id":"themes/icarus/package.json","hash":"76be4ac8aa1b8392aee382e63c935d87f5e6ce5a","modified":1583069840957},{"_id":"source/_posts/Setting.md","hash":"44fb24f7960770c192b3607ada6802ba485e9122","modified":1574018214950},{"_id":"source/_drafts/jpa.md","hash":"3022ec2f61ab45caf9deeec5cb549a20000d7d7e","modified":1574018214950},{"_id":"source/_posts/apache-ignite-spring-boot.md","hash":"11e38ff1099ecdebaf679e95a2fb0d0383d0856f","modified":1582443409198},{"_id":"source/_posts/adaptive-loading.md","hash":"580eafde0e4071835de3eead70f348e01dc092cf","modified":1582443409198},{"_id":"source/_posts/configurable-application-context.md","hash":"64fd0edc6b30d31b418075a22a32f002d64fb0f3","modified":1582443409198},{"_id":"source/_posts/annotation.md","hash":"7471be7a06b75b967d3b4abbaea4b496ae167d9f","modified":1582443409198},{"_id":"source/_posts/WebAssembly-summit-2020.md","hash":"912759d53e421850c22f98fa533145ff68433a44","modified":1582449516669},{"_id":"source/_posts/application-argument.md","hash":"a1dd596bced5ca8d7875fd21eb29b7f1bd413e09","modified":1582443409198},{"_id":"source/_posts/enable-annotation-spring.md","hash":"8a9d590ee4d60d978609478056c76f8a6d5e78c0","modified":1582443409198},{"_id":"source/_posts/event-publishing-run-listener.md","hash":"f34cf54e2dba9872a3c11bf4f1b52f6a1e9256a9","modified":1582443409198},{"_id":"source/_posts/intro.md","hash":"23760c50057eca61fd43c7681d15c687d6453153","modified":1574018214950},{"_id":"source/_posts/java-fundamental-method-area.md","hash":"7bc595ac8578bc58b98962c11521f7de452cf430","modified":1583063421220},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1574018214950},{"_id":"source/_posts/java-fundamental-method-stack.md","hash":"b5e31134f1cd48456e478416a279e99134267fd5","modified":1583063421220},{"_id":"source/_posts/java-fundamental-runtime-data-areas.md","hash":"5815acdd7cfb09dc7ec83684231dc38b3c707f84","modified":1583063421224},{"_id":"source/_posts/java-poi.md","hash":"1eb5d32054a41e5dfd6709088e82829d257f537d","modified":1582443409198},{"_id":"source/_posts/java-stream-function-interface.md","hash":"6a6fc87640a122494b61a9225b2e03962925caef","modified":1582443409198},{"_id":"source/_posts/java-stream-parallel.md","hash":"0a24bca1ecb47e1d921636fe6bcb6982982f9a4f","modified":1582443409198},{"_id":"source/_posts/java-stream.md","hash":"47049fc33e5f57e7ab0bf73be14da1c10e65cefd","modified":1582443409198},{"_id":"source/_posts/project-start-materials.md","hash":"96051cca9b03b79665d923e40ca4059a2645f321","modified":1583067025182},{"_id":"source/_posts/next-generation-web-styling.md","hash":"7ed976cc33baeebbc162f5647e5d69644b834e24","modified":1582443409198},{"_id":"source/_posts/spring-application-run-listeners.md","hash":"38855186f2d00983368a2a61d4a287a07d6f5a38","modified":1582443409198},{"_id":"source/_posts/spring-boot-logging.md","hash":"c713d6a14d82ee74651d700c04e4355d0ebf7bb6","modified":1582443409198},{"_id":"source/_posts/spring-initializer.md","hash":"31be6ca9e40a2cba790574d3759dda48318626e3","modified":1582443409198},{"_id":"source/_posts/spring-security.md","hash":"6767b097aa054a1496b6b56b91ddaf1f1490e7b5","modified":1582443409198},{"_id":"source/_posts/springboot-run.md","hash":"844546887be4461ea89e4829f210b321dab3a6d8","modified":1582443409198},{"_id":"source/_posts/spring-security-filter.md","hash":"c7104c8d9622a3e70c285f3cf50468128dfedbb9","modified":1582443409198},{"_id":"source/all-tags/index.md","hash":"a9df2cae2c13543d3207b8312b2d86e593a22eec","modified":1574018214950},{"_id":"source/all-archives/index.md","hash":"eb1b7b8231cd7ffbd19e79c246acaaf1196fe6c9","modified":1574018214950},{"_id":"source/all-categories/index.md","hash":"1839376dde4e58f2261f316dafa33e0b157f68a1","modified":1574018214950},{"_id":"source/hello/index.md","hash":"c44f118542f0b2c3cedd1a893cd587875bbc08b4","modified":1574018214950},{"_id":"source/images/jvm_stack_01.gif","hash":"fbbfc8db97a21ba95f3fa33203ec33eb99620235","modified":1574018214950},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1583069046128},{"_id":"themes/icarus/.git/config","hash":"d29e0b80e29cd924161a73c63bac11af41d2631c","modified":1583069046132},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1583069042056},{"_id":"themes/icarus/.git/index","hash":"4600dc44da87bffc951c4198f6af5bfaaae1971f","modified":1583069839249},{"_id":"source/images/jpa_hibernate_relationship.png","hash":"e67c240c37ba27826a245972e214ba70845adde0","modified":1574018214950},{"_id":"themes/icarus/.git/packed-refs","hash":"0f368a7182593f64dff26c0e8f36ab5f678641a7","modified":1583069046128},{"_id":"source/images/security-interception.png","hash":"a5a3686aa8f60af32ff094604162646a22488e74","modified":1582443409214},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1583069046140},{"_id":"themes/icarus/languages/de.yml","hash":"79d769768780b9a72eb256ab61f217b8bdebf85b","modified":1583069046144},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1583069046144},{"_id":"themes/icarus/languages/en.yml","hash":"66d873bbe04894610c2d28b0d03e10143997b51b","modified":1583069046144},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1583069046144},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1583069046144},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1583069046144},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1583069046144},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1583069046144},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1583069046144},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1583069046144},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1583069046144},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1583069046144},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1583069046144},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"6ff978a0c4c11e996925e1a912a1d805f4680a6c","modified":1583069046144},{"_id":"themes/icarus/layout/archive.ejs","hash":"2527527eaf3e757ab476325f691d2e2e0ff9c2d5","modified":1583069046148},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1583069046148},{"_id":"themes/icarus/layout/category.ejs","hash":"58aa84f75193b978b2072f29dbb84ed8279574b9","modified":1583069046148},{"_id":"themes/icarus/layout/index.ejs","hash":"8ab440868f721bb7256ab9f2be96996850b0cf44","modified":1583069046148},{"_id":"themes/icarus/layout/layout.ejs","hash":"c9ab786c4c4a95e403fc8ea7e536084f21a9ecc4","modified":1583069046148},{"_id":"themes/icarus/layout/page.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1583069046148},{"_id":"themes/icarus/layout/post.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1583069046148},{"_id":"themes/icarus/layout/tag.ejs","hash":"45eb077f2ac86f5c8090cb1a2361eed56a368e95","modified":1583069046152},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1583069046152},{"_id":"themes/icarus/scripts/index.js","hash":"40839db58041e31eb06d428a91869b0789277e7e","modified":1583069046152},{"_id":"source/images/Spring_Bean_Name_Aware.png","hash":"a7ecc957342569a72407b5276f53499ccb48cc0a","modified":1582443409202},{"_id":"source/images/application-argument/CommandLineArgs.png","hash":"e6f23716b80172862cf32604b1885694263d2ac8","modified":1582443409206},{"_id":"source/images/application-argument/SimpleCommandLineProperty.png","hash":"8ea5cd51ddada1260014662062a93f417da044f5","modified":1582443409206},{"_id":"source/images/application-argument/DefaultApplicationArguments.png","hash":"75db496b8b9ddf4c42a16618cd6b078c2ed96385","modified":1582443409206},{"_id":"source/images/next-generation-web-styling/paintedAPI_4.png","hash":"887e1908a56e2d53c5d168c80b2045b2ac16e9aa","modified":1582443409210},{"_id":"source/images/next-generation-web-styling/property_value_2.png","hash":"a8f36d4ddaf59de4918481fefbc515fb10420c2c","modified":1582443409214},{"_id":"source/images/next-generation-web-styling/property_value_3.png","hash":"8fe40cd6ba8ea9f74e1bafe539e9bb16aa038ea0","modified":1582443409214},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1583069042056},{"_id":"themes/icarus/.git/logs/HEAD","hash":"1311ec2542d667f3697885095088b3804b2e106f","modified":1583069046132},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1583069042056},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1583069042056},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1583069046144},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1583069046144},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1583069046144},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1583069046144},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1583069046144},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1583069046144},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1583069046144},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1583069046144},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1583069046144},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1583069046144},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1583069046144},{"_id":"themes/icarus/includes/helpers/override.js","hash":"223771860caddffcbce7d84dfb07798f6aa0bdda","modified":1583069046144},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"ab08051f785eab2a0685aa537270d2988bc13639","modified":1583069046144},{"_id":"themes/icarus/includes/helpers/site.js","hash":"2f55818448fe83c73418dcf9751745c7918c10e3","modified":1583069046144},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1583069046144},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1583069046144},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1583069046144},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1583069046144},{"_id":"themes/icarus/includes/utils/lru.js","hash":"35c0ede3553549758ff5e4ded2bc650778793377","modified":1583069046144},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1583069046144},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"e4735686bbf24ac89a4a9b578498ef3e5f5edbea","modified":1583069046144},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1583069046144},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1583069046144},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1583069046144},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1583069046144},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1583069046144},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1583069046144},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"ed1b818b929d71930608291514a72ef5a639efee","modified":1583069046144},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1583069046144},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1583069046144},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"c5cedfe1074c0566baf8aca248f0392a501d9a74","modified":1583069046144},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1583069046148},{"_id":"themes/icarus/layout/donate/alipay.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"dbb90fa9214d659ea6bbd5a92ea00888adf3761e","modified":1583069046148},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"fc19da9674649c035d133535078ff7e37d0f54c1","modified":1583069046148},{"_id":"themes/icarus/layout/donate/paypal.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/donate/patreon.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1583069046148},{"_id":"themes/icarus/layout/donate/wechat.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/common/article.locals.js","hash":"1f108fa96e61a681d7b1ee390b4f0ff60d042720","modified":1583069046148},{"_id":"themes/icarus/layout/common/footer.locals.js","hash":"504ed92dc76723f19777463d690acfbe1d89e2ba","modified":1583069046148},{"_id":"themes/icarus/layout/common/head.ejs","hash":"0998072c9ece90e26339f2503633c4ca08da62e9","modified":1583069046148},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"d70962fd1c8123c5314d73cf0aec08ffb96aeca5","modified":1583069046148},{"_id":"themes/icarus/layout/common/article.ejs","hash":"d2362964b2d9427067e1d7dfe100220b380b2f70","modified":1583069046148},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"0fe0c940fcb112828d465830713a0cdd42864951","modified":1583069046148},{"_id":"themes/icarus/layout/common/navbar.locals.js","hash":"7e523ba80667038f2e58cf4f9cb073e9afbc70e6","modified":1583069046148},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1583069046148},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"99da87756d2bd234b058e90d2c6dabc1bc10f20e","modified":1583069046148},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"02ffa7531d14b88e76bff5ff6d2b4482e7c5bbfd","modified":1583069046148},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"73038ac4fdfdfa71d92edaa98cc194b3446586a3","modified":1583069046148},{"_id":"themes/icarus/layout/comment/changyan.locals.js","hash":"49bce2ee742c7224bda97092d6e0a1a09184ef34","modified":1583069046148},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"7a8c656c8651d48e21ed24c469ea75898b2b12df","modified":1583069046148},{"_id":"themes/icarus/layout/comment/disqus.locals.js","hash":"a8d2cecaa82ec9e2e2e61cb73417d63d115335d6","modified":1583069046148},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"1c3751f36f737527e352c65bb1ca7172ff792979","modified":1583069046148},{"_id":"themes/icarus/layout/comment/facebook.locals.js","hash":"77e3ef1d933660d980b26d15968aa1a5c8a93a56","modified":1583069046148},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"eb1314badf793924b5786e92f8b3ebb0f21f3b58","modified":1583069046148},{"_id":"themes/icarus/layout/comment/gitalk.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1583069046148},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"d5e1a396e23df4e75e139d12846290bdb08ba01e","modified":1583069046148},{"_id":"themes/icarus/layout/comment/gitment.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1583069046148},{"_id":"themes/icarus/layout/comment/livere.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1583069046148},{"_id":"themes/icarus/layout/comment/isso.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/comment/utterances.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/comment/utterances.ejs","hash":"bf04ba1129aa75030397074d1470103ac7604784","modified":1583069046148},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1583069046148},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"31471cd05018583249b4c09a78cf1d02e7987244","modified":1583069046148},{"_id":"themes/icarus/layout/comment/valine.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1583069046148},{"_id":"themes/icarus/layout/search/baidu.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1583069046148},{"_id":"themes/icarus/layout/search/google-cse.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046148},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1583069046152},{"_id":"themes/icarus/layout/search/insight.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1583069046152},{"_id":"themes/icarus/layout/share/addthis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1583069046152},{"_id":"themes/icarus/layout/share/addtoany.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/share/bdshare.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1583069046152},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1583069046152},{"_id":"themes/icarus/layout/share/sharejs.locals.js","hash":"11976fd4cfed1044be29b476b34c33175c9b4308","modified":1583069046152},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1583069046152},{"_id":"themes/icarus/layout/share/sharethis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"c17ea2cfe5cb239342166e2ba72cbfc663c8160f","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/animejs.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"5936b5fd2f2444605a21c6c422623f07f02d5c9a","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/back-to-top.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"7dbbea5722277e00a624c1796ec83d5f9c12d059","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/baidu-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"4285b0ae608c7c54e4ecbebb6d22d4cd1be28f70","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/busuanzi.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"7d19b7a5713d08a614578f079f1327a651c472ae","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"13b298b0026bfc7bcb6a47b6c795fe15cc4584fc","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/gallery.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/google-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"6df0d8f77ed39e4d32c78177844115e31bf3a776","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"dddb6f37487286fe2080118bcbb4a8d82dc84d5e","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/mathjax.locals.js","hash":"7faa26fa6da6a93dc3f7fdcf5a784d1f8825b031","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/hotjar.locals.js","hash":"9258fc2af057d2545a43fae54790743b63450378","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"1437d1ac085a8110e61317254f6c0a034121bc39","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/outdated-browser.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1583069046148},{"_id":"themes/icarus/layout/plugin/progressbar.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1583069046148},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1583069046152},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1583069046152},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1583069046152},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1583069046152},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1583069046152},{"_id":"themes/icarus/layout/widget/archive.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"17e58e537645c4434a1140377ae3e7f43cca4927","modified":1583069046152},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"34423f74787cc9d67b2598dd69b07c84d5bf2280","modified":1583069046148},{"_id":"themes/icarus/source/css/style.styl","hash":"53f6cfda231912ba195f493fbfbc201b71a69a25","modified":1583069046152},{"_id":"themes/icarus/layout/widget/category.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"bb6510193632413e83227bdffad7c3b37629dcde","modified":1583069046152},{"_id":"themes/icarus/layout/widget/links.locals.js","hash":"872cf1a18e152361f5739c6d5fecc0bf46d59513","modified":1583069046152},{"_id":"themes/icarus/layout/widget/profile.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1583069046152},{"_id":"themes/icarus/layout/widget/recent_posts.locals.js","hash":"5065aca74ec2c98ec88994636fee8408f769c5f2","modified":1583069046152},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"14a2f4587831e017b93818c06dbe18a7e8a27c1e","modified":1583069046152},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"b5dfd0db3851bf046f28431c9f2adcecc1e7b1df","modified":1583069046152},{"_id":"themes/icarus/layout/widget/subscribe_email.locals.js","hash":"aae87fbdb7a1245a0fc0637225a935fc39836916","modified":1583069046152},{"_id":"themes/icarus/layout/widget/subscribe_email.ejs","hash":"391622e9c1d17bf79180faa617ed8c1ee1871a87","modified":1583069046152},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"e41aff420cc4ea1c454de49bd8af0e7a93f3db3f","modified":1583069046152},{"_id":"themes/icarus/layout/widget/tagcloud.locals.js","hash":"093f59d2f43e7ffa47bee79da15f98705300dfba","modified":1583069046152},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"e800b4b38eab716882389a09527e9f59a189dea6","modified":1583069046152},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"26fa17afaf0cb345a213816c44c39575a66759ba","modified":1583069046152},{"_id":"themes/icarus/layout/widget/toc.locals.js","hash":"e730a7fff2717f17741540e5ed77b89e289fdeab","modified":1583069046152},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1583069046152},{"_id":"themes/icarus/source/images/avatar.png","hash":"bff1cc0ae5654a0d274bb5f2136156e768fbb1ee","modified":1583068585756},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1583069046152},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1583069046152},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1583069046152},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1583069046152},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1583069046152},{"_id":"themes/icarus/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1583069046152},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1583069046152},{"_id":"themes/icarus/source/js/main.js","hash":"9b7063b2faf8cc43e8539d777285e20574011769","modified":1583069046152},{"_id":"source/images/adaptiveLoading/adaptiveLoading_2.png","hash":"5c0e6e9d35854da485817865fc21e8e0728d0613","modified":1582443409202},{"_id":"source/images/adaptiveLoading/adaptiveLoading_5.png","hash":"65bc76fbff97b0a632575c61668b4a0e528ce62e","modified":1582443409202},{"_id":"source/images/adaptiveLoading/adaptiveLoading_3.png","hash":"c776e73dbe088f0615c87e42e372f8764594567d","modified":1582443409202},{"_id":"source/images/adaptiveLoading/adaptiveLoading_4.png","hash":"99a6d984fd6331d1fe6f91ea7cce4d812e74e3d8","modified":1582443409202},{"_id":"source/images/adaptiveLoading/adaptiveLoading_7.png","hash":"8c5ca9b857725edb5793d7cd7a9efc9838232cbc","modified":1582443409206},{"_id":"source/images/adaptiveLoading/adaptiveLoading_6.png","hash":"80cbaa0c38f34d550ba0e986792aea6055e1f22f","modified":1582443409202},{"_id":"source/images/next-generation-web-styling/houdini_1.png","hash":"1a7c20ab8b3b45419f3a5ec1b92a1da44b9af3e6","modified":1582443409206},{"_id":"source/images/next-generation-web-styling/animation_worklet_1.png","hash":"f48143cb96c648af539a1f617091d077e15717f1","modified":1582443409206},{"_id":"source/images/next-generation-web-styling/localproperty_1.png","hash":"a0bdec48ff0407fd02180c186a2050a2c2047c29","modified":1582443409206},{"_id":"source/images/next-generation-web-styling/localproperty_4.png","hash":"f7d9fa12710afd1cdae508e2972bde24f023a531","modified":1582443409210},{"_id":"source/images/next-generation-web-styling/paintedAPI_2.png","hash":"a7441043d3237c239df3021752d7a0adb69df412","modified":1582443409210},{"_id":"source/images/next-generation-web-styling/paintedAPI_3.png","hash":"a3d29e335ae20605ededbe1448a487a71d9715f3","modified":1582443409210},{"_id":"source/images/next-generation-web-styling/prefer_1.png","hash":"8e0b1a05bd10bd350692506b50da7b829c56171f","modified":1582443409210},{"_id":"source/images/next-generation-web-styling/typedOM_1.png","hash":"5491b974d20774fd17ae3f00e631263ecf1da0b0","modified":1582443409214},{"_id":"source/images/next-generation-web-styling/worklet_1.png","hash":"acce53b3827960f0d171494ef218a710de12d2de","modified":1582443409214},{"_id":"source/images/adaptiveLoading/adaptiveLoading_1.png","hash":"62ae2abedd749246d5e51c56382dcb6bd09952c5","modified":1582443409202},{"_id":"source/images/java/stream/fork_join.jpg","hash":"a36b1fcd0ca5945bf007ed3000730ff07754954a","modified":1582443409206},{"_id":"source/images/java/stream/fork_join_queue.jpg","hash":"1f6bad523739c92e92485c982d57813c8f763fb3","modified":1582443409206},{"_id":"source/images/next-generation-web-styling/houdini_2.png","hash":"65d0619bac2c4d4ed0fd244b9e4f6acd61af6789","modified":1582443409206},{"_id":"source/images/next-generation-web-styling/localproperty_2.png","hash":"8886c14520d379d42ac1d6dc6ed8c72d2ed5565d","modified":1582443409206},{"_id":"source/images/next-generation-web-styling/prefer_2.png","hash":"89f429f59f19e0dc11755df594eb925bab160b80","modified":1582443409210},{"_id":"source/images/next-generation-web-styling/property_value_1.png","hash":"21b667720cbe4bb28dba1a9a63a6fba2e5d0a470","modified":1582443409214},{"_id":"themes/icarus/.git/refs/heads/master","hash":"137cb274a63b5077b98faf84d4b511acbdaa94b3","modified":1583069046132},{"_id":"source/images/next-generation-web-styling/localproperty_3.png","hash":"b1eef1cc72c9211f1086848387c6b1c0ae1a2227","modified":1582443409210},{"_id":"source/images/next-generation-web-styling/paintedAPI_1.png","hash":"b11ba54d6eb31e7a17f2cf288f1cacd2c7bd747e","modified":1582443409210},{"_id":"source/images/springboot/eventpublishinglistener/eventpublisingrunlistener.png","hash":"72830327e311e2c23800ac8934b5e939611ec3d8","modified":1582443409214},{"_id":"themes/icarus/.git/objects/pack/pack-3deb17e2e1753f1475148cec41d610d70760e1e9.idx","hash":"1a588e2c906b06ccda3246c9d34698fc1b5cb22b","modified":1583069046096},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"1311ec2542d667f3697885095088b3804b2e106f","modified":1583069046132},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1583069046128},{"_id":"source/images/java/fundamental/method_area/method_area.png","hash":"0e78fe7dc657b1010ac98634f9a52c6e17793b0a","modified":1583063421224},{"_id":"source/images/java/fundamental/method_stack_memory/native_method.png","hash":"c9a9c5d0024127cf97abe15774424d493f83164f","modified":1583063421224},{"_id":"source/images/java/fundamental/runtime_data_areas/runtime_data_areas.png","hash":"b07f364893518e6b2062e44abb06cdf936998e88","modified":1583063421228},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"1311ec2542d667f3697885095088b3804b2e106f","modified":1583069046128},{"_id":"source/images/java/fundamental/method_stack_memory/method_stacks.png","hash":"f144e13746198300530f6f55d2b9585a0c44c56b","modified":1583063421224},{"_id":"source/images/java/fundamental/method_stack_memory/operand_stack.png","hash":"b0057b242ad1c2f53819a8b69927bcae39fd7bc7","modified":1583063421224},{"_id":"themes/icarus/.git/objects/pack/pack-3deb17e2e1753f1475148cec41d610d70760e1e9.pack","hash":"66f6ee60f498656bdafc032f68ba93c72fb2fff1","modified":1583069046092},{"_id":"public/content.json","hash":"b9fbdfbb8be80d06e6181cf6aff28fa4a2c4acfc","modified":1583069703878},{"_id":"public/2019/10/28/Setting/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583069703878},{"_id":"public/all-tags/index.html","hash":"872a4050f9c5d5ee8077b7d5c638773e31b8f561","modified":1583069738883},{"_id":"public/all-archives/index.html","hash":"c397e96b75858f4be78b1fa5932326a9cdd1e1f8","modified":1583069738883},{"_id":"public/all-categories/index.html","hash":"2d9adcf336aa1b65f91e589a9f9cbae92b7b2e89","modified":1583069738883},{"_id":"public/hello/index.html","hash":"ecadbdf38210ce2e217b1a6118185bd233bbac7d","modified":1583069738883},{"_id":"public/2020/03/01/project-start-materials/index.html","hash":"c25616cbd02b26951fb697caad895a6e6c1b6aab","modified":1583069738883},{"_id":"public/2020/02/27/java-fundamental-method-area/index.html","hash":"5585493b272e3f41aaeaee77941cae16da077c6c","modified":1583069738883},{"_id":"public/2020/02/27/java-fundamental-runtime-data-areas/index.html","hash":"8c3cfccd20517e7f7ba1c7442acdc872cb1a1631","modified":1583069738883},{"_id":"public/2020/02/27/java-fundamental-method-stack/index.html","hash":"e1cf89534a49b96d4da4137e9120d76b02f7aba8","modified":1583069738883},{"_id":"public/2020/02/23/WebAssembly-summit-2020/index.html","hash":"a461d06dd26f73dc9cb4ff042530e9f02871471d","modified":1583069738883},{"_id":"public/2020/02/19/java-stream-function-interface/index.html","hash":"31d985e7b6e80da0b06754fd30a6ec87f2e0ded4","modified":1583069738883},{"_id":"public/2020/02/19/java-poi/index.html","hash":"753d3911927d16a92c5fb72f241687492455b9a8","modified":1583069738883},{"_id":"public/2020/02/19/java-stream-parallel/index.html","hash":"cd4b728de2e79d9560620fb164eb5be85e65fa32","modified":1583069738883},{"_id":"public/2020/02/19/java-stream/index.html","hash":"4b05fba6b8149e1a4546c8e1b7e9e9fce10383ff","modified":1583069738883},{"_id":"public/2020/02/18/apache-ignite-spring-boot/index.html","hash":"130f15781e8687007ab67fdaf229a4704babd07e","modified":1583069738883},{"_id":"public/2020/02/18/spring-boot-logging/index.html","hash":"c348eaeebf2f1917470e5c332033a0a6c1ce98ce","modified":1583069738883},{"_id":"public/2020/01/20/enable-annotation-spring/index.html","hash":"5f54baf90e6110e9336e6a3bc8952b93f8032477","modified":1583069738883},{"_id":"public/2020/01/20/annotation/index.html","hash":"64f434f6712caea1299f278dfd81c94c87819ce7","modified":1583069738883},{"_id":"public/2019/12/20/spring-initializer/index.html","hash":"5a3566443e1da6d5af59600cc6c2f97814472379","modified":1583069738883},{"_id":"public/2019/12/19/event-publishing-run-listener/index.html","hash":"f3f3ee8cb32e93201c115b7c5a49cbb7557ae79f","modified":1583069738883},{"_id":"public/2019/12/19/spring-application-run-listeners/index.html","hash":"2e4b1e07563cbbcedb755aca7f7419b8a88ee056","modified":1583069738883},{"_id":"public/2019/12/19/application-argument/index.html","hash":"560132018a8d06424ba7158109a9479695180926","modified":1583069738883},{"_id":"public/2019/12/19/springboot-run/index.html","hash":"46ec675964a13c626862bbc4c8d515484455c4f4","modified":1583069738883},{"_id":"public/2019/12/19/configurable-application-context/index.html","hash":"f7a385f4b7790c8f264ae4089169c8cbd2c7b3ea","modified":1583069738883},{"_id":"public/2019/12/13/next-generation-web-styling/index.html","hash":"a438a3ca4320f0ffa8857cd09be0bedcacf675d1","modified":1583069738883},{"_id":"public/2019/12/11/adaptive-loading/index.html","hash":"54ff05c7e5facc4b4112dd4e9ffb8419f9e1ba09","modified":1583069738883},{"_id":"public/2019/11/22/spring-security/index.html","hash":"8b2445b442c7b93ba07e93def32e6436396b6a05","modified":1583069738883},{"_id":"public/2019/11/21/spring-security-filter/index.html","hash":"657c4c03709668873b8bd539858081aaa974bb45","modified":1583069738883},{"_id":"public/2019/11/18/jpa/index.html","hash":"c75ab9e0dcf5c045040a48c2442d633f1d11aa50","modified":1583069738883},{"_id":"public/2019/11/18/hello-world/index.html","hash":"528029e0241f302edaa2780ac173192bd74517db","modified":1583069738883},{"_id":"public/2019/10/28/intro/index.html","hash":"2090d820dce00bd97d192ced6cce869b42344852","modified":1583069738883},{"_id":"public/archives/index.html","hash":"a8c361ef9cc0fe1ff59a98d86925c2a854fd2619","modified":1583069738883},{"_id":"public/archives/page/2/index.html","hash":"51a5a5d5c48fd53a8ce5d81c1400c3deff8dcc5b","modified":1583069738883},{"_id":"public/archives/page/3/index.html","hash":"8f38445c7525c27893a2b7a14fda977cfe817f8f","modified":1583069738883},{"_id":"public/archives/2019/index.html","hash":"7222c9923f0ef37d36602e59e821164644f57e2f","modified":1583069738883},{"_id":"public/archives/2019/page/2/index.html","hash":"8145a18ceb6fe5c8f83fd6f86495db8e8e30071f","modified":1583069738883},{"_id":"public/archives/2019/10/index.html","hash":"e857b7fe27ea2d48e797770425e2d4e53956f9ad","modified":1583069738883},{"_id":"public/archives/2019/11/index.html","hash":"b7ba77d7e3740374a8621144259fe8788c5044d1","modified":1583069738883},{"_id":"public/archives/2019/12/index.html","hash":"3430ae1d116b5c6559d8dbc63e52119cd55ed614","modified":1583069738883},{"_id":"public/archives/2020/index.html","hash":"cc669aafdcf641217ce4a5928b3cce3f26be8f2d","modified":1583069738883},{"_id":"public/archives/2020/page/2/index.html","hash":"90082c1e91499bee167e232e174db28651ea7543","modified":1583069738883},{"_id":"public/archives/2020/01/index.html","hash":"192f9eb3d4858613f68603847b3bd6b810e6e1fc","modified":1583069738883},{"_id":"public/archives/2020/02/index.html","hash":"4be10ee264ef464c39d8e79a842b8280c719dc6c","modified":1583069738883},{"_id":"public/archives/2020/03/index.html","hash":"7dda7c4ce33080a8b5c22fc0a10afefce2ed35f3","modified":1583069738883},{"_id":"public/index.html","hash":"565c9e2f9743f924a9451a4d706e6cfd2383f618","modified":1583069738883},{"_id":"public/page/2/index.html","hash":"e3ccae7531433707ea317d9384b7354216472335","modified":1583069738883},{"_id":"public/page/3/index.html","hash":"0f5da8c065d4ac0aca40d83d741792aa148c91b3","modified":1583069738883},{"_id":"public/tags/jpa-hibernate/index.html","hash":"80a69af28622706debc3047667375d7b772ba246","modified":1583069738883},{"_id":"public/tags/Spring-Boot-Listener/index.html","hash":"6e73f2d2944ca0de23d605af0139213a67b199cb","modified":1583069738883},{"_id":"public/tags/SpringBoot/index.html","hash":"6517c83099e37c0175527462a07d4128ebb05539","modified":1583069738883},{"_id":"public/categories/index.html","hash":"9f0793d0ea3e2c02fd7bb863c3a6cacbd21aee4e","modified":1583069738883},{"_id":"public/tags/index.html","hash":"156fa4eff323be183f7842c8f7b32f8fa13b5153","modified":1583069738883},{"_id":"public/CNAME","hash":"8d852a77bc2a7d2eeafa77c4a93f82e75ddffe2f","modified":1583069703878},{"_id":"public/images/jvm_stack_01.gif","hash":"fbbfc8db97a21ba95f3fa33203ec33eb99620235","modified":1583069703878},{"_id":"public/images/jpa_hibernate_relationship.png","hash":"e67c240c37ba27826a245972e214ba70845adde0","modified":1583069703878},{"_id":"public/images/security-interception.png","hash":"a5a3686aa8f60af32ff094604162646a22488e74","modified":1583069703878},{"_id":"public/images/application-argument/CommandLineArgs.png","hash":"e6f23716b80172862cf32604b1885694263d2ac8","modified":1583069703878},{"_id":"public/images/application-argument/SimpleCommandLineProperty.png","hash":"8ea5cd51ddada1260014662062a93f417da044f5","modified":1583069703878},{"_id":"public/images/application-argument/DefaultApplicationArguments.png","hash":"75db496b8b9ddf4c42a16618cd6b078c2ed96385","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/paintedAPI_4.png","hash":"887e1908a56e2d53c5d168c80b2045b2ac16e9aa","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/property_value_2.png","hash":"a8f36d4ddaf59de4918481fefbc515fb10420c2c","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/property_value_3.png","hash":"8fe40cd6ba8ea9f74e1bafe539e9bb16aa038ea0","modified":1583069703878},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1583069703878},{"_id":"public/images/avatar.png","hash":"bff1cc0ae5654a0d274bb5f2136156e768fbb1ee","modified":1583069703878},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1583069703878},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1583069703878},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1583069703878},{"_id":"public/images/java/stream/fork_join.jpg","hash":"a36b1fcd0ca5945bf007ed3000730ff07754954a","modified":1583069703878},{"_id":"public/images/java/stream/fork_join_queue.jpg","hash":"1f6bad523739c92e92485c982d57813c8f763fb3","modified":1583069703878},{"_id":"public/images/springboot/eventpublishinglistener/eventpublisingrunlistener.png","hash":"72830327e311e2c23800ac8934b5e939611ec3d8","modified":1583069703878},{"_id":"public/images/Spring_Bean_Name_Aware.png","hash":"a7ecc957342569a72407b5276f53499ccb48cc0a","modified":1583069703878},{"_id":"public/images/adaptiveLoading/adaptiveLoading_2.png","hash":"5c0e6e9d35854da485817865fc21e8e0728d0613","modified":1583069703878},{"_id":"public/images/adaptiveLoading/adaptiveLoading_5.png","hash":"65bc76fbff97b0a632575c61668b4a0e528ce62e","modified":1583069703878},{"_id":"public/images/adaptiveLoading/adaptiveLoading_3.png","hash":"c776e73dbe088f0615c87e42e372f8764594567d","modified":1583069703878},{"_id":"public/images/adaptiveLoading/adaptiveLoading_4.png","hash":"99a6d984fd6331d1fe6f91ea7cce4d812e74e3d8","modified":1583069703878},{"_id":"public/images/adaptiveLoading/adaptiveLoading_6.png","hash":"80cbaa0c38f34d550ba0e986792aea6055e1f22f","modified":1583069703878},{"_id":"public/images/adaptiveLoading/adaptiveLoading_7.png","hash":"8c5ca9b857725edb5793d7cd7a9efc9838232cbc","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/houdini_1.png","hash":"1a7c20ab8b3b45419f3a5ec1b92a1da44b9af3e6","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/animation_worklet_1.png","hash":"f48143cb96c648af539a1f617091d077e15717f1","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/localproperty_1.png","hash":"a0bdec48ff0407fd02180c186a2050a2c2047c29","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/localproperty_4.png","hash":"f7d9fa12710afd1cdae508e2972bde24f023a531","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/paintedAPI_2.png","hash":"a7441043d3237c239df3021752d7a0adb69df412","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/paintedAPI_3.png","hash":"a3d29e335ae20605ededbe1448a487a71d9715f3","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/prefer_1.png","hash":"8e0b1a05bd10bd350692506b50da7b829c56171f","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/typedOM_1.png","hash":"5491b974d20774fd17ae3f00e631263ecf1da0b0","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/worklet_1.png","hash":"acce53b3827960f0d171494ef218a710de12d2de","modified":1583069703878},{"_id":"public/images/java/fundamental/method_area/method_area.png","hash":"0e78fe7dc657b1010ac98634f9a52c6e17793b0a","modified":1583069703878},{"_id":"public/images/java/fundamental/runtime_data_areas/runtime_data_areas.png","hash":"b07f364893518e6b2062e44abb06cdf936998e88","modified":1583069703878},{"_id":"public/images/java/fundamental/method_stack_memory/native_method.png","hash":"c9a9c5d0024127cf97abe15774424d493f83164f","modified":1583069703878},{"_id":"public/images/java/fundamental/method_stack_memory/method_stacks.png","hash":"f144e13746198300530f6f55d2b9585a0c44c56b","modified":1583069703878},{"_id":"public/images/java/fundamental/method_stack_memory/operand_stack.png","hash":"b0057b242ad1c2f53819a8b69927bcae39fd7bc7","modified":1583069703878},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1583069703878},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1583069703878},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1583069703878},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1583069703878},{"_id":"public/css/style.css","hash":"666763ad6166f499d68a31ee2638e78d20174e6b","modified":1583069703878},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1583069703878},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1583069703878},{"_id":"public/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1583069703878},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1583069703878},{"_id":"public/js/main.js","hash":"9b7063b2faf8cc43e8539d777285e20574011769","modified":1583069703878},{"_id":"public/images/adaptiveLoading/adaptiveLoading_1.png","hash":"62ae2abedd749246d5e51c56382dcb6bd09952c5","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/houdini_2.png","hash":"65d0619bac2c4d4ed0fd244b9e4f6acd61af6789","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/property_value_1.png","hash":"21b667720cbe4bb28dba1a9a63a6fba2e5d0a470","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/localproperty_3.png","hash":"b1eef1cc72c9211f1086848387c6b1c0ae1a2227","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/paintedAPI_1.png","hash":"b11ba54d6eb31e7a17f2cf288f1cacd2c7bd747e","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/localproperty_2.png","hash":"8886c14520d379d42ac1d6dc6ed8c72d2ed5565d","modified":1583069703878},{"_id":"public/images/next-generation-web-styling/prefer_2.png","hash":"89f429f59f19e0dc11755df594eb925bab160b80","modified":1583069703878},{"_id":"themes/icarus/package-lock.json","hash":"d40be8909ce30f75bc05ac6599302c3d6aab81cf","modified":1583069840969}],"Category":[],"Data":[],"Page":[{"title":"all-tags","date":"2019-10-28T06:57:14.000Z","comments":0,"_content":"","source":"all-tags/index.md","raw":"---\ntitle: all-tags\ndate: 2019-10-28 15:57:14\ncomments: false\n---\n","updated":"2019-11-17T19:16:54.950Z","path":"all-tags/index.html","layout":"page","_id":"ck792ttid00019zbp0kwo9r4s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"all-archives","date":"2019-10-28T07:07:34.000Z","_content":"","source":"all-archives/index.md","raw":"---\ntitle: all-archives\ndate: 2019-10-28 16:07:34\n---\n","updated":"2019-11-17T19:16:54.950Z","path":"all-archives/index.html","comments":1,"layout":"page","_id":"ck792ttig00039zbp5kfq6xfp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"all-categories","date":"2019-10-28T06:57:07.000Z","comments":0,"_content":"","source":"all-categories/index.md","raw":"---\ntitle: all-categories\ndate: 2019-10-28 15:57:07\ncomments: false\n---\n","updated":"2019-11-17T19:16:54.950Z","path":"all-categories/index.html","layout":"page","_id":"ck792ttij00059zbp0frf5y0b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hello","date":"2019-10-28T06:53:51.000Z","_content":"","source":"hello/index.md","raw":"---\ntitle: hello\ndate: 2019-10-28 15:53:51\n---\n","updated":"2019-11-17T19:16:54.950Z","path":"hello/index.html","comments":1,"layout":"page","_id":"ck792ttio00089zbpbwuf1c6n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Setting","date":"2019-10-28T07:11:14.000Z","comments":0,"meta":false,"actions":false,"_content":"\nhttps://github.com/LouisBarranqueiro\nhttps://github.com/LouisBarranqueiro/hexo-algoliasearch\nhello\nolleh\n\n![](/images/jvm_stack_01.gif)\n\n``` java\npublic static void main(String[] args) {\n\n}\n```\n","source":"_posts/Setting.md","raw":"---\ntitle: Setting\ndate: 2019-10-28 16:11:14\ncomments: false\nmeta: false\nactions: false\n---\n\nhttps://github.com/LouisBarranqueiro\nhttps://github.com/LouisBarranqueiro/hexo-algoliasearch\nhello\nolleh\n\n![](/images/jvm_stack_01.gif)\n\n``` java\npublic static void main(String[] args) {\n\n}\n```\n","slug":"Setting","published":1,"updated":"2019-11-17T19:16:54.950Z","layout":"post","photos":[],"link":"","_id":"ck792tti800009zbp4y9vfezi","content":"<p><a href=\"https://github.com/LouisBarranqueiro\">https://github.com/LouisBarranqueiro</a><br><a href=\"https://github.com/LouisBarranqueiro/hexo-algoliasearch\">https://github.com/LouisBarranqueiro/hexo-algoliasearch</a><br>hello<br>olleh</p>\n<p><img src=\"/images/jvm_stack_01.gif\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/LouisBarranqueiro\">https://github.com/LouisBarranqueiro</a><br><a href=\"https://github.com/LouisBarranqueiro/hexo-algoliasearch\">https://github.com/LouisBarranqueiro/hexo-algoliasearch</a><br>hello<br>olleh</p>\n<p><img src=\"/images/jvm_stack_01.gif\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"JPA","_content":"\nJPA ( Java Persistent API )와 ORM ( Object Relational Mapping )\n\nJPA란 자바 ORM 기술에 대한 API 표준 명세를 의미.\n\nJPA는 ORM을 사용하기 위한 인터페이스를 모아둔 것이다. \nJPA는 Java Persistence API의 약자로, 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스이다. \n일반적인 백엔드 API가 클라이언트가 어떻게 서버를 사용해야 하는지를 정의한 것처럼, \nJPA 역시 자바 어플리케이션에서 관계형 데이터베이스를 어떻게 사용해야 하는지를 정의하는 한 방법일 뿐이다.\n\nJPA는 단순히 명세이기 때문에 구현이 없다. JPA를 정의한 javax.persistence 패키지의 \n대부분은 interface, enum, Exception, 그리고 각종 Annotation으로 이루어져 있다. \n예를 들어, JPA의 핵심이 되는 EntityManager는 아래와 같이 javax.persistence.EntityManager 라는 파일에 interface로 정의되어 있다.\n\n\n``` java\npackage javax.persistence;\n\nimport ...\n\npublic interface EntityManager {\n\n    public void persist(Object entity);\n\n    public <T> T merge(T entity);\n\n    public void remove(Object entity);\n\n    public <T> T find(Class<T> entityClass, Object primaryKey);\n\n    // More interface methods...\n}\n```\n\n\nJPA를 사용하기 위해서는 JPA를 구현한 Hibernate, EclipseLink, DataNucleus 같은 ORM 프레임워크를 사용해야 한다.\n\n![](/images/jpa_hibernate_relationship.png)\n\n위와 같이 Interface의 구현체이며, EntityManagerFactory, EntityManager, EntityTransaction을  SessionFactory, Session, Transaction으로 상속받고 이를 Impl Class로 구현한다.\n\nSpring Data JPA    \n","source":"_drafts/jpa.md","raw":"---\ntitle: JPA\ntags: jpa, hibernate\n---\n\nJPA ( Java Persistent API )와 ORM ( Object Relational Mapping )\n\nJPA란 자바 ORM 기술에 대한 API 표준 명세를 의미.\n\nJPA는 ORM을 사용하기 위한 인터페이스를 모아둔 것이다. \nJPA는 Java Persistence API의 약자로, 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스이다. \n일반적인 백엔드 API가 클라이언트가 어떻게 서버를 사용해야 하는지를 정의한 것처럼, \nJPA 역시 자바 어플리케이션에서 관계형 데이터베이스를 어떻게 사용해야 하는지를 정의하는 한 방법일 뿐이다.\n\nJPA는 단순히 명세이기 때문에 구현이 없다. JPA를 정의한 javax.persistence 패키지의 \n대부분은 interface, enum, Exception, 그리고 각종 Annotation으로 이루어져 있다. \n예를 들어, JPA의 핵심이 되는 EntityManager는 아래와 같이 javax.persistence.EntityManager 라는 파일에 interface로 정의되어 있다.\n\n\n``` java\npackage javax.persistence;\n\nimport ...\n\npublic interface EntityManager {\n\n    public void persist(Object entity);\n\n    public <T> T merge(T entity);\n\n    public void remove(Object entity);\n\n    public <T> T find(Class<T> entityClass, Object primaryKey);\n\n    // More interface methods...\n}\n```\n\n\nJPA를 사용하기 위해서는 JPA를 구현한 Hibernate, EclipseLink, DataNucleus 같은 ORM 프레임워크를 사용해야 한다.\n\n![](/images/jpa_hibernate_relationship.png)\n\n위와 같이 Interface의 구현체이며, EntityManagerFactory, EntityManager, EntityTransaction을  SessionFactory, Session, Transaction으로 상속받고 이를 Impl Class로 구현한다.\n\nSpring Data JPA    \n","slug":"jpa","published":0,"date":"2019-11-17T19:16:54.950Z","updated":"2019-11-17T19:16:54.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttie00029zbpg0hr87qz","content":"<p>JPA ( Java Persistent API )와 ORM ( Object Relational Mapping )</p>\n<p>JPA란 자바 ORM 기술에 대한 API 표준 명세를 의미.</p>\n<p>JPA는 ORM을 사용하기 위한 인터페이스를 모아둔 것이다.<br>JPA는 Java Persistence API의 약자로, 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스이다.<br>일반적인 백엔드 API가 클라이언트가 어떻게 서버를 사용해야 하는지를 정의한 것처럼,<br>JPA 역시 자바 어플리케이션에서 관계형 데이터베이스를 어떻게 사용해야 하는지를 정의하는 한 방법일 뿐이다.</p>\n<p>JPA는 단순히 명세이기 때문에 구현이 없다. JPA를 정의한 javax.persistence 패키지의<br>대부분은 interface, enum, Exception, 그리고 각종 Annotation으로 이루어져 있다.<br>예를 들어, JPA의 핵심이 되는 EntityManager는 아래와 같이 javax.persistence.EntityManager 라는 파일에 interface로 정의되어 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.persistence;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EntityManager</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">persist</span><span class=\"params\">(Object entity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">merge</span><span class=\"params\">(T entity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Object entity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">find</span><span class=\"params\">(Class&lt;T&gt; entityClass, Object primaryKey)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// More interface methods...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>JPA를 사용하기 위해서는 JPA를 구현한 Hibernate, EclipseLink, DataNucleus 같은 ORM 프레임워크를 사용해야 한다.</p>\n<p><img src=\"/images/jpa_hibernate_relationship.png\" alt=\"\"></p>\n<p>위와 같이 Interface의 구현체이며, EntityManagerFactory, EntityManager, EntityTransaction을  SessionFactory, Session, Transaction으로 상속받고 이를 Impl Class로 구현한다.</p>\n<p>Spring Data JPA    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>JPA ( Java Persistent API )와 ORM ( Object Relational Mapping )</p>\n<p>JPA란 자바 ORM 기술에 대한 API 표준 명세를 의미.</p>\n<p>JPA는 ORM을 사용하기 위한 인터페이스를 모아둔 것이다.<br>JPA는 Java Persistence API의 약자로, 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스이다.<br>일반적인 백엔드 API가 클라이언트가 어떻게 서버를 사용해야 하는지를 정의한 것처럼,<br>JPA 역시 자바 어플리케이션에서 관계형 데이터베이스를 어떻게 사용해야 하는지를 정의하는 한 방법일 뿐이다.</p>\n<p>JPA는 단순히 명세이기 때문에 구현이 없다. JPA를 정의한 javax.persistence 패키지의<br>대부분은 interface, enum, Exception, 그리고 각종 Annotation으로 이루어져 있다.<br>예를 들어, JPA의 핵심이 되는 EntityManager는 아래와 같이 javax.persistence.EntityManager 라는 파일에 interface로 정의되어 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.persistence;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EntityManager</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">persist</span><span class=\"params\">(Object entity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">merge</span><span class=\"params\">(T entity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Object entity)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">find</span><span class=\"params\">(Class&lt;T&gt; entityClass, Object primaryKey)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// More interface methods...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>JPA를 사용하기 위해서는 JPA를 구현한 Hibernate, EclipseLink, DataNucleus 같은 ORM 프레임워크를 사용해야 한다.</p>\n<p><img src=\"/images/jpa_hibernate_relationship.png\" alt=\"\"></p>\n<p>위와 같이 Interface의 구현체이며, EntityManagerFactory, EntityManager, EntityTransaction을  SessionFactory, Session, Transaction으로 상속받고 이를 Impl Class로 구현한다.</p>\n<p>Spring Data JPA    </p>\n"},{"title":"apache-ignite-spring-boot","date":"2020-02-18T13:00:35.000Z","_content":"cache도 전략 및 패턴을 좀 봐야함\n\nhttps://brunch.co.kr/@springboot/151\nhttps://www.slideshare.net/ssuser373c87/accelerate-spring-boot-application-with-apache-ignite\nhttps://github.com/iyboklee/boot-cache-ignite\nhttps://github.com/iyboklee/boot-data-ignite\nhttps://github.com/iyboklee/boot-rw-through-ignite\n","source":"_posts/apache-ignite-spring-boot.md","raw":"---\ntitle: apache-ignite-spring-boot\ndate: 2020-02-18 22:00:35\ntags:\n---\ncache도 전략 및 패턴을 좀 봐야함\n\nhttps://brunch.co.kr/@springboot/151\nhttps://www.slideshare.net/ssuser373c87/accelerate-spring-boot-application-with-apache-ignite\nhttps://github.com/iyboklee/boot-cache-ignite\nhttps://github.com/iyboklee/boot-data-ignite\nhttps://github.com/iyboklee/boot-rw-through-ignite\n","slug":"apache-ignite-spring-boot","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttii00049zbp6tm0awes","content":"<p>cache도 전략 및 패턴을 좀 봐야함</p>\n<p><a href=\"https://brunch.co.kr/@springboot/151\">https://brunch.co.kr/@springboot/151</a><br><a href=\"https://www.slideshare.net/ssuser373c87/accelerate-spring-boot-application-with-apache-ignite\">https://www.slideshare.net/ssuser373c87/accelerate-spring-boot-application-with-apache-ignite</a><br><a href=\"https://github.com/iyboklee/boot-cache-ignite\">https://github.com/iyboklee/boot-cache-ignite</a><br><a href=\"https://github.com/iyboklee/boot-data-ignite\">https://github.com/iyboklee/boot-data-ignite</a><br><a href=\"https://github.com/iyboklee/boot-rw-through-ignite\">https://github.com/iyboklee/boot-rw-through-ignite</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>cache도 전략 및 패턴을 좀 봐야함</p>\n<p><a href=\"https://brunch.co.kr/@springboot/151\">https://brunch.co.kr/@springboot/151</a><br><a href=\"https://www.slideshare.net/ssuser373c87/accelerate-spring-boot-application-with-apache-ignite\">https://www.slideshare.net/ssuser373c87/accelerate-spring-boot-application-with-apache-ignite</a><br><a href=\"https://github.com/iyboklee/boot-cache-ignite\">https://github.com/iyboklee/boot-cache-ignite</a><br><a href=\"https://github.com/iyboklee/boot-data-ignite\">https://github.com/iyboklee/boot-data-ignite</a><br><a href=\"https://github.com/iyboklee/boot-rw-through-ignite\">https://github.com/iyboklee/boot-rw-through-ignite</a></p>\n"},{"title":"adaptive-loading","date":"2019-12-11T04:45:22.000Z","_content":"https://youtu.be/puUPpVrIRkc\n\n- Adaptive Loading for improving performance (slick experience)\nDo we need to deliver the exact same experience to every user?\n많은 웹사이트들에서 자바스크립트가 많이 사용되고 있고 자바스크립트는 single thread 기반으로 실행된다.\n다양한 디바이스들의 성능은 Benchmark 를 보더라도 매년 향상되고 있지만 싱글 CPU 자체의 성능은 많이 향상되지 않았다.\n\nfor example \nyoutube -> 514kb js download\n\nnetwork type change to fast 3g\nyoutube used low network module?\n\nNetwork-aware Resource Loading\nreact-adaptive-hooks\nadaptive-vue\n\n19년 12월 기준 chrome Experimental\n\nconst network = navigator.connection.effectiveType;\n\n```jsx harmony\nimport React from 'react';\n\nimport { useNetworkStatus } from 'react-adaptive-hooks/network';\n\nconst MyComponent = () => {\n  const { effectiveConnectionType } = useNetworkStatus();\n\n  let media;\n  switch(effectiveConnectionType) {\n    case '2g':\n      media = <img src='medium-res.jpg'/>;\n      break;\n    case '3g':\n      media = <img src='high-res.jpg'/>;\n      break;\n    case '4g':\n      media = <video muted controls>...</video>;\n      break;\n    default:\n      media = <video muted controls>...</video>;\n      break;\n  }\n\n  return <div>{media}</div>;\n};\n```\n\n####memory\nnavigator.deviceMemory\n\n####cpu\nnavigator.hardwareConcurrency\n\n####Adaptive Capability Toggling\n\n####Adaptive Delivery with Client Hints\nEnable\n```html\n<meta http-equiv=\"Accept-CH\" content=\"Device-Memory, Viewport-Width Save-Data\"/>\n```\nAdded\nAccept-CH : Device-Memory, Save-Data, Viewport-Width\n\nslick experience <-> choppy experience\n\nDo not just respond based on screen size, adapt based on actual device hardware.\n\n1) Define buckets \n2) Integrate buckets into logging\n3) Adapt loading based on buckets\n![](/images/adaptiveLoading/adaptiveLoading_1.png)\n![](/images/adaptiveLoading/adaptiveLoading_2.png)\n![](/images/adaptiveLoading/adaptiveLoading_3.png)\n![](/images/adaptiveLoading/adaptiveLoading_4.png)\n![](/images/adaptiveLoading/adaptiveLoading_5.png)\n![](/images/adaptiveLoading/adaptiveLoading_6.png)\n![](/images/adaptiveLoading/adaptiveLoading_7.png)\n\n\nbrowser 기준으로\n\n1) Log hardwareConcurrency and deviceMemory\n2) Group by hardwareConcurrency, DeviceMemory, and OS when looking at perf data\n3) figure out buckets based on groupings.\n \nadaptivity should be considered in your core frameworks\n\nThink about animations\n\nLow End <- animation 제거 \nHigh End\n\nMobile Websites (Viewport-Width, CPU 등)\n\nLoad fast vs respond fast\n\nTrade-off\n\n```javascript\nif (isLowEndDevice()) {\n    scheduler.unstable_forceFrameRate(15);\n}\n```\n\n","source":"_posts/adaptive-loading.md","raw":"---\ntitle: adaptive-loading\ndate: 2019-12-11 13:45:22\ntags:\n---\nhttps://youtu.be/puUPpVrIRkc\n\n- Adaptive Loading for improving performance (slick experience)\nDo we need to deliver the exact same experience to every user?\n많은 웹사이트들에서 자바스크립트가 많이 사용되고 있고 자바스크립트는 single thread 기반으로 실행된다.\n다양한 디바이스들의 성능은 Benchmark 를 보더라도 매년 향상되고 있지만 싱글 CPU 자체의 성능은 많이 향상되지 않았다.\n\nfor example \nyoutube -> 514kb js download\n\nnetwork type change to fast 3g\nyoutube used low network module?\n\nNetwork-aware Resource Loading\nreact-adaptive-hooks\nadaptive-vue\n\n19년 12월 기준 chrome Experimental\n\nconst network = navigator.connection.effectiveType;\n\n```jsx harmony\nimport React from 'react';\n\nimport { useNetworkStatus } from 'react-adaptive-hooks/network';\n\nconst MyComponent = () => {\n  const { effectiveConnectionType } = useNetworkStatus();\n\n  let media;\n  switch(effectiveConnectionType) {\n    case '2g':\n      media = <img src='medium-res.jpg'/>;\n      break;\n    case '3g':\n      media = <img src='high-res.jpg'/>;\n      break;\n    case '4g':\n      media = <video muted controls>...</video>;\n      break;\n    default:\n      media = <video muted controls>...</video>;\n      break;\n  }\n\n  return <div>{media}</div>;\n};\n```\n\n####memory\nnavigator.deviceMemory\n\n####cpu\nnavigator.hardwareConcurrency\n\n####Adaptive Capability Toggling\n\n####Adaptive Delivery with Client Hints\nEnable\n```html\n<meta http-equiv=\"Accept-CH\" content=\"Device-Memory, Viewport-Width Save-Data\"/>\n```\nAdded\nAccept-CH : Device-Memory, Save-Data, Viewport-Width\n\nslick experience <-> choppy experience\n\nDo not just respond based on screen size, adapt based on actual device hardware.\n\n1) Define buckets \n2) Integrate buckets into logging\n3) Adapt loading based on buckets\n![](/images/adaptiveLoading/adaptiveLoading_1.png)\n![](/images/adaptiveLoading/adaptiveLoading_2.png)\n![](/images/adaptiveLoading/adaptiveLoading_3.png)\n![](/images/adaptiveLoading/adaptiveLoading_4.png)\n![](/images/adaptiveLoading/adaptiveLoading_5.png)\n![](/images/adaptiveLoading/adaptiveLoading_6.png)\n![](/images/adaptiveLoading/adaptiveLoading_7.png)\n\n\nbrowser 기준으로\n\n1) Log hardwareConcurrency and deviceMemory\n2) Group by hardwareConcurrency, DeviceMemory, and OS when looking at perf data\n3) figure out buckets based on groupings.\n \nadaptivity should be considered in your core frameworks\n\nThink about animations\n\nLow End <- animation 제거 \nHigh End\n\nMobile Websites (Viewport-Width, CPU 등)\n\nLoad fast vs respond fast\n\nTrade-off\n\n```javascript\nif (isLowEndDevice()) {\n    scheduler.unstable_forceFrameRate(15);\n}\n```\n\n","slug":"adaptive-loading","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttin00079zbp35fo290g","content":"<p><a href=\"https://youtu.be/puUPpVrIRkc\">https://youtu.be/puUPpVrIRkc</a></p>\n<ul>\n<li>Adaptive Loading for improving performance (slick experience)<br>Do we need to deliver the exact same experience to every user?<br>많은 웹사이트들에서 자바스크립트가 많이 사용되고 있고 자바스크립트는 single thread 기반으로 실행된다.<br>다양한 디바이스들의 성능은 Benchmark 를 보더라도 매년 향상되고 있지만 싱글 CPU 자체의 성능은 많이 향상되지 않았다.</li>\n</ul>\n<p>for example<br>youtube -&gt; 514kb js download</p>\n<p>network type change to fast 3g<br>youtube used low network module?</p>\n<p>Network-aware Resource Loading<br>react-adaptive-hooks<br>adaptive-vue</p>\n<p>19년 12월 기준 chrome Experimental</p>\n<p>const network = navigator.connection.effectiveType;</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNetworkStatus &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-adaptive-hooks/network'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; effectiveConnectionType &#125; = useNetworkStatus();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> media;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(effectiveConnectionType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'2g'</span>:</span><br><span class=\"line\">      media = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">'medium-res.jpg'</span>/&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      break;</span></span><br><span class=\"line\"><span class=\"xml\">    case '3g':</span></span><br><span class=\"line\">      media = &lt;img src='high-res.jpg'/&gt;;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case '4g':</span><br><span class=\"line\">      media = &lt;video muted controls&gt;...&lt;/video&gt;;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      media = &lt;video muted controls&gt;...&lt;/video&gt;;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;div&gt;&#123;media&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>####memory<br>navigator.deviceMemory</p>\n<p>####cpu<br>navigator.hardwareConcurrency</p>\n<p>####Adaptive Capability Toggling</p>\n<p>####Adaptive Delivery with Client Hints<br>Enable</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Accept-CH\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Device-Memory, Viewport-Width Save-Data\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Added<br>Accept-CH : Device-Memory, Save-Data, Viewport-Width</p>\n<p>slick experience &lt;-&gt; choppy experience</p>\n<p>Do not just respond based on screen size, adapt based on actual device hardware.</p>\n<p>1) Define buckets<br>2) Integrate buckets into logging<br>3) Adapt loading based on buckets<br><img src=\"/images/adaptiveLoading/adaptiveLoading_1.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_2.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_3.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_4.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_5.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_6.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_7.png\" alt=\"\"></p>\n<p>browser 기준으로</p>\n<p>1) Log hardwareConcurrency and deviceMemory<br>2) Group by hardwareConcurrency, DeviceMemory, and OS when looking at perf data<br>3) figure out buckets based on groupings.</p>\n<p>adaptivity should be considered in your core frameworks</p>\n<p>Think about animations</p>\n<p>Low End &lt;- animation 제거<br>High End</p>\n<p>Mobile Websites (Viewport-Width, CPU 등)</p>\n<p>Load fast vs respond fast</p>\n<p>Trade-off</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isLowEndDevice()) &#123;</span><br><span class=\"line\">    scheduler.unstable_forceFrameRate(<span class=\"number\">15</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://youtu.be/puUPpVrIRkc\">https://youtu.be/puUPpVrIRkc</a></p>\n<ul>\n<li>Adaptive Loading for improving performance (slick experience)<br>Do we need to deliver the exact same experience to every user?<br>많은 웹사이트들에서 자바스크립트가 많이 사용되고 있고 자바스크립트는 single thread 기반으로 실행된다.<br>다양한 디바이스들의 성능은 Benchmark 를 보더라도 매년 향상되고 있지만 싱글 CPU 자체의 성능은 많이 향상되지 않았다.</li>\n</ul>\n<p>for example<br>youtube -&gt; 514kb js download</p>\n<p>network type change to fast 3g<br>youtube used low network module?</p>\n<p>Network-aware Resource Loading<br>react-adaptive-hooks<br>adaptive-vue</p>\n<p>19년 12월 기준 chrome Experimental</p>\n<p>const network = navigator.connection.effectiveType;</p>\n<figure class=\"highlight jsx\"><figcaption><span>harmony</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useNetworkStatus &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-adaptive-hooks/network'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; effectiveConnectionType &#125; = useNetworkStatus();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> media;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(effectiveConnectionType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'2g'</span>:</span><br><span class=\"line\">      media = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">'medium-res.jpg'</span>/&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">      break;</span></span><br><span class=\"line\"><span class=\"xml\">    case '3g':</span></span><br><span class=\"line\">      media = &lt;img src='high-res.jpg'/&gt;;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case '4g':</span><br><span class=\"line\">      media = &lt;video muted controls&gt;...&lt;/video&gt;;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      media = &lt;video muted controls&gt;...&lt;/video&gt;;</span><br><span class=\"line\">      break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &lt;div&gt;&#123;media&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>####memory<br>navigator.deviceMemory</p>\n<p>####cpu<br>navigator.hardwareConcurrency</p>\n<p>####Adaptive Capability Toggling</p>\n<p>####Adaptive Delivery with Client Hints<br>Enable</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Accept-CH\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Device-Memory, Viewport-Width Save-Data\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Added<br>Accept-CH : Device-Memory, Save-Data, Viewport-Width</p>\n<p>slick experience &lt;-&gt; choppy experience</p>\n<p>Do not just respond based on screen size, adapt based on actual device hardware.</p>\n<p>1) Define buckets<br>2) Integrate buckets into logging<br>3) Adapt loading based on buckets<br><img src=\"/images/adaptiveLoading/adaptiveLoading_1.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_2.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_3.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_4.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_5.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_6.png\" alt=\"\"><br><img src=\"/images/adaptiveLoading/adaptiveLoading_7.png\" alt=\"\"></p>\n<p>browser 기준으로</p>\n<p>1) Log hardwareConcurrency and deviceMemory<br>2) Group by hardwareConcurrency, DeviceMemory, and OS when looking at perf data<br>3) figure out buckets based on groupings.</p>\n<p>adaptivity should be considered in your core frameworks</p>\n<p>Think about animations</p>\n<p>Low End &lt;- animation 제거<br>High End</p>\n<p>Mobile Websites (Viewport-Width, CPU 등)</p>\n<p>Load fast vs respond fast</p>\n<p>Trade-off</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isLowEndDevice()) &#123;</span><br><span class=\"line\">    scheduler.unstable_forceFrameRate(<span class=\"number\">15</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"configurable-application-context","date":"2019-12-19T05:48:54.000Z","_content":"","source":"_posts/configurable-application-context.md","raw":"---\ntitle: configurable-application-context\ndate: 2019-12-19 14:48:54\ntags:\n---\n","slug":"configurable-application-context","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttip00099zbpehzx2t62","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"annotation","date":"2020-01-20T10:15:38.000Z","_content":"\n### Java Annotation \n\n- 어노테이션이란 본래 주석이란 뜻\n- 해석 되는 시점 정의\n- 주석 대체\n- 기존 자바 웹 어플리케이션들은 구성과 설정값들을 외부의 XML설정 파일에 명시하는 방법으로 프로그래밍 되었다. \n  변경 될 수 있는 코드가 아닌 외부 설정 파일에 분리하기 때문에 재컴파일 없이도 쉽게 변경사항을 적용 할 수 있었지만, 프로그램 작성을 위해 매번 많은 설정을 작성해야 한다는 불편함이 존재했다.\n- 어노테이션을 사용하면 기존 로직과는 별개로 필요한 정보들을 기입 할 수 있고, 런타임에서 Reflection을 통해 해당 정보를 얻어 올 수 있다.\n- 문서화 부분은 Javadoc이 존재하기 때문에 많이 사용되지 않으며, 어노테이션의 본질적 목적은 소스 코드에 메타데이터를 표현하는 것이다.\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CustomAnnotation {\n\tboolean isCheck() default true;\n}\n```\n\n### Meta Annotation\n- @Retention\n    - Java Compiler가 Annotation을 다루는 방법을 기술하며, 어느 시점까지 영향을 미치는 지 결정하는 값\n    - RetentionPolicy.SOURCE : 컴파일 전까지 유효 ( 컴파일 이후 클래스 정보에서 삭제)\n    - RetentionPolicy.CLASS : 컴파일러가 클래스를 참조하기 전까지 유효\n    - RetentionPolicy.RUNTIME : 컴파일 이후에도 JVM에 의해 계속 참조가 가능. (Runtime Code에서 Reflection을 통한 참조가 가능)\n    \n- @Target\n    - Annotation을 선언할 위치를 선택한다.\n    - ElementType.PACKAGE : 패키지 선언\n    - ElementType.TYPE : 타입 선언\n    - ElementType.ANNOTATION_TYPE : 어노테이션 타입 선언\n    - ElementType.CONSTRUCTOR : 생성자 선언\n    - ElementType.FIELD : 멤버 변수 선언\n    - ElementType.LOCAL_VARIABLE : 지역 변수 선언\n    - ElementType.METHOD : 메서드 선언\n    - ElementType.PARAMETER : 전달인자 선언\n    - ElementType.TYPE_PARAMETER : 전달인자 타입 선언\n    - ElementType.TYPE_USE : 타입 선언\n    \n- @Documented\n    - 해당 어노테이션을 Javadoc에 포함시킨다.\n \n- @Inherited\n    - 어노테이션의 상속을 가능하게 한다.\n    - 주의 : 어노테이션 끼리의 상속이 아닌 해당 어노테이션을 가지고 있는 클래스를 상속할 경우 자식 클래스도 해당 어노테이션을 가짐을 뜻한다.\n    \n- @Native\n    - JVM이 설치된 OS의 네이티브 메서드에 의해 참조되는 상수필드에 붙이는 어노테이션이다.\n    - JNI (Java Native Interface)\n    - Object, Atomic, file 등\n    \n- @Repeatable\n    - 같은 어노테이션을 중복정의 가능한 @Repeatable 어노테이션을 제공\n    \n```java\n  // case 1\n  @GreenColor\n  @BlueColor\n  @RedColor\n  public class RGBColor { ... }\n  \n  // case 2\n  @Color(colors={\"green\", \"blue\", \"red\"}\n  public class RGBColor { ... }\n```\n\n- 아래와 같이 하나의 RGB Color가 Color에 속함을 보이고 \n\n```java\n@Color(\"green\")\n@Color(\"blue\")\n@Color(\"red\")\npublic class RGBColor { ... }\n```\n \n- Color 어노테이션과 Colors 어노테이션을 정의해 표현한다.\n\n```java\n @Repeatable(value = Colors.class)\n public @interface Color {}\n \n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface Colors {\n     Color[] value();  \n }\n``` \n\n\n- 참조 : \n    - https://asfirstalways.tistory.com/309\n    - https://jistol.github.io/java/2018/08/31/annotation-repeatable/\n    - https://stackoverflow.com/questions/23973107/how-to-use-inherited-annotation-in-java/23973331","source":"_posts/annotation.md","raw":"---\ntitle: annotation\ndate: 2020-01-20 19:15:38\ntags:\n---\n\n### Java Annotation \n\n- 어노테이션이란 본래 주석이란 뜻\n- 해석 되는 시점 정의\n- 주석 대체\n- 기존 자바 웹 어플리케이션들은 구성과 설정값들을 외부의 XML설정 파일에 명시하는 방법으로 프로그래밍 되었다. \n  변경 될 수 있는 코드가 아닌 외부 설정 파일에 분리하기 때문에 재컴파일 없이도 쉽게 변경사항을 적용 할 수 있었지만, 프로그램 작성을 위해 매번 많은 설정을 작성해야 한다는 불편함이 존재했다.\n- 어노테이션을 사용하면 기존 로직과는 별개로 필요한 정보들을 기입 할 수 있고, 런타임에서 Reflection을 통해 해당 정보를 얻어 올 수 있다.\n- 문서화 부분은 Javadoc이 존재하기 때문에 많이 사용되지 않으며, 어노테이션의 본질적 목적은 소스 코드에 메타데이터를 표현하는 것이다.\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CustomAnnotation {\n\tboolean isCheck() default true;\n}\n```\n\n### Meta Annotation\n- @Retention\n    - Java Compiler가 Annotation을 다루는 방법을 기술하며, 어느 시점까지 영향을 미치는 지 결정하는 값\n    - RetentionPolicy.SOURCE : 컴파일 전까지 유효 ( 컴파일 이후 클래스 정보에서 삭제)\n    - RetentionPolicy.CLASS : 컴파일러가 클래스를 참조하기 전까지 유효\n    - RetentionPolicy.RUNTIME : 컴파일 이후에도 JVM에 의해 계속 참조가 가능. (Runtime Code에서 Reflection을 통한 참조가 가능)\n    \n- @Target\n    - Annotation을 선언할 위치를 선택한다.\n    - ElementType.PACKAGE : 패키지 선언\n    - ElementType.TYPE : 타입 선언\n    - ElementType.ANNOTATION_TYPE : 어노테이션 타입 선언\n    - ElementType.CONSTRUCTOR : 생성자 선언\n    - ElementType.FIELD : 멤버 변수 선언\n    - ElementType.LOCAL_VARIABLE : 지역 변수 선언\n    - ElementType.METHOD : 메서드 선언\n    - ElementType.PARAMETER : 전달인자 선언\n    - ElementType.TYPE_PARAMETER : 전달인자 타입 선언\n    - ElementType.TYPE_USE : 타입 선언\n    \n- @Documented\n    - 해당 어노테이션을 Javadoc에 포함시킨다.\n \n- @Inherited\n    - 어노테이션의 상속을 가능하게 한다.\n    - 주의 : 어노테이션 끼리의 상속이 아닌 해당 어노테이션을 가지고 있는 클래스를 상속할 경우 자식 클래스도 해당 어노테이션을 가짐을 뜻한다.\n    \n- @Native\n    - JVM이 설치된 OS의 네이티브 메서드에 의해 참조되는 상수필드에 붙이는 어노테이션이다.\n    - JNI (Java Native Interface)\n    - Object, Atomic, file 등\n    \n- @Repeatable\n    - 같은 어노테이션을 중복정의 가능한 @Repeatable 어노테이션을 제공\n    \n```java\n  // case 1\n  @GreenColor\n  @BlueColor\n  @RedColor\n  public class RGBColor { ... }\n  \n  // case 2\n  @Color(colors={\"green\", \"blue\", \"red\"}\n  public class RGBColor { ... }\n```\n\n- 아래와 같이 하나의 RGB Color가 Color에 속함을 보이고 \n\n```java\n@Color(\"green\")\n@Color(\"blue\")\n@Color(\"red\")\npublic class RGBColor { ... }\n```\n \n- Color 어노테이션과 Colors 어노테이션을 정의해 표현한다.\n\n```java\n @Repeatable(value = Colors.class)\n public @interface Color {}\n \n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n public @interface Colors {\n     Color[] value();  \n }\n``` \n\n\n- 참조 : \n    - https://asfirstalways.tistory.com/309\n    - https://jistol.github.io/java/2018/08/31/annotation-repeatable/\n    - https://stackoverflow.com/questions/23973107/how-to-use-inherited-annotation-in-java/23973331","slug":"annotation","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttir000a9zbph8ft3j5r","content":"<h3 id=\"Java-Annotation\"><a href=\"#Java-Annotation\" class=\"headerlink\" title=\"Java Annotation\"></a>Java Annotation</h3><ul>\n<li>어노테이션이란 본래 주석이란 뜻</li>\n<li>해석 되는 시점 정의</li>\n<li>주석 대체</li>\n<li>기존 자바 웹 어플리케이션들은 구성과 설정값들을 외부의 XML설정 파일에 명시하는 방법으로 프로그래밍 되었다.<br>변경 될 수 있는 코드가 아닌 외부 설정 파일에 분리하기 때문에 재컴파일 없이도 쉽게 변경사항을 적용 할 수 있었지만, 프로그램 작성을 위해 매번 많은 설정을 작성해야 한다는 불편함이 존재했다.</li>\n<li>어노테이션을 사용하면 기존 로직과는 별개로 필요한 정보들을 기입 할 수 있고, 런타임에서 Reflection을 통해 해당 정보를 얻어 올 수 있다.</li>\n<li>문서화 부분은 Javadoc이 존재하기 때문에 많이 사용되지 않으며, 어노테이션의 본질적 목적은 소스 코드에 메타데이터를 표현하는 것이다.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CustomAnnotation &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isCheck</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Meta-Annotation\"><a href=\"#Meta-Annotation\" class=\"headerlink\" title=\"Meta Annotation\"></a>Meta Annotation</h3><ul>\n<li><p>@Retention</p>\n<ul>\n<li>Java Compiler가 Annotation을 다루는 방법을 기술하며, 어느 시점까지 영향을 미치는 지 결정하는 값</li>\n<li>RetentionPolicy.SOURCE : 컴파일 전까지 유효 ( 컴파일 이후 클래스 정보에서 삭제)</li>\n<li>RetentionPolicy.CLASS : 컴파일러가 클래스를 참조하기 전까지 유효</li>\n<li>RetentionPolicy.RUNTIME : 컴파일 이후에도 JVM에 의해 계속 참조가 가능. (Runtime Code에서 Reflection을 통한 참조가 가능)</li>\n</ul>\n</li>\n<li><p>@Target</p>\n<ul>\n<li>Annotation을 선언할 위치를 선택한다.</li>\n<li>ElementType.PACKAGE : 패키지 선언</li>\n<li>ElementType.TYPE : 타입 선언</li>\n<li>ElementType.ANNOTATION_TYPE : 어노테이션 타입 선언</li>\n<li>ElementType.CONSTRUCTOR : 생성자 선언</li>\n<li>ElementType.FIELD : 멤버 변수 선언</li>\n<li>ElementType.LOCAL_VARIABLE : 지역 변수 선언</li>\n<li>ElementType.METHOD : 메서드 선언</li>\n<li>ElementType.PARAMETER : 전달인자 선언</li>\n<li>ElementType.TYPE_PARAMETER : 전달인자 타입 선언</li>\n<li>ElementType.TYPE_USE : 타입 선언</li>\n</ul>\n</li>\n<li><p>@Documented</p>\n<ul>\n<li>해당 어노테이션을 Javadoc에 포함시킨다.</li>\n</ul>\n</li>\n<li><p>@Inherited</p>\n<ul>\n<li>어노테이션의 상속을 가능하게 한다.</li>\n<li>주의 : 어노테이션 끼리의 상속이 아닌 해당 어노테이션을 가지고 있는 클래스를 상속할 경우 자식 클래스도 해당 어노테이션을 가짐을 뜻한다.</li>\n</ul>\n</li>\n<li><p>@Native</p>\n<ul>\n<li>JVM이 설치된 OS의 네이티브 메서드에 의해 참조되는 상수필드에 붙이는 어노테이션이다.</li>\n<li>JNI (Java Native Interface)</li>\n<li>Object, Atomic, file 등</li>\n</ul>\n</li>\n<li><p>@Repeatable</p>\n<ul>\n<li>같은 어노테이션을 중복정의 가능한 @Repeatable 어노테이션을 제공</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// case 1</span></span><br><span class=\"line\"><span class=\"meta\">@GreenColor</span></span><br><span class=\"line\"><span class=\"meta\">@BlueColor</span></span><br><span class=\"line\"><span class=\"meta\">@RedColor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGBColor</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// case 2</span></span><br><span class=\"line\"><span class=\"meta\">@Color</span>(colors=&#123;<span class=\"string\">\"green\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGBColor</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>아래와 같이 하나의 RGB Color가 Color에 속함을 보이고 </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Color</span>(<span class=\"string\">\"green\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Color</span>(<span class=\"string\">\"blue\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Color</span>(<span class=\"string\">\"red\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGBColor</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Color 어노테이션과 Colors 어노테이션을 정의해 표현한다.</li>\n</ul>\n<pre><code class=\"java\"><span class=\"meta\">@Repeatable</span>(value = Colors.class)\n<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Color {}\n\n<span class=\"meta\">@Target</span>(ElementType.TYPE)\n<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"meta\">@Documented</span>\n<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Colors {\n    Color[] value();  \n}</code></pre>\n<ul>\n<li>참조 : <ul>\n<li><a href=\"https://asfirstalways.tistory.com/309\">https://asfirstalways.tistory.com/309</a></li>\n<li><a href=\"https://jistol.github.io/java/2018/08/31/annotation-repeatable/\">https://jistol.github.io/java/2018/08/31/annotation-repeatable/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/23973107/how-to-use-inherited-annotation-in-java/23973331\">https://stackoverflow.com/questions/23973107/how-to-use-inherited-annotation-in-java/23973331</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Java-Annotation\"><a href=\"#Java-Annotation\" class=\"headerlink\" title=\"Java Annotation\"></a>Java Annotation</h3><ul>\n<li>어노테이션이란 본래 주석이란 뜻</li>\n<li>해석 되는 시점 정의</li>\n<li>주석 대체</li>\n<li>기존 자바 웹 어플리케이션들은 구성과 설정값들을 외부의 XML설정 파일에 명시하는 방법으로 프로그래밍 되었다.<br>변경 될 수 있는 코드가 아닌 외부 설정 파일에 분리하기 때문에 재컴파일 없이도 쉽게 변경사항을 적용 할 수 있었지만, 프로그램 작성을 위해 매번 많은 설정을 작성해야 한다는 불편함이 존재했다.</li>\n<li>어노테이션을 사용하면 기존 로직과는 별개로 필요한 정보들을 기입 할 수 있고, 런타임에서 Reflection을 통해 해당 정보를 얻어 올 수 있다.</li>\n<li>문서화 부분은 Javadoc이 존재하기 때문에 많이 사용되지 않으며, 어노테이션의 본질적 목적은 소스 코드에 메타데이터를 표현하는 것이다.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CustomAnnotation &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isCheck</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Meta-Annotation\"><a href=\"#Meta-Annotation\" class=\"headerlink\" title=\"Meta Annotation\"></a>Meta Annotation</h3><ul>\n<li><p>@Retention</p>\n<ul>\n<li>Java Compiler가 Annotation을 다루는 방법을 기술하며, 어느 시점까지 영향을 미치는 지 결정하는 값</li>\n<li>RetentionPolicy.SOURCE : 컴파일 전까지 유효 ( 컴파일 이후 클래스 정보에서 삭제)</li>\n<li>RetentionPolicy.CLASS : 컴파일러가 클래스를 참조하기 전까지 유효</li>\n<li>RetentionPolicy.RUNTIME : 컴파일 이후에도 JVM에 의해 계속 참조가 가능. (Runtime Code에서 Reflection을 통한 참조가 가능)</li>\n</ul>\n</li>\n<li><p>@Target</p>\n<ul>\n<li>Annotation을 선언할 위치를 선택한다.</li>\n<li>ElementType.PACKAGE : 패키지 선언</li>\n<li>ElementType.TYPE : 타입 선언</li>\n<li>ElementType.ANNOTATION_TYPE : 어노테이션 타입 선언</li>\n<li>ElementType.CONSTRUCTOR : 생성자 선언</li>\n<li>ElementType.FIELD : 멤버 변수 선언</li>\n<li>ElementType.LOCAL_VARIABLE : 지역 변수 선언</li>\n<li>ElementType.METHOD : 메서드 선언</li>\n<li>ElementType.PARAMETER : 전달인자 선언</li>\n<li>ElementType.TYPE_PARAMETER : 전달인자 타입 선언</li>\n<li>ElementType.TYPE_USE : 타입 선언</li>\n</ul>\n</li>\n<li><p>@Documented</p>\n<ul>\n<li>해당 어노테이션을 Javadoc에 포함시킨다.</li>\n</ul>\n</li>\n<li><p>@Inherited</p>\n<ul>\n<li>어노테이션의 상속을 가능하게 한다.</li>\n<li>주의 : 어노테이션 끼리의 상속이 아닌 해당 어노테이션을 가지고 있는 클래스를 상속할 경우 자식 클래스도 해당 어노테이션을 가짐을 뜻한다.</li>\n</ul>\n</li>\n<li><p>@Native</p>\n<ul>\n<li>JVM이 설치된 OS의 네이티브 메서드에 의해 참조되는 상수필드에 붙이는 어노테이션이다.</li>\n<li>JNI (Java Native Interface)</li>\n<li>Object, Atomic, file 등</li>\n</ul>\n</li>\n<li><p>@Repeatable</p>\n<ul>\n<li>같은 어노테이션을 중복정의 가능한 @Repeatable 어노테이션을 제공</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// case 1</span></span><br><span class=\"line\"><span class=\"meta\">@GreenColor</span></span><br><span class=\"line\"><span class=\"meta\">@BlueColor</span></span><br><span class=\"line\"><span class=\"meta\">@RedColor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGBColor</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// case 2</span></span><br><span class=\"line\"><span class=\"meta\">@Color</span>(colors=&#123;<span class=\"string\">\"green\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGBColor</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>아래와 같이 하나의 RGB Color가 Color에 속함을 보이고 </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Color</span>(<span class=\"string\">\"green\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Color</span>(<span class=\"string\">\"blue\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Color</span>(<span class=\"string\">\"red\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGBColor</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Color 어노테이션과 Colors 어노테이션을 정의해 표현한다.</li>\n</ul>\n<pre><code class=\"java\"><span class=\"meta\">@Repeatable</span>(value = Colors.class)\n<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Color {}\n\n<span class=\"meta\">@Target</span>(ElementType.TYPE)\n<span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)\n<span class=\"meta\">@Documented</span>\n<span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Colors {\n    Color[] value();  \n}</code></pre>\n<ul>\n<li>참조 : <ul>\n<li><a href=\"https://asfirstalways.tistory.com/309\">https://asfirstalways.tistory.com/309</a></li>\n<li><a href=\"https://jistol.github.io/java/2018/08/31/annotation-repeatable/\">https://jistol.github.io/java/2018/08/31/annotation-repeatable/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/23973107/how-to-use-inherited-annotation-in-java/23973331\">https://stackoverflow.com/questions/23973107/how-to-use-inherited-annotation-in-java/23973331</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"WebAssembly-summit-2020","date":"2020-02-23T07:42:19.000Z","_content":"## Building a new kind of ecosystem\nhttps://webassembly-summit.org/speakers/1/\n- 보안을 강화하기 위한 Web Assembly\n1. Sandboxing\n\n2. Memory model\n- Memory isolation\n\n3. Interface Types\n- exchange high-level values between memories\n- we can isolate the memory between modules without making it too hard to share data\n\n4. WebAssembly System Interface\n- we actually have the concept of permissions baked into them\n- we can give different modules, different permissions to different resource.\n\n- WebAssembly nano process\n- protect from malicious code\n\n- vulnerable code\n\n## Shipping Tiny Web Assembly\n\nhttps://webassembly-summit.org/speakers/2/\n- Sometimes code size is negligible(무시할만한) compared to other factors like asset size\n- Sometimes the magic ability to run an app on the web at all is worth a large code size (ship a framework, VM, etc)\n\n### WebAssembly : An opportunity for Small Code!\n- binary format\n- dead code elimination is possible\n\n### Advice For All ToolChains\n#### 1 slide of obvious stuff\n- Enable compression on the server!\n- Minify your Javascript too!\n- Run Binaryen's wasm-opt\n\n- What It Does (wasm-opt)\n    - Dead code elimination\n    - constant propagation\n    - Inlining\n    - Local optimizations (CoalesceLocals, SimplifyLocals, etc)\n    - memory segment optimization (MemoryPacking)\n    - Structured control flow (ReReloop, RemoveUnusedBrs)\n    - etc\n    \n### Advice for specific Languages & Toolchains\n#### General C/C++\n- If you don't use c++ exceptions, build with -fno-exceptions\n- avoid RTTI if you don't need it, build with -fno-rtti\n- Careful with templates\n- virtual calls may inhibit DCE\n- prefer simple C over C++ standard library\n\n#### Use WEB APIs directly\n- Even better than printf, call a Web API, e.g. using EM_JS:\n \n## JavaScriptCore's new WebAssembly interpreter\nhttps://webassembly-summit.org/speakers/4/\n\n- WebAssembly\n    - BBQ :  View Bytecode Quickly (less optimize)\n    - OMG : Optimize Machine code Generator (full optimize)\n    \nhttps://webkit.org/blog/9329/\n\n## WebAssembly Music\nhttps://webassembly-summit.org/speakers/5/\n\n### Introduction\n- WebAssembly deliver performance for rendering realtime audio\n- Low latency possible with AudioWorklet\n- Let's create a synthesizer and sequencer in WebAssembly\n\n### Background\n\n### Warning\n- Experimenting with synthesizers can produce sudden unexpected very loud noise, witch may damage your hearing\n- Keep the volume low, especially if using headphones\n- Make sure you now where the mute button is :-)\n \n### The Basics\n- The simplest instrument\n- Add to the mix\n\n### App map\n\n### sequencer (same as in 4klang)\n- A simple pattern sequencer\n- Short fixed length patterns\n\n```javascript\n[[0, 0, 0, 0, 0, 0, 0, 0],\n[64, 0, 65, 0, 0, 67, 64, 0],\n[22, 23, 34, 34, 34, 0, 44, 45],\n[22, 33, 0, 0, 34, 0, 44, 55]]\n```\n\n- Track for each instrument with a list of patterns to play\n```javascript\n[[0, 1, 0, 2],\n[1, 1, 3, 3],\n[0, 0, 1, 2]]\n```\n\n- This is all it takes ato orchestrate the instruments\n\n### Generate sequencer data from code\n\n### Record MIDI and generate code\n- While playing, midi input data is stored to patterns\n- If we want to use the recording, we can paste it as code\n- Pattern data is \"reverse engineered\" to javascript code, with durations on the notes instead of repeated hold commands\n\n### AssemblyScript (why did I choose it?)\n- High level readability\n- Low level control\n- Pure WebAssembly output (no additional js lib)\n- Builds optimized for speed and size (Binaryen)\n- Create WEbAssembly binaries in the browser\n- Great for live coding: rapid development, instant results, directly in the browser!\n \n### Synthesizing instruments in AssemblyScript\n - No sample data, just in code\n \n### Data driven or code driven?\n Envelope -> oscillator -> filter -> out\n \n - You can synthesize an instrument by connecting envelopes, oscillators, filters etc.\n - Typical to create a data structure to be interpreted at runtime.\n - With AssemblyScript/WebAssembly we can instead generate and compile the code in the browser\n - Just like modern web-frameworks resolving configuration at compile-time (such as language)\n - Out binary can contain the logic directly rather than an interpreter of data describing the logic\n - Faster and smaller builds, no interpreter overhead\n - Not just for synthesizers but also for e.g smart contracts\n - Compiling is cheap, make pre-configured binaries rather than configuring at runtime.\n  \n ### AudioWorklet\n - The \"proper\" way of using AudioWorklet would be to have one node per instrument and let WebAudio do the orchestration/mixing\n - But then we couldn't have music produced by a single WebAssembly executable binary\n - Made a polyfill for the purpose of serving this app\n - AudioWorklet model of render audio callback for WASI(Web Assembly System Interface)? (Similar to Jack and Core Audio)\n \n ### Sources on github\n https://github.com/petersalomonsen/javascriptmusic\n \n - project contains the WebAssembly music experiment, and also the predecessing javascript music projects for Midi synths and 4klang.\n \n \n ","source":"_posts/WebAssembly-summit-2020.md","raw":"---\ntitle: WebAssembly-summit-2020\ndate: 2020-02-23 16:42:19\ntags:\n---\n## Building a new kind of ecosystem\nhttps://webassembly-summit.org/speakers/1/\n- 보안을 강화하기 위한 Web Assembly\n1. Sandboxing\n\n2. Memory model\n- Memory isolation\n\n3. Interface Types\n- exchange high-level values between memories\n- we can isolate the memory between modules without making it too hard to share data\n\n4. WebAssembly System Interface\n- we actually have the concept of permissions baked into them\n- we can give different modules, different permissions to different resource.\n\n- WebAssembly nano process\n- protect from malicious code\n\n- vulnerable code\n\n## Shipping Tiny Web Assembly\n\nhttps://webassembly-summit.org/speakers/2/\n- Sometimes code size is negligible(무시할만한) compared to other factors like asset size\n- Sometimes the magic ability to run an app on the web at all is worth a large code size (ship a framework, VM, etc)\n\n### WebAssembly : An opportunity for Small Code!\n- binary format\n- dead code elimination is possible\n\n### Advice For All ToolChains\n#### 1 slide of obvious stuff\n- Enable compression on the server!\n- Minify your Javascript too!\n- Run Binaryen's wasm-opt\n\n- What It Does (wasm-opt)\n    - Dead code elimination\n    - constant propagation\n    - Inlining\n    - Local optimizations (CoalesceLocals, SimplifyLocals, etc)\n    - memory segment optimization (MemoryPacking)\n    - Structured control flow (ReReloop, RemoveUnusedBrs)\n    - etc\n    \n### Advice for specific Languages & Toolchains\n#### General C/C++\n- If you don't use c++ exceptions, build with -fno-exceptions\n- avoid RTTI if you don't need it, build with -fno-rtti\n- Careful with templates\n- virtual calls may inhibit DCE\n- prefer simple C over C++ standard library\n\n#### Use WEB APIs directly\n- Even better than printf, call a Web API, e.g. using EM_JS:\n \n## JavaScriptCore's new WebAssembly interpreter\nhttps://webassembly-summit.org/speakers/4/\n\n- WebAssembly\n    - BBQ :  View Bytecode Quickly (less optimize)\n    - OMG : Optimize Machine code Generator (full optimize)\n    \nhttps://webkit.org/blog/9329/\n\n## WebAssembly Music\nhttps://webassembly-summit.org/speakers/5/\n\n### Introduction\n- WebAssembly deliver performance for rendering realtime audio\n- Low latency possible with AudioWorklet\n- Let's create a synthesizer and sequencer in WebAssembly\n\n### Background\n\n### Warning\n- Experimenting with synthesizers can produce sudden unexpected very loud noise, witch may damage your hearing\n- Keep the volume low, especially if using headphones\n- Make sure you now where the mute button is :-)\n \n### The Basics\n- The simplest instrument\n- Add to the mix\n\n### App map\n\n### sequencer (same as in 4klang)\n- A simple pattern sequencer\n- Short fixed length patterns\n\n```javascript\n[[0, 0, 0, 0, 0, 0, 0, 0],\n[64, 0, 65, 0, 0, 67, 64, 0],\n[22, 23, 34, 34, 34, 0, 44, 45],\n[22, 33, 0, 0, 34, 0, 44, 55]]\n```\n\n- Track for each instrument with a list of patterns to play\n```javascript\n[[0, 1, 0, 2],\n[1, 1, 3, 3],\n[0, 0, 1, 2]]\n```\n\n- This is all it takes ato orchestrate the instruments\n\n### Generate sequencer data from code\n\n### Record MIDI and generate code\n- While playing, midi input data is stored to patterns\n- If we want to use the recording, we can paste it as code\n- Pattern data is \"reverse engineered\" to javascript code, with durations on the notes instead of repeated hold commands\n\n### AssemblyScript (why did I choose it?)\n- High level readability\n- Low level control\n- Pure WebAssembly output (no additional js lib)\n- Builds optimized for speed and size (Binaryen)\n- Create WEbAssembly binaries in the browser\n- Great for live coding: rapid development, instant results, directly in the browser!\n \n### Synthesizing instruments in AssemblyScript\n - No sample data, just in code\n \n### Data driven or code driven?\n Envelope -> oscillator -> filter -> out\n \n - You can synthesize an instrument by connecting envelopes, oscillators, filters etc.\n - Typical to create a data structure to be interpreted at runtime.\n - With AssemblyScript/WebAssembly we can instead generate and compile the code in the browser\n - Just like modern web-frameworks resolving configuration at compile-time (such as language)\n - Out binary can contain the logic directly rather than an interpreter of data describing the logic\n - Faster and smaller builds, no interpreter overhead\n - Not just for synthesizers but also for e.g smart contracts\n - Compiling is cheap, make pre-configured binaries rather than configuring at runtime.\n  \n ### AudioWorklet\n - The \"proper\" way of using AudioWorklet would be to have one node per instrument and let WebAudio do the orchestration/mixing\n - But then we couldn't have music produced by a single WebAssembly executable binary\n - Made a polyfill for the purpose of serving this app\n - AudioWorklet model of render audio callback for WASI(Web Assembly System Interface)? (Similar to Jack and Core Audio)\n \n ### Sources on github\n https://github.com/petersalomonsen/javascriptmusic\n \n - project contains the WebAssembly music experiment, and also the predecessing javascript music projects for Midi synths and 4klang.\n \n \n ","slug":"WebAssembly-summit-2020","published":1,"updated":"2020-02-23T09:18:36.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttit000c9zbp8f1h9hdp","content":"<h2 id=\"Building-a-new-kind-of-ecosystem\"><a href=\"#Building-a-new-kind-of-ecosystem\" class=\"headerlink\" title=\"Building a new kind of ecosystem\"></a>Building a new kind of ecosystem</h2><p><a href=\"https://webassembly-summit.org/speakers/1/\">https://webassembly-summit.org/speakers/1/</a></p>\n<ul>\n<li>보안을 강화하기 위한 Web Assembly</li>\n</ul>\n<ol>\n<li><p>Sandboxing</p>\n</li>\n<li><p>Memory model</p>\n</li>\n</ol>\n<ul>\n<li>Memory isolation</li>\n</ul>\n<ol start=\"3\">\n<li>Interface Types</li>\n</ol>\n<ul>\n<li>exchange high-level values between memories</li>\n<li>we can isolate the memory between modules without making it too hard to share data</li>\n</ul>\n<ol start=\"4\">\n<li>WebAssembly System Interface</li>\n</ol>\n<ul>\n<li><p>we actually have the concept of permissions baked into them</p>\n</li>\n<li><p>we can give different modules, different permissions to different resource.</p>\n</li>\n<li><p>WebAssembly nano process</p>\n</li>\n<li><p>protect from malicious code</p>\n</li>\n<li><p>vulnerable code</p>\n</li>\n</ul>\n<h2 id=\"Shipping-Tiny-Web-Assembly\"><a href=\"#Shipping-Tiny-Web-Assembly\" class=\"headerlink\" title=\"Shipping Tiny Web Assembly\"></a>Shipping Tiny Web Assembly</h2><p><a href=\"https://webassembly-summit.org/speakers/2/\">https://webassembly-summit.org/speakers/2/</a></p>\n<ul>\n<li>Sometimes code size is negligible(무시할만한) compared to other factors like asset size</li>\n<li>Sometimes the magic ability to run an app on the web at all is worth a large code size (ship a framework, VM, etc)</li>\n</ul>\n<h3 id=\"WebAssembly-An-opportunity-for-Small-Code\"><a href=\"#WebAssembly-An-opportunity-for-Small-Code\" class=\"headerlink\" title=\"WebAssembly : An opportunity for Small Code!\"></a>WebAssembly : An opportunity for Small Code!</h3><ul>\n<li>binary format</li>\n<li>dead code elimination is possible</li>\n</ul>\n<h3 id=\"Advice-For-All-ToolChains\"><a href=\"#Advice-For-All-ToolChains\" class=\"headerlink\" title=\"Advice For All ToolChains\"></a>Advice For All ToolChains</h3><h4 id=\"1-slide-of-obvious-stuff\"><a href=\"#1-slide-of-obvious-stuff\" class=\"headerlink\" title=\"1 slide of obvious stuff\"></a>1 slide of obvious stuff</h4><ul>\n<li><p>Enable compression on the server!</p>\n</li>\n<li><p>Minify your Javascript too!</p>\n</li>\n<li><p>Run Binaryen’s wasm-opt</p>\n</li>\n<li><p>What It Does (wasm-opt)</p>\n<ul>\n<li>Dead code elimination</li>\n<li>constant propagation</li>\n<li>Inlining</li>\n<li>Local optimizations (CoalesceLocals, SimplifyLocals, etc)</li>\n<li>memory segment optimization (MemoryPacking)</li>\n<li>Structured control flow (ReReloop, RemoveUnusedBrs)</li>\n<li>etc</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Advice-for-specific-Languages-amp-Toolchains\"><a href=\"#Advice-for-specific-Languages-amp-Toolchains\" class=\"headerlink\" title=\"Advice for specific Languages &amp; Toolchains\"></a>Advice for specific Languages &amp; Toolchains</h3><h4 id=\"General-C-C\"><a href=\"#General-C-C\" class=\"headerlink\" title=\"General C/C++\"></a>General C/C++</h4><ul>\n<li>If you don’t use c++ exceptions, build with -fno-exceptions</li>\n<li>avoid RTTI if you don’t need it, build with -fno-rtti</li>\n<li>Careful with templates</li>\n<li>virtual calls may inhibit DCE</li>\n<li>prefer simple C over C++ standard library</li>\n</ul>\n<h4 id=\"Use-WEB-APIs-directly\"><a href=\"#Use-WEB-APIs-directly\" class=\"headerlink\" title=\"Use WEB APIs directly\"></a>Use WEB APIs directly</h4><ul>\n<li>Even better than printf, call a Web API, e.g. using EM_JS:</li>\n</ul>\n<h2 id=\"JavaScriptCore’s-new-WebAssembly-interpreter\"><a href=\"#JavaScriptCore’s-new-WebAssembly-interpreter\" class=\"headerlink\" title=\"JavaScriptCore’s new WebAssembly interpreter\"></a>JavaScriptCore’s new WebAssembly interpreter</h2><p><a href=\"https://webassembly-summit.org/speakers/4/\">https://webassembly-summit.org/speakers/4/</a></p>\n<ul>\n<li>WebAssembly<ul>\n<li>BBQ :  View Bytecode Quickly (less optimize)</li>\n<li>OMG : Optimize Machine code Generator (full optimize)</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://webkit.org/blog/9329/\">https://webkit.org/blog/9329/</a></p>\n<h2 id=\"WebAssembly-Music\"><a href=\"#WebAssembly-Music\" class=\"headerlink\" title=\"WebAssembly Music\"></a>WebAssembly Music</h2><p><a href=\"https://webassembly-summit.org/speakers/5/\">https://webassembly-summit.org/speakers/5/</a></p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><ul>\n<li>WebAssembly deliver performance for rendering realtime audio</li>\n<li>Low latency possible with AudioWorklet</li>\n<li>Let’s create a synthesizer and sequencer in WebAssembly</li>\n</ul>\n<h3 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h3><h3 id=\"Warning\"><a href=\"#Warning\" class=\"headerlink\" title=\"Warning\"></a>Warning</h3><ul>\n<li>Experimenting with synthesizers can produce sudden unexpected very loud noise, witch may damage your hearing</li>\n<li>Keep the volume low, especially if using headphones</li>\n<li>Make sure you now where the mute button is :-)</li>\n</ul>\n<h3 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h3><ul>\n<li>The simplest instrument</li>\n<li>Add to the mix</li>\n</ul>\n<h3 id=\"App-map\"><a href=\"#App-map\" class=\"headerlink\" title=\"App map\"></a>App map</h3><h3 id=\"sequencer-same-as-in-4klang\"><a href=\"#sequencer-same-as-in-4klang\" class=\"headerlink\" title=\"sequencer (same as in 4klang)\"></a>sequencer (same as in 4klang)</h3><ul>\n<li>A simple pattern sequencer</li>\n<li>Short fixed length patterns</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">[<span class=\"number\">64</span>, <span class=\"number\">0</span>, <span class=\"number\">65</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">67</span>, <span class=\"number\">64</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">[<span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">34</span>, <span class=\"number\">34</span>, <span class=\"number\">0</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>],</span><br><span class=\"line\">[<span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">34</span>, <span class=\"number\">0</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>]]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Track for each instrument with a list of patterns to play</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>This is all it takes ato orchestrate the instruments</p>\n</li>\n</ul>\n<h3 id=\"Generate-sequencer-data-from-code\"><a href=\"#Generate-sequencer-data-from-code\" class=\"headerlink\" title=\"Generate sequencer data from code\"></a>Generate sequencer data from code</h3><h3 id=\"Record-MIDI-and-generate-code\"><a href=\"#Record-MIDI-and-generate-code\" class=\"headerlink\" title=\"Record MIDI and generate code\"></a>Record MIDI and generate code</h3><ul>\n<li>While playing, midi input data is stored to patterns</li>\n<li>If we want to use the recording, we can paste it as code</li>\n<li>Pattern data is “reverse engineered” to javascript code, with durations on the notes instead of repeated hold commands</li>\n</ul>\n<h3 id=\"AssemblyScript-why-did-I-choose-it\"><a href=\"#AssemblyScript-why-did-I-choose-it\" class=\"headerlink\" title=\"AssemblyScript (why did I choose it?)\"></a>AssemblyScript (why did I choose it?)</h3><ul>\n<li>High level readability</li>\n<li>Low level control</li>\n<li>Pure WebAssembly output (no additional js lib)</li>\n<li>Builds optimized for speed and size (Binaryen)</li>\n<li>Create WEbAssembly binaries in the browser</li>\n<li>Great for live coding: rapid development, instant results, directly in the browser!</li>\n</ul>\n<h3 id=\"Synthesizing-instruments-in-AssemblyScript\"><a href=\"#Synthesizing-instruments-in-AssemblyScript\" class=\"headerlink\" title=\"Synthesizing instruments in AssemblyScript\"></a>Synthesizing instruments in AssemblyScript</h3><ul>\n<li>No sample data, just in code</li>\n</ul>\n<h3 id=\"Data-driven-or-code-driven\"><a href=\"#Data-driven-or-code-driven\" class=\"headerlink\" title=\"Data driven or code driven?\"></a>Data driven or code driven?</h3><p> Envelope -&gt; oscillator -&gt; filter -&gt; out</p>\n<ul>\n<li><p>You can synthesize an instrument by connecting envelopes, oscillators, filters etc.</p>\n</li>\n<li><p>Typical to create a data structure to be interpreted at runtime.</p>\n</li>\n<li><p>With AssemblyScript/WebAssembly we can instead generate and compile the code in the browser</p>\n</li>\n<li><p>Just like modern web-frameworks resolving configuration at compile-time (such as language)</p>\n</li>\n<li><p>Out binary can contain the logic directly rather than an interpreter of data describing the logic</p>\n</li>\n<li><p>Faster and smaller builds, no interpreter overhead</p>\n</li>\n<li><p>Not just for synthesizers but also for e.g smart contracts</p>\n</li>\n<li><p>Compiling is cheap, make pre-configured binaries rather than configuring at runtime.</p>\n<h3 id=\"AudioWorklet\"><a href=\"#AudioWorklet\" class=\"headerlink\" title=\"AudioWorklet\"></a>AudioWorklet</h3></li>\n<li><p>The “proper” way of using AudioWorklet would be to have one node per instrument and let WebAudio do the orchestration/mixing</p>\n</li>\n<li><p>But then we couldn’t have music produced by a single WebAssembly executable binary</p>\n</li>\n<li><p>Made a polyfill for the purpose of serving this app</p>\n</li>\n<li><p>AudioWorklet model of render audio callback for WASI(Web Assembly System Interface)? (Similar to Jack and Core Audio)</p>\n<h3 id=\"Sources-on-github\"><a href=\"#Sources-on-github\" class=\"headerlink\" title=\"Sources on github\"></a>Sources on github</h3><p><a href=\"https://github.com/petersalomonsen/javascriptmusic\">https://github.com/petersalomonsen/javascriptmusic</a></p>\n</li>\n<li><p>project contains the WebAssembly music experiment, and also the predecessing javascript music projects for Midi synths and 4klang.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Building-a-new-kind-of-ecosystem\"><a href=\"#Building-a-new-kind-of-ecosystem\" class=\"headerlink\" title=\"Building a new kind of ecosystem\"></a>Building a new kind of ecosystem</h2><p><a href=\"https://webassembly-summit.org/speakers/1/\">https://webassembly-summit.org/speakers/1/</a></p>\n<ul>\n<li>보안을 강화하기 위한 Web Assembly</li>\n</ul>\n<ol>\n<li><p>Sandboxing</p>\n</li>\n<li><p>Memory model</p>\n</li>\n</ol>\n<ul>\n<li>Memory isolation</li>\n</ul>\n<ol start=\"3\">\n<li>Interface Types</li>\n</ol>\n<ul>\n<li>exchange high-level values between memories</li>\n<li>we can isolate the memory between modules without making it too hard to share data</li>\n</ul>\n<ol start=\"4\">\n<li>WebAssembly System Interface</li>\n</ol>\n<ul>\n<li><p>we actually have the concept of permissions baked into them</p>\n</li>\n<li><p>we can give different modules, different permissions to different resource.</p>\n</li>\n<li><p>WebAssembly nano process</p>\n</li>\n<li><p>protect from malicious code</p>\n</li>\n<li><p>vulnerable code</p>\n</li>\n</ul>\n<h2 id=\"Shipping-Tiny-Web-Assembly\"><a href=\"#Shipping-Tiny-Web-Assembly\" class=\"headerlink\" title=\"Shipping Tiny Web Assembly\"></a>Shipping Tiny Web Assembly</h2><p><a href=\"https://webassembly-summit.org/speakers/2/\">https://webassembly-summit.org/speakers/2/</a></p>\n<ul>\n<li>Sometimes code size is negligible(무시할만한) compared to other factors like asset size</li>\n<li>Sometimes the magic ability to run an app on the web at all is worth a large code size (ship a framework, VM, etc)</li>\n</ul>\n<h3 id=\"WebAssembly-An-opportunity-for-Small-Code\"><a href=\"#WebAssembly-An-opportunity-for-Small-Code\" class=\"headerlink\" title=\"WebAssembly : An opportunity for Small Code!\"></a>WebAssembly : An opportunity for Small Code!</h3><ul>\n<li>binary format</li>\n<li>dead code elimination is possible</li>\n</ul>\n<h3 id=\"Advice-For-All-ToolChains\"><a href=\"#Advice-For-All-ToolChains\" class=\"headerlink\" title=\"Advice For All ToolChains\"></a>Advice For All ToolChains</h3><h4 id=\"1-slide-of-obvious-stuff\"><a href=\"#1-slide-of-obvious-stuff\" class=\"headerlink\" title=\"1 slide of obvious stuff\"></a>1 slide of obvious stuff</h4><ul>\n<li><p>Enable compression on the server!</p>\n</li>\n<li><p>Minify your Javascript too!</p>\n</li>\n<li><p>Run Binaryen’s wasm-opt</p>\n</li>\n<li><p>What It Does (wasm-opt)</p>\n<ul>\n<li>Dead code elimination</li>\n<li>constant propagation</li>\n<li>Inlining</li>\n<li>Local optimizations (CoalesceLocals, SimplifyLocals, etc)</li>\n<li>memory segment optimization (MemoryPacking)</li>\n<li>Structured control flow (ReReloop, RemoveUnusedBrs)</li>\n<li>etc</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Advice-for-specific-Languages-amp-Toolchains\"><a href=\"#Advice-for-specific-Languages-amp-Toolchains\" class=\"headerlink\" title=\"Advice for specific Languages &amp; Toolchains\"></a>Advice for specific Languages &amp; Toolchains</h3><h4 id=\"General-C-C\"><a href=\"#General-C-C\" class=\"headerlink\" title=\"General C/C++\"></a>General C/C++</h4><ul>\n<li>If you don’t use c++ exceptions, build with -fno-exceptions</li>\n<li>avoid RTTI if you don’t need it, build with -fno-rtti</li>\n<li>Careful with templates</li>\n<li>virtual calls may inhibit DCE</li>\n<li>prefer simple C over C++ standard library</li>\n</ul>\n<h4 id=\"Use-WEB-APIs-directly\"><a href=\"#Use-WEB-APIs-directly\" class=\"headerlink\" title=\"Use WEB APIs directly\"></a>Use WEB APIs directly</h4><ul>\n<li>Even better than printf, call a Web API, e.g. using EM_JS:</li>\n</ul>\n<h2 id=\"JavaScriptCore’s-new-WebAssembly-interpreter\"><a href=\"#JavaScriptCore’s-new-WebAssembly-interpreter\" class=\"headerlink\" title=\"JavaScriptCore’s new WebAssembly interpreter\"></a>JavaScriptCore’s new WebAssembly interpreter</h2><p><a href=\"https://webassembly-summit.org/speakers/4/\">https://webassembly-summit.org/speakers/4/</a></p>\n<ul>\n<li>WebAssembly<ul>\n<li>BBQ :  View Bytecode Quickly (less optimize)</li>\n<li>OMG : Optimize Machine code Generator (full optimize)</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://webkit.org/blog/9329/\">https://webkit.org/blog/9329/</a></p>\n<h2 id=\"WebAssembly-Music\"><a href=\"#WebAssembly-Music\" class=\"headerlink\" title=\"WebAssembly Music\"></a>WebAssembly Music</h2><p><a href=\"https://webassembly-summit.org/speakers/5/\">https://webassembly-summit.org/speakers/5/</a></p>\n<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><ul>\n<li>WebAssembly deliver performance for rendering realtime audio</li>\n<li>Low latency possible with AudioWorklet</li>\n<li>Let’s create a synthesizer and sequencer in WebAssembly</li>\n</ul>\n<h3 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h3><h3 id=\"Warning\"><a href=\"#Warning\" class=\"headerlink\" title=\"Warning\"></a>Warning</h3><ul>\n<li>Experimenting with synthesizers can produce sudden unexpected very loud noise, witch may damage your hearing</li>\n<li>Keep the volume low, especially if using headphones</li>\n<li>Make sure you now where the mute button is :-)</li>\n</ul>\n<h3 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h3><ul>\n<li>The simplest instrument</li>\n<li>Add to the mix</li>\n</ul>\n<h3 id=\"App-map\"><a href=\"#App-map\" class=\"headerlink\" title=\"App map\"></a>App map</h3><h3 id=\"sequencer-same-as-in-4klang\"><a href=\"#sequencer-same-as-in-4klang\" class=\"headerlink\" title=\"sequencer (same as in 4klang)\"></a>sequencer (same as in 4klang)</h3><ul>\n<li>A simple pattern sequencer</li>\n<li>Short fixed length patterns</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">[<span class=\"number\">64</span>, <span class=\"number\">0</span>, <span class=\"number\">65</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">67</span>, <span class=\"number\">64</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">[<span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">34</span>, <span class=\"number\">34</span>, <span class=\"number\">0</span>, <span class=\"number\">44</span>, <span class=\"number\">45</span>],</span><br><span class=\"line\">[<span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">34</span>, <span class=\"number\">0</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>]]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Track for each instrument with a list of patterns to play</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>This is all it takes ato orchestrate the instruments</p>\n</li>\n</ul>\n<h3 id=\"Generate-sequencer-data-from-code\"><a href=\"#Generate-sequencer-data-from-code\" class=\"headerlink\" title=\"Generate sequencer data from code\"></a>Generate sequencer data from code</h3><h3 id=\"Record-MIDI-and-generate-code\"><a href=\"#Record-MIDI-and-generate-code\" class=\"headerlink\" title=\"Record MIDI and generate code\"></a>Record MIDI and generate code</h3><ul>\n<li>While playing, midi input data is stored to patterns</li>\n<li>If we want to use the recording, we can paste it as code</li>\n<li>Pattern data is “reverse engineered” to javascript code, with durations on the notes instead of repeated hold commands</li>\n</ul>\n<h3 id=\"AssemblyScript-why-did-I-choose-it\"><a href=\"#AssemblyScript-why-did-I-choose-it\" class=\"headerlink\" title=\"AssemblyScript (why did I choose it?)\"></a>AssemblyScript (why did I choose it?)</h3><ul>\n<li>High level readability</li>\n<li>Low level control</li>\n<li>Pure WebAssembly output (no additional js lib)</li>\n<li>Builds optimized for speed and size (Binaryen)</li>\n<li>Create WEbAssembly binaries in the browser</li>\n<li>Great for live coding: rapid development, instant results, directly in the browser!</li>\n</ul>\n<h3 id=\"Synthesizing-instruments-in-AssemblyScript\"><a href=\"#Synthesizing-instruments-in-AssemblyScript\" class=\"headerlink\" title=\"Synthesizing instruments in AssemblyScript\"></a>Synthesizing instruments in AssemblyScript</h3><ul>\n<li>No sample data, just in code</li>\n</ul>\n<h3 id=\"Data-driven-or-code-driven\"><a href=\"#Data-driven-or-code-driven\" class=\"headerlink\" title=\"Data driven or code driven?\"></a>Data driven or code driven?</h3><p> Envelope -&gt; oscillator -&gt; filter -&gt; out</p>\n<ul>\n<li><p>You can synthesize an instrument by connecting envelopes, oscillators, filters etc.</p>\n</li>\n<li><p>Typical to create a data structure to be interpreted at runtime.</p>\n</li>\n<li><p>With AssemblyScript/WebAssembly we can instead generate and compile the code in the browser</p>\n</li>\n<li><p>Just like modern web-frameworks resolving configuration at compile-time (such as language)</p>\n</li>\n<li><p>Out binary can contain the logic directly rather than an interpreter of data describing the logic</p>\n</li>\n<li><p>Faster and smaller builds, no interpreter overhead</p>\n</li>\n<li><p>Not just for synthesizers but also for e.g smart contracts</p>\n</li>\n<li><p>Compiling is cheap, make pre-configured binaries rather than configuring at runtime.</p>\n<h3 id=\"AudioWorklet\"><a href=\"#AudioWorklet\" class=\"headerlink\" title=\"AudioWorklet\"></a>AudioWorklet</h3></li>\n<li><p>The “proper” way of using AudioWorklet would be to have one node per instrument and let WebAudio do the orchestration/mixing</p>\n</li>\n<li><p>But then we couldn’t have music produced by a single WebAssembly executable binary</p>\n</li>\n<li><p>Made a polyfill for the purpose of serving this app</p>\n</li>\n<li><p>AudioWorklet model of render audio callback for WASI(Web Assembly System Interface)? (Similar to Jack and Core Audio)</p>\n<h3 id=\"Sources-on-github\"><a href=\"#Sources-on-github\" class=\"headerlink\" title=\"Sources on github\"></a>Sources on github</h3><p><a href=\"https://github.com/petersalomonsen/javascriptmusic\">https://github.com/petersalomonsen/javascriptmusic</a></p>\n</li>\n<li><p>project contains the WebAssembly music experiment, and also the predecessing javascript music projects for Midi synths and 4klang.</p>\n</li>\n</ul>\n"},{"title":"application-argument","date":"2019-12-19T06:00:54.000Z","_content":"Spring boot 실행할 때 args 를 전달받기 위한 Interface.\n\nSpring boot에서 org.springframework.boot.ApplicationArguments 를 제공하고 있어서 Bean으로 받아서 사용하면 간단하게 쓸 수 있습니다.\n\nSpring boot에서 아무런 설정을 하지 않는다면 DefaultApplicationArguments를 사용해 처리한다.\n\n1. getSourceArgs\n\n - 입력한 args 그대로 배열로 받아 옵니다.\n\n\n\n2. getOptionNames\n\n - args 앞에 \"--\" 를 붙이면 옵션으로 인식 합니다. 옵션 args 사용 형식 --NAME=VALUE \n\n - \"--fruit=apple\" 이렇게 args를 사용하면\n\n - getOptionName는 fruit 처럼 option name 들의 배열을 받아 옵니다.\n\n\n\n3. getNonOptionArgs\n\n- \"--\" 가 없는 경우 NonOption으로 인식합니다.\n\n- \"--\" 가 없는 args 들의 값들을 받다 옵니다.\n\n\n![](/images/application-argument/DefaultApplicationArguments.png)\n\n\n```java\n\tprivate final Source source;\n\n\tprivate final String[] args;\n\n\tpublic DefaultApplicationArguments(String[] args) {\n\t\tAssert.notNull(args, \"Args must not be null\");\n\t\tthis.source = new Source(args);\n\t\tthis.args = args;\n\t}\n```\n\n내부에 private final로 선언되어 있어 생성자를 통한 할당이 아니라면 바꿀수가 없다. \n또한 Source라고 하는 내부 Class를 가지고 있고, 이는 SimpleCommandLinePropertySource를 상속해 구현하였다.\n\n```java\n\tprivate static class Source extends SimpleCommandLinePropertySource {\n\n\t\tSource(String[] args) {\n\t\t\tsuper(args);\n\t\t}\n\n\t\t@Override\n\t\tpublic List<String> getNonOptionArgs() {\n\t\t\treturn super.getNonOptionArgs();\n\t\t}\n\n\t\t@Override\n\t\tpublic List<String> getOptionValues(String name) {\n\t\t\treturn super.getOptionValues(name);\n\t\t}\n\n\t}\n```\n![](/images/application-argument/SimpleCommandLineProperty.png)\n\n```java\npublic class SimpleCommandLinePropertySource extends CommandLinePropertySource<CommandLineArgs> {\n\n\t/**\n\t * Create a new {@code SimpleCommandLinePropertySource} having the default name\n\t * and backed by the given {@code String[]} of command line arguments.\n\t * @see CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME\n\t * @see CommandLinePropertySource#CommandLinePropertySource(Object)\n\t */\n\tpublic SimpleCommandLinePropertySource(String... args) {\n\t\tsuper(new SimpleCommandLineArgsParser().parse(args));\n\t}\n\n\t/**\n\t * Create a new {@code SimpleCommandLinePropertySource} having the given name\n\t * and backed by the given {@code String[]} of command line arguments.\n\t */\n\tpublic SimpleCommandLinePropertySource(String name, String[] args) {\n\t\tsuper(name, new SimpleCommandLineArgsParser().parse(args));\n\t}\n\n\t/**\n\t * Get the property names for the option arguments.\n\t */\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn StringUtils.toStringArray(this.source.getOptionNames());\n\t}\n\n\t@Override\n\tprotected boolean containsOption(String name) {\n\t\treturn this.source.containsOption(name);\n\t}\n\n\t@Override\n\t@Nullable\n\tprotected List<String> getOptionValues(String name) {\n\t\treturn this.source.getOptionValues(name);\n\t}\n\n\t@Override\n\tprotected List<String> getNonOptionArgs() {\n\t\treturn this.source.getNonOptionArgs();\n\t}\n\n}\n```\n\nSimpleCommandLinePropertySource는 CommandLineArgs를 Source를 가지는 CommandLinePropertySource를 상속해 구현하였고,\nCommandLineArgs는 내부에 HashMap으로 Option Argument들을, List로 nonOptionArgs를 가지고 있는 Source로 관리된다. \n\n![](/images/application-argument/CommandLineArgs.png)\n","source":"_posts/application-argument.md","raw":"---\ntitle: application-argument\ndate: 2019-12-19 15:00:54\ntags:\n---\nSpring boot 실행할 때 args 를 전달받기 위한 Interface.\n\nSpring boot에서 org.springframework.boot.ApplicationArguments 를 제공하고 있어서 Bean으로 받아서 사용하면 간단하게 쓸 수 있습니다.\n\nSpring boot에서 아무런 설정을 하지 않는다면 DefaultApplicationArguments를 사용해 처리한다.\n\n1. getSourceArgs\n\n - 입력한 args 그대로 배열로 받아 옵니다.\n\n\n\n2. getOptionNames\n\n - args 앞에 \"--\" 를 붙이면 옵션으로 인식 합니다. 옵션 args 사용 형식 --NAME=VALUE \n\n - \"--fruit=apple\" 이렇게 args를 사용하면\n\n - getOptionName는 fruit 처럼 option name 들의 배열을 받아 옵니다.\n\n\n\n3. getNonOptionArgs\n\n- \"--\" 가 없는 경우 NonOption으로 인식합니다.\n\n- \"--\" 가 없는 args 들의 값들을 받다 옵니다.\n\n\n![](/images/application-argument/DefaultApplicationArguments.png)\n\n\n```java\n\tprivate final Source source;\n\n\tprivate final String[] args;\n\n\tpublic DefaultApplicationArguments(String[] args) {\n\t\tAssert.notNull(args, \"Args must not be null\");\n\t\tthis.source = new Source(args);\n\t\tthis.args = args;\n\t}\n```\n\n내부에 private final로 선언되어 있어 생성자를 통한 할당이 아니라면 바꿀수가 없다. \n또한 Source라고 하는 내부 Class를 가지고 있고, 이는 SimpleCommandLinePropertySource를 상속해 구현하였다.\n\n```java\n\tprivate static class Source extends SimpleCommandLinePropertySource {\n\n\t\tSource(String[] args) {\n\t\t\tsuper(args);\n\t\t}\n\n\t\t@Override\n\t\tpublic List<String> getNonOptionArgs() {\n\t\t\treturn super.getNonOptionArgs();\n\t\t}\n\n\t\t@Override\n\t\tpublic List<String> getOptionValues(String name) {\n\t\t\treturn super.getOptionValues(name);\n\t\t}\n\n\t}\n```\n![](/images/application-argument/SimpleCommandLineProperty.png)\n\n```java\npublic class SimpleCommandLinePropertySource extends CommandLinePropertySource<CommandLineArgs> {\n\n\t/**\n\t * Create a new {@code SimpleCommandLinePropertySource} having the default name\n\t * and backed by the given {@code String[]} of command line arguments.\n\t * @see CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME\n\t * @see CommandLinePropertySource#CommandLinePropertySource(Object)\n\t */\n\tpublic SimpleCommandLinePropertySource(String... args) {\n\t\tsuper(new SimpleCommandLineArgsParser().parse(args));\n\t}\n\n\t/**\n\t * Create a new {@code SimpleCommandLinePropertySource} having the given name\n\t * and backed by the given {@code String[]} of command line arguments.\n\t */\n\tpublic SimpleCommandLinePropertySource(String name, String[] args) {\n\t\tsuper(name, new SimpleCommandLineArgsParser().parse(args));\n\t}\n\n\t/**\n\t * Get the property names for the option arguments.\n\t */\n\t@Override\n\tpublic String[] getPropertyNames() {\n\t\treturn StringUtils.toStringArray(this.source.getOptionNames());\n\t}\n\n\t@Override\n\tprotected boolean containsOption(String name) {\n\t\treturn this.source.containsOption(name);\n\t}\n\n\t@Override\n\t@Nullable\n\tprotected List<String> getOptionValues(String name) {\n\t\treturn this.source.getOptionValues(name);\n\t}\n\n\t@Override\n\tprotected List<String> getNonOptionArgs() {\n\t\treturn this.source.getNonOptionArgs();\n\t}\n\n}\n```\n\nSimpleCommandLinePropertySource는 CommandLineArgs를 Source를 가지는 CommandLinePropertySource를 상속해 구현하였고,\nCommandLineArgs는 내부에 HashMap으로 Option Argument들을, List로 nonOptionArgs를 가지고 있는 Source로 관리된다. \n\n![](/images/application-argument/CommandLineArgs.png)\n","slug":"application-argument","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttiv000d9zbpcszwa17f","content":"<p>Spring boot 실행할 때 args 를 전달받기 위한 Interface.</p>\n<p>Spring boot에서 org.springframework.boot.ApplicationArguments 를 제공하고 있어서 Bean으로 받아서 사용하면 간단하게 쓸 수 있습니다.</p>\n<p>Spring boot에서 아무런 설정을 하지 않는다면 DefaultApplicationArguments를 사용해 처리한다.</p>\n<ol>\n<li><p>getSourceArgs</p>\n<ul>\n<li>입력한 args 그대로 배열로 받아 옵니다.</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>getOptionNames</p>\n<ul>\n<li><p>args 앞에 “–” 를 붙이면 옵션으로 인식 합니다. 옵션 args 사용 형식 –NAME=VALUE </p>\n</li>\n<li><p>“–fruit=apple” 이렇게 args를 사용하면</p>\n</li>\n<li><p>getOptionName는 fruit 처럼 option name 들의 배열을 받아 옵니다.</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>getNonOptionArgs</li>\n</ol>\n<ul>\n<li><p>“–” 가 없는 경우 NonOption으로 인식합니다.</p>\n</li>\n<li><p>“–” 가 없는 args 들의 값들을 받다 옵니다.</p>\n</li>\n</ul>\n<p><img src=\"/images/application-argument/DefaultApplicationArguments.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Source source;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String[] args;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DefaultApplicationArguments</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tAssert.notNull(args, <span class=\"string\">\"Args must not be null\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source(args);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>내부에 private final로 선언되어 있어 생성자를 통한 할당이 아니라면 바꿀수가 없다.<br>또한 Source라고 하는 내부 Class를 가지고 있고, 이는 SimpleCommandLinePropertySource를 상속해 구현하였다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleCommandLinePropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSource(String[] args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getNonOptionArgs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getNonOptionArgs();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getOptionValues</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getOptionValues(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/application-argument/SimpleCommandLineProperty.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCommandLinePropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">CommandLinePropertySource</span>&lt;<span class=\"title\">CommandLineArgs</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@code</span> SimpleCommandLinePropertySource&#125; having the default name</span></span><br><span class=\"line\"><span class=\"comment\">\t * and backed by the given &#123;<span class=\"doctag\">@code</span> String[]&#125; of command line arguments.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> CommandLinePropertySource#CommandLinePropertySource(Object)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCommandLinePropertySource</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> SimpleCommandLineArgsParser().parse(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@code</span> SimpleCommandLinePropertySource&#125; having the given name</span></span><br><span class=\"line\"><span class=\"comment\">\t * and backed by the given &#123;<span class=\"doctag\">@code</span> String[]&#125; of command line arguments.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCommandLinePropertySource</span><span class=\"params\">(String name, String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, <span class=\"keyword\">new</span> SimpleCommandLineArgsParser().parse(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Get the property names for the option arguments.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(<span class=\"keyword\">this</span>.source.getOptionNames());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsOption</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.containsOption(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getOptionValues</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.getOptionValues(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getNonOptionArgs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.getNonOptionArgs();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SimpleCommandLinePropertySource는 CommandLineArgs를 Source를 가지는 CommandLinePropertySource를 상속해 구현하였고,<br>CommandLineArgs는 내부에 HashMap으로 Option Argument들을, List로 nonOptionArgs를 가지고 있는 Source로 관리된다. </p>\n<p><img src=\"/images/application-argument/CommandLineArgs.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Spring boot 실행할 때 args 를 전달받기 위한 Interface.</p>\n<p>Spring boot에서 org.springframework.boot.ApplicationArguments 를 제공하고 있어서 Bean으로 받아서 사용하면 간단하게 쓸 수 있습니다.</p>\n<p>Spring boot에서 아무런 설정을 하지 않는다면 DefaultApplicationArguments를 사용해 처리한다.</p>\n<ol>\n<li><p>getSourceArgs</p>\n<ul>\n<li>입력한 args 그대로 배열로 받아 옵니다.</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>getOptionNames</p>\n<ul>\n<li><p>args 앞에 “–” 를 붙이면 옵션으로 인식 합니다. 옵션 args 사용 형식 –NAME=VALUE </p>\n</li>\n<li><p>“–fruit=apple” 이렇게 args를 사용하면</p>\n</li>\n<li><p>getOptionName는 fruit 처럼 option name 들의 배열을 받아 옵니다.</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>getNonOptionArgs</li>\n</ol>\n<ul>\n<li><p>“–” 가 없는 경우 NonOption으로 인식합니다.</p>\n</li>\n<li><p>“–” 가 없는 args 들의 값들을 받다 옵니다.</p>\n</li>\n</ul>\n<p><img src=\"/images/application-argument/DefaultApplicationArguments.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Source source;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String[] args;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DefaultApplicationArguments</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tAssert.notNull(args, <span class=\"string\">\"Args must not be null\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source(args);</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.args = args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>내부에 private final로 선언되어 있어 생성자를 통한 할당이 아니라면 바꿀수가 없다.<br>또한 Source라고 하는 내부 Class를 가지고 있고, 이는 SimpleCommandLinePropertySource를 상속해 구현하였다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleCommandLinePropertySource</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSource(String[] args) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getNonOptionArgs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getNonOptionArgs();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getOptionValues</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getOptionValues(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/application-argument/SimpleCommandLineProperty.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCommandLinePropertySource</span> <span class=\"keyword\">extends</span> <span class=\"title\">CommandLinePropertySource</span>&lt;<span class=\"title\">CommandLineArgs</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@code</span> SimpleCommandLinePropertySource&#125; having the default name</span></span><br><span class=\"line\"><span class=\"comment\">\t * and backed by the given &#123;<span class=\"doctag\">@code</span> String[]&#125; of command line arguments.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> CommandLinePropertySource#COMMAND_LINE_PROPERTY_SOURCE_NAME</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@see</span> CommandLinePropertySource#CommandLinePropertySource(Object)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCommandLinePropertySource</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> SimpleCommandLineArgsParser().parse(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@code</span> SimpleCommandLinePropertySource&#125; having the given name</span></span><br><span class=\"line\"><span class=\"comment\">\t * and backed by the given &#123;<span class=\"doctag\">@code</span> String[]&#125; of command line arguments.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleCommandLinePropertySource</span><span class=\"params\">(String name, String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(name, <span class=\"keyword\">new</span> SimpleCommandLineArgsParser().parse(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Get the property names for the option arguments.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] getPropertyNames() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(<span class=\"keyword\">this</span>.source.getOptionNames());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsOption</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.containsOption(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getOptionValues</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.getOptionValues(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title\">getNonOptionArgs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source.getNonOptionArgs();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SimpleCommandLinePropertySource는 CommandLineArgs를 Source를 가지는 CommandLinePropertySource를 상속해 구현하였고,<br>CommandLineArgs는 내부에 HashMap으로 Option Argument들을, List로 nonOptionArgs를 가지고 있는 Source로 관리된다. </p>\n<p><img src=\"/images/application-argument/CommandLineArgs.png\" alt=\"\"></p>\n"},{"title":"event-publishing-run-listener","date":"2019-12-19T06:44:23.000Z","_content":"\n스프링부트가 기동 될때, 기본적으로 등록하는 Run Listener\n\n![](/images/springboot/eventpublishinglistener/eventpublisingrunlistener.png)\n\n내부에 SpringApplication을 가지고 있고, \nSimpleApplicationEventMulticaster에 ApplicationListener들을 등록한다.","source":"_posts/event-publishing-run-listener.md","raw":"---\ntitle: event-publishing-run-listener\ndate: 2019-12-19 15:44:23\ntags: Spring Boot Listener\n---\n\n스프링부트가 기동 될때, 기본적으로 등록하는 Run Listener\n\n![](/images/springboot/eventpublishinglistener/eventpublisingrunlistener.png)\n\n내부에 SpringApplication을 가지고 있고, \nSimpleApplicationEventMulticaster에 ApplicationListener들을 등록한다.","slug":"event-publishing-run-listener","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttiw000e9zbp1xpd18g2","content":"<p>스프링부트가 기동 될때, 기본적으로 등록하는 Run Listener</p>\n<p><img src=\"/images/springboot/eventpublishinglistener/eventpublisingrunlistener.png\" alt=\"\"></p>\n<p>내부에 SpringApplication을 가지고 있고,<br>SimpleApplicationEventMulticaster에 ApplicationListener들을 등록한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>스프링부트가 기동 될때, 기본적으로 등록하는 Run Listener</p>\n<p><img src=\"/images/springboot/eventpublishinglistener/eventpublisingrunlistener.png\" alt=\"\"></p>\n<p>내부에 SpringApplication을 가지고 있고,<br>SimpleApplicationEventMulticaster에 ApplicationListener들을 등록한다.</p>\n"},{"title":"enable-annotation-spring","date":"2020-01-20T11:06:59.000Z","_content":"\n### Spring Boot에서 Enable로 시작하는 Annotation\n\n- Bean을 생성할 때, 고정 값이 아닌 동적으로 값을 얻어와 빈을 생성해 주어야 하는 경우가 있다. \n    - ex) Url이 DB에 저장되어 있거나 File에 저장되어 있어 이를 읽어와 빈을 생성해야 하는경우\n\n- 선언적으로 빈을 생성하지 못하고 동적으로 빈을 생성해야 할 경우 @Enable* Annotation을 사용해 빈을 선언할 수 있다.\n\n#### @Enable* Annotation 을 사용하는 방법은 3가지이다.\n- @Import를 사용하여 정의한 Bean을 불러와서 사용 ex) EnableScheduling\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(SchedulingConfiguration.class)\n@Documented\npublic @interface EnableScheduling {\n \n}\n@Configuration\npublic class SchedulingConfiguration {\n \n @Bean(name=AnnotationConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)\n @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n public ScheduledAnnotationBeanPostProcessor scheduledAnnotationProcessor() {\n  return new ScheduledAnnotationBeanPostProcessor();\n }\n \n}\n```\n\n- @ImportSelector를 사용하여 빈을 생성하는 경우 \n    - ImportSelector 인터페이스를 구현하고 Return하는 배열에 클래스의 이름을 적어 반환해주면 된다. Ex) EnableTransaction\n\n```java\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(TransactionManagementConfigurationSelector.class)\npublic @interface EnableTransactionManagement {\n\n\tboolean proxyTargetClass() default false;\n\tAdviceMode mode() default AdviceMode.PROXY;\n\n\tint order() default Ordered.LOWEST_PRECEDENCE;\n}\n\npublic class TransactionManagementConfigurationSelector extends AdviceModeImportSelector<EnableTransactionManagement> {\n\t@Override\n\tprotected String[] selectImports(AdviceMode adviceMode) {\n\t\tswitch (adviceMode) {\n\t\t\tcase PROXY:\n\t\t\t\treturn new String[] {AutoProxyRegistrar.class.getName(),\n\t\t\t\t\t\tProxyTransactionManagementConfiguration.class.getName()};\n\t\t\tcase ASPECTJ:\n\t\t\t\treturn new String[] {determineTransactionAspectClass()};\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate String determineTransactionAspectClass() {\n\t\treturn (ClassUtils.isPresent(\"javax.transaction.Transactional\", getClass().getClassLoader()) ?\n\t\t\t\tTransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME :\n\t\t\t\tTransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME);\n\t}\n}\n\n```\n\n- @ImportBeanDefinitionRegistrar를 사용한 BeanRegistry에 Bean 등록하기\n    - 동적으로 값을 얻어와 빈에 할당하려면 이 방법 뿐이였다.\n    - 준비물 : Google Reflections Library, \n\n\n```java\npublic void registerBeanDefinitions(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry registry) {\n    String basePackageName = ((StandardAnnotationMetadata) annotationMetadata).getIntrospectedClass().getPackage().getName();\n    Set<Class<?>> interfaces = new Reflections(basePackageName).getTypesAnnotatedWith(ProjectFeignClient.class);\n\n    interfaces.forEach(type -> {\n      BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ProjectFeignFactoryBean.class);\n      builder.setLazyInit(true);\n      builder.addPropertyValue(\"type\", type.getName());\n      builder.setAutowireMode(2);\n\n      AbstractBeanDefinition definition = builder.getBeanDefinition();\n      definition.setPrimary(true);\n\n      BeanDefinitionReaderUtils.registerBeanDefinition(\n              new BeanDefinitionHolder(definition, type.getName()), registry\n      );\n    });\n```\n    \n","source":"_posts/enable-annotation-spring.md","raw":"---\ntitle: enable-annotation-spring\ndate: 2020-01-20 20:06:59\ntags:\n---\n\n### Spring Boot에서 Enable로 시작하는 Annotation\n\n- Bean을 생성할 때, 고정 값이 아닌 동적으로 값을 얻어와 빈을 생성해 주어야 하는 경우가 있다. \n    - ex) Url이 DB에 저장되어 있거나 File에 저장되어 있어 이를 읽어와 빈을 생성해야 하는경우\n\n- 선언적으로 빈을 생성하지 못하고 동적으로 빈을 생성해야 할 경우 @Enable* Annotation을 사용해 빈을 선언할 수 있다.\n\n#### @Enable* Annotation 을 사용하는 방법은 3가지이다.\n- @Import를 사용하여 정의한 Bean을 불러와서 사용 ex) EnableScheduling\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(SchedulingConfiguration.class)\n@Documented\npublic @interface EnableScheduling {\n \n}\n@Configuration\npublic class SchedulingConfiguration {\n \n @Bean(name=AnnotationConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)\n @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n public ScheduledAnnotationBeanPostProcessor scheduledAnnotationProcessor() {\n  return new ScheduledAnnotationBeanPostProcessor();\n }\n \n}\n```\n\n- @ImportSelector를 사용하여 빈을 생성하는 경우 \n    - ImportSelector 인터페이스를 구현하고 Return하는 배열에 클래스의 이름을 적어 반환해주면 된다. Ex) EnableTransaction\n\n```java\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(TransactionManagementConfigurationSelector.class)\npublic @interface EnableTransactionManagement {\n\n\tboolean proxyTargetClass() default false;\n\tAdviceMode mode() default AdviceMode.PROXY;\n\n\tint order() default Ordered.LOWEST_PRECEDENCE;\n}\n\npublic class TransactionManagementConfigurationSelector extends AdviceModeImportSelector<EnableTransactionManagement> {\n\t@Override\n\tprotected String[] selectImports(AdviceMode adviceMode) {\n\t\tswitch (adviceMode) {\n\t\t\tcase PROXY:\n\t\t\t\treturn new String[] {AutoProxyRegistrar.class.getName(),\n\t\t\t\t\t\tProxyTransactionManagementConfiguration.class.getName()};\n\t\t\tcase ASPECTJ:\n\t\t\t\treturn new String[] {determineTransactionAspectClass()};\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate String determineTransactionAspectClass() {\n\t\treturn (ClassUtils.isPresent(\"javax.transaction.Transactional\", getClass().getClassLoader()) ?\n\t\t\t\tTransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME :\n\t\t\t\tTransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME);\n\t}\n}\n\n```\n\n- @ImportBeanDefinitionRegistrar를 사용한 BeanRegistry에 Bean 등록하기\n    - 동적으로 값을 얻어와 빈에 할당하려면 이 방법 뿐이였다.\n    - 준비물 : Google Reflections Library, \n\n\n```java\npublic void registerBeanDefinitions(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry registry) {\n    String basePackageName = ((StandardAnnotationMetadata) annotationMetadata).getIntrospectedClass().getPackage().getName();\n    Set<Class<?>> interfaces = new Reflections(basePackageName).getTypesAnnotatedWith(ProjectFeignClient.class);\n\n    interfaces.forEach(type -> {\n      BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ProjectFeignFactoryBean.class);\n      builder.setLazyInit(true);\n      builder.addPropertyValue(\"type\", type.getName());\n      builder.setAutowireMode(2);\n\n      AbstractBeanDefinition definition = builder.getBeanDefinition();\n      definition.setPrimary(true);\n\n      BeanDefinitionReaderUtils.registerBeanDefinition(\n              new BeanDefinitionHolder(definition, type.getName()), registry\n      );\n    });\n```\n    \n","slug":"enable-annotation-spring","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttiy000f9zbpcsnec3cj","content":"<h3 id=\"Spring-Boot에서-Enable로-시작하는-Annotation\"><a href=\"#Spring-Boot에서-Enable로-시작하는-Annotation\" class=\"headerlink\" title=\"Spring Boot에서 Enable로 시작하는 Annotation\"></a>Spring Boot에서 Enable로 시작하는 Annotation</h3><ul>\n<li><p>Bean을 생성할 때, 고정 값이 아닌 동적으로 값을 얻어와 빈을 생성해 주어야 하는 경우가 있다. </p>\n<ul>\n<li>ex) Url이 DB에 저장되어 있거나 File에 저장되어 있어 이를 읽어와 빈을 생성해야 하는경우</li>\n</ul>\n</li>\n<li><p>선언적으로 빈을 생성하지 못하고 동적으로 빈을 생성해야 할 경우 @Enable* Annotation을 사용해 빈을 선언할 수 있다.</p>\n</li>\n</ul>\n<h4 id=\"Enable-Annotation-을-사용하는-방법은-3가지이다\"><a href=\"#Enable-Annotation-을-사용하는-방법은-3가지이다\" class=\"headerlink\" title=\"@Enable* Annotation 을 사용하는 방법은 3가지이다.\"></a>@Enable* Annotation 을 사용하는 방법은 3가지이다.</h4><ul>\n<li>@Import를 사용하여 정의한 Bean을 불러와서 사용 ex) EnableScheduling</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(SchedulingConfiguration.class)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableScheduling &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulingConfiguration</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Bean</span>(name=AnnotationConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span><br><span class=\"line\"> <span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> ScheduledAnnotationBeanPostProcessor <span class=\"title\">scheduledAnnotationProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledAnnotationBeanPostProcessor();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@ImportSelector를 사용하여 빈을 생성하는 경우 <ul>\n<li>ImportSelector 인터페이스를 구현하고 Return하는 배열에 클래스의 이름을 적어 반환해주면 된다. Ex) EnableTransaction</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(TransactionManagementConfigurationSelector.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableTransactionManagement &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">AdviceMode <span class=\"title\">mode</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> AdviceMode.PROXY</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">order</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionManagementConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableTransactionManagement</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (adviceMode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;AutoProxyRegistrar.class.getName(),</span><br><span class=\"line\">\t\t\t\t\t\tProxyTransactionManagementConfiguration.class.getName()&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;determineTransactionAspectClass()&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">determineTransactionAspectClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (ClassUtils.isPresent(<span class=\"string\">\"javax.transaction.Transactional\"</span>, getClass().getClassLoader()) ?</span><br><span class=\"line\">\t\t\t\tTransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME :</span><br><span class=\"line\">\t\t\t\tTransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@ImportBeanDefinitionRegistrar를 사용한 BeanRegistry에 Bean 등록하기<ul>\n<li>동적으로 값을 얻어와 빈에 할당하려면 이 방법 뿐이였다.</li>\n<li>준비물 : Google Reflections Library, </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    String basePackageName = ((StandardAnnotationMetadata) annotationMetadata).getIntrospectedClass().getPackage().getName();</span><br><span class=\"line\">    Set&lt;Class&lt;?&gt;&gt; interfaces = <span class=\"keyword\">new</span> Reflections(basePackageName).getTypesAnnotatedWith(ProjectFeignClient.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    interfaces.forEach(type -&gt; &#123;</span><br><span class=\"line\">      BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ProjectFeignFactoryBean.class);</span><br><span class=\"line\">      builder.setLazyInit(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      builder.addPropertyValue(<span class=\"string\">\"type\"</span>, type.getName());</span><br><span class=\"line\">      builder.setAutowireMode(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      AbstractBeanDefinition definition = builder.getBeanDefinition();</span><br><span class=\"line\">      definition.setPrimary(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      BeanDefinitionReaderUtils.registerBeanDefinition(</span><br><span class=\"line\">              <span class=\"keyword\">new</span> BeanDefinitionHolder(definition, type.getName()), registry</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Spring-Boot에서-Enable로-시작하는-Annotation\"><a href=\"#Spring-Boot에서-Enable로-시작하는-Annotation\" class=\"headerlink\" title=\"Spring Boot에서 Enable로 시작하는 Annotation\"></a>Spring Boot에서 Enable로 시작하는 Annotation</h3><ul>\n<li><p>Bean을 생성할 때, 고정 값이 아닌 동적으로 값을 얻어와 빈을 생성해 주어야 하는 경우가 있다. </p>\n<ul>\n<li>ex) Url이 DB에 저장되어 있거나 File에 저장되어 있어 이를 읽어와 빈을 생성해야 하는경우</li>\n</ul>\n</li>\n<li><p>선언적으로 빈을 생성하지 못하고 동적으로 빈을 생성해야 할 경우 @Enable* Annotation을 사용해 빈을 선언할 수 있다.</p>\n</li>\n</ul>\n<h4 id=\"Enable-Annotation-을-사용하는-방법은-3가지이다\"><a href=\"#Enable-Annotation-을-사용하는-방법은-3가지이다\" class=\"headerlink\" title=\"@Enable* Annotation 을 사용하는 방법은 3가지이다.\"></a>@Enable* Annotation 을 사용하는 방법은 3가지이다.</h4><ul>\n<li>@Import를 사용하여 정의한 Bean을 불러와서 사용 ex) EnableScheduling</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(SchedulingConfiguration.class)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableScheduling &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulingConfiguration</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"meta\">@Bean</span>(name=AnnotationConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span><br><span class=\"line\"> <span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> ScheduledAnnotationBeanPostProcessor <span class=\"title\">scheduledAnnotationProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledAnnotationBeanPostProcessor();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@ImportSelector를 사용하여 빈을 생성하는 경우 <ul>\n<li>ImportSelector 인터페이스를 구현하고 Return하는 배열에 클래스의 이름을 적어 반환해주면 된다. Ex) EnableTransaction</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(TransactionManagementConfigurationSelector.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableTransactionManagement &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\">\t<span class=\"function\">AdviceMode <span class=\"title\">mode</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> AdviceMode.PROXY</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">order</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionManagementConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableTransactionManagement</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (adviceMode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;AutoProxyRegistrar.class.getName(),</span><br><span class=\"line\">\t\t\t\t\t\tProxyTransactionManagementConfiguration.class.getName()&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;determineTransactionAspectClass()&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">determineTransactionAspectClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (ClassUtils.isPresent(<span class=\"string\">\"javax.transaction.Transactional\"</span>, getClass().getClassLoader()) ?</span><br><span class=\"line\">\t\t\t\tTransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME :</span><br><span class=\"line\">\t\t\t\tTransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@ImportBeanDefinitionRegistrar를 사용한 BeanRegistry에 Bean 등록하기<ul>\n<li>동적으로 값을 얻어와 빈에 할당하려면 이 방법 뿐이였다.</li>\n<li>준비물 : Google Reflections Library, </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    String basePackageName = ((StandardAnnotationMetadata) annotationMetadata).getIntrospectedClass().getPackage().getName();</span><br><span class=\"line\">    Set&lt;Class&lt;?&gt;&gt; interfaces = <span class=\"keyword\">new</span> Reflections(basePackageName).getTypesAnnotatedWith(ProjectFeignClient.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    interfaces.forEach(type -&gt; &#123;</span><br><span class=\"line\">      BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ProjectFeignFactoryBean.class);</span><br><span class=\"line\">      builder.setLazyInit(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      builder.addPropertyValue(<span class=\"string\">\"type\"</span>, type.getName());</span><br><span class=\"line\">      builder.setAutowireMode(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      AbstractBeanDefinition definition = builder.getBeanDefinition();</span><br><span class=\"line\">      definition.setPrimary(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      BeanDefinitionReaderUtils.registerBeanDefinition(</span><br><span class=\"line\">              <span class=\"keyword\">new</span> BeanDefinitionHolder(definition, type.getName()), registry</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"intro","date":"2019-10-28T06:40:04.000Z","_content":"","source":"_posts/intro.md","raw":"---\ntitle: intro\ndate: 2019-10-28 15:40:04\ntags:\n---\n","slug":"intro","published":1,"updated":"2019-11-17T19:16:54.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttiz000h9zbp7asa4x49","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"java-fundamental-method-area","date":"2020-02-27T02:52:51.000Z","_content":"\n![](/images/java/fundamental/method_area/method_area.png)\n","source":"_posts/java-fundamental-method-area.md","raw":"---\ntitle: java-fundamental-method-area\ndate: 2020-02-27 11:52:51\ntags:\n---\n\n![](/images/java/fundamental/method_area/method_area.png)\n","slug":"java-fundamental-method-area","published":1,"updated":"2020-03-01T11:50:21.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj0000i9zbpe3ev6ds9","content":"<p><img src=\"/images/java/fundamental/method_area/method_area.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/java/fundamental/method_area/method_area.png\" alt=\"\"></p>\n"},{"title":"java-fundamental-runtime-data-areas","date":"2020-02-27T02:40:06.000Z","_content":"\n![](/images/java/fundamental/runtime_data_areas/runtime_data_areas.png)\n\n## Runtime Data Areas\n- PC Registers\n    - CPU에서 명령어(Instruction)을 수행하는 과정에서 필요한 정보를 레지스터(Register)라고 하는 CPU내 기억장치를 사용한다.\n    - Java의 PC Registers는 Register-Base로 구동되는 방식이 아니라 Stack-Base로 작동한다.\n    - JVM은 CPU에 직접 명령어를 수행하지 않고 Stack에서 Operand를 뽑아내 이를 별도의 메모리 공간에 저장하는 방식을 취하고 있다.\n    - 플랫폼 독립적인 설계를 위해 버퍼공간으로 만든 메모리 공간을 PC Registers라고 한다.\n    \n- Java Virtual Machine Stacks\n    - Thread의 수행 정보를 기록하는 Frame을 저장하는 공간\n    - Thread별로 하나씩 존재하며 Thread가 시작할 때 생성된다.\n    - Stack Frame 이라고 하는 것들로 구성이 되는데 JVM은 Stack Frame을 push,pop 작업만 수행한다.\n    - 그래서 이 Stack Frame들의 정보를 Stack Trace또는 Stack Dump를 얻어내어 분석을 하게 된다.\n    - 현재 수행하고 있는 Method의 Strack Frame을 Current Frame이라고 한다.\n    - 현재 수행하고 있는 Method의 Class를 Current Class이라고 한다.\n    \n- Method Area\n    - 메모리 영역들이 각 Thread마다 할당되는 배타적인 공간인데 반해 Method Area는 모든 thread들이 공유하는 메모리 영역이다.\n    - Load된 Type(Class, Interface)을 저장하는 논리적 메모리 공간\n    - Type의 ByteCode 뿐만 아니라, 모든 변수, 상수, Reference, Method Data등이 포함된다.\n    - Class Variable과 Method와 생성자의 정보도 포함된다. 이 정보들은 ClassLoader에게 넘겨받은 Class File에서 Type관련 정보를\n      추출하여 저장하게 된다.\n    - Method Area는 JVM이 기동할때 생성이 되고 GC대상이며, 이는 벤더마다 구현이 다르다.","source":"_posts/java-fundamental-runtime-data-areas.md","raw":"---\ntitle: java-fundamental-runtime-data-areas\ndate: 2020-02-27 11:40:06\ntags:\n---\n\n![](/images/java/fundamental/runtime_data_areas/runtime_data_areas.png)\n\n## Runtime Data Areas\n- PC Registers\n    - CPU에서 명령어(Instruction)을 수행하는 과정에서 필요한 정보를 레지스터(Register)라고 하는 CPU내 기억장치를 사용한다.\n    - Java의 PC Registers는 Register-Base로 구동되는 방식이 아니라 Stack-Base로 작동한다.\n    - JVM은 CPU에 직접 명령어를 수행하지 않고 Stack에서 Operand를 뽑아내 이를 별도의 메모리 공간에 저장하는 방식을 취하고 있다.\n    - 플랫폼 독립적인 설계를 위해 버퍼공간으로 만든 메모리 공간을 PC Registers라고 한다.\n    \n- Java Virtual Machine Stacks\n    - Thread의 수행 정보를 기록하는 Frame을 저장하는 공간\n    - Thread별로 하나씩 존재하며 Thread가 시작할 때 생성된다.\n    - Stack Frame 이라고 하는 것들로 구성이 되는데 JVM은 Stack Frame을 push,pop 작업만 수행한다.\n    - 그래서 이 Stack Frame들의 정보를 Stack Trace또는 Stack Dump를 얻어내어 분석을 하게 된다.\n    - 현재 수행하고 있는 Method의 Strack Frame을 Current Frame이라고 한다.\n    - 현재 수행하고 있는 Method의 Class를 Current Class이라고 한다.\n    \n- Method Area\n    - 메모리 영역들이 각 Thread마다 할당되는 배타적인 공간인데 반해 Method Area는 모든 thread들이 공유하는 메모리 영역이다.\n    - Load된 Type(Class, Interface)을 저장하는 논리적 메모리 공간\n    - Type의 ByteCode 뿐만 아니라, 모든 변수, 상수, Reference, Method Data등이 포함된다.\n    - Class Variable과 Method와 생성자의 정보도 포함된다. 이 정보들은 ClassLoader에게 넘겨받은 Class File에서 Type관련 정보를\n      추출하여 저장하게 된다.\n    - Method Area는 JVM이 기동할때 생성이 되고 GC대상이며, 이는 벤더마다 구현이 다르다.","slug":"java-fundamental-runtime-data-areas","published":1,"updated":"2020-03-01T11:50:21.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj1000j9zbphqf7e6s2","content":"<p><img src=\"/images/java/fundamental/runtime_data_areas/runtime_data_areas.png\" alt=\"\"></p>\n<h2 id=\"Runtime-Data-Areas\"><a href=\"#Runtime-Data-Areas\" class=\"headerlink\" title=\"Runtime Data Areas\"></a>Runtime Data Areas</h2><ul>\n<li><p>PC Registers</p>\n<ul>\n<li>CPU에서 명령어(Instruction)을 수행하는 과정에서 필요한 정보를 레지스터(Register)라고 하는 CPU내 기억장치를 사용한다.</li>\n<li>Java의 PC Registers는 Register-Base로 구동되는 방식이 아니라 Stack-Base로 작동한다.</li>\n<li>JVM은 CPU에 직접 명령어를 수행하지 않고 Stack에서 Operand를 뽑아내 이를 별도의 메모리 공간에 저장하는 방식을 취하고 있다.</li>\n<li>플랫폼 독립적인 설계를 위해 버퍼공간으로 만든 메모리 공간을 PC Registers라고 한다.</li>\n</ul>\n</li>\n<li><p>Java Virtual Machine Stacks</p>\n<ul>\n<li>Thread의 수행 정보를 기록하는 Frame을 저장하는 공간</li>\n<li>Thread별로 하나씩 존재하며 Thread가 시작할 때 생성된다.</li>\n<li>Stack Frame 이라고 하는 것들로 구성이 되는데 JVM은 Stack Frame을 push,pop 작업만 수행한다.</li>\n<li>그래서 이 Stack Frame들의 정보를 Stack Trace또는 Stack Dump를 얻어내어 분석을 하게 된다.</li>\n<li>현재 수행하고 있는 Method의 Strack Frame을 Current Frame이라고 한다.</li>\n<li>현재 수행하고 있는 Method의 Class를 Current Class이라고 한다.</li>\n</ul>\n</li>\n<li><p>Method Area</p>\n<ul>\n<li>메모리 영역들이 각 Thread마다 할당되는 배타적인 공간인데 반해 Method Area는 모든 thread들이 공유하는 메모리 영역이다.</li>\n<li>Load된 Type(Class, Interface)을 저장하는 논리적 메모리 공간</li>\n<li>Type의 ByteCode 뿐만 아니라, 모든 변수, 상수, Reference, Method Data등이 포함된다.</li>\n<li>Class Variable과 Method와 생성자의 정보도 포함된다. 이 정보들은 ClassLoader에게 넘겨받은 Class File에서 Type관련 정보를<br>추출하여 저장하게 된다.</li>\n<li>Method Area는 JVM이 기동할때 생성이 되고 GC대상이며, 이는 벤더마다 구현이 다르다.</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/java/fundamental/runtime_data_areas/runtime_data_areas.png\" alt=\"\"></p>\n<h2 id=\"Runtime-Data-Areas\"><a href=\"#Runtime-Data-Areas\" class=\"headerlink\" title=\"Runtime Data Areas\"></a>Runtime Data Areas</h2><ul>\n<li><p>PC Registers</p>\n<ul>\n<li>CPU에서 명령어(Instruction)을 수행하는 과정에서 필요한 정보를 레지스터(Register)라고 하는 CPU내 기억장치를 사용한다.</li>\n<li>Java의 PC Registers는 Register-Base로 구동되는 방식이 아니라 Stack-Base로 작동한다.</li>\n<li>JVM은 CPU에 직접 명령어를 수행하지 않고 Stack에서 Operand를 뽑아내 이를 별도의 메모리 공간에 저장하는 방식을 취하고 있다.</li>\n<li>플랫폼 독립적인 설계를 위해 버퍼공간으로 만든 메모리 공간을 PC Registers라고 한다.</li>\n</ul>\n</li>\n<li><p>Java Virtual Machine Stacks</p>\n<ul>\n<li>Thread의 수행 정보를 기록하는 Frame을 저장하는 공간</li>\n<li>Thread별로 하나씩 존재하며 Thread가 시작할 때 생성된다.</li>\n<li>Stack Frame 이라고 하는 것들로 구성이 되는데 JVM은 Stack Frame을 push,pop 작업만 수행한다.</li>\n<li>그래서 이 Stack Frame들의 정보를 Stack Trace또는 Stack Dump를 얻어내어 분석을 하게 된다.</li>\n<li>현재 수행하고 있는 Method의 Strack Frame을 Current Frame이라고 한다.</li>\n<li>현재 수행하고 있는 Method의 Class를 Current Class이라고 한다.</li>\n</ul>\n</li>\n<li><p>Method Area</p>\n<ul>\n<li>메모리 영역들이 각 Thread마다 할당되는 배타적인 공간인데 반해 Method Area는 모든 thread들이 공유하는 메모리 영역이다.</li>\n<li>Load된 Type(Class, Interface)을 저장하는 논리적 메모리 공간</li>\n<li>Type의 ByteCode 뿐만 아니라, 모든 변수, 상수, Reference, Method Data등이 포함된다.</li>\n<li>Class Variable과 Method와 생성자의 정보도 포함된다. 이 정보들은 ClassLoader에게 넘겨받은 Class File에서 Type관련 정보를<br>추출하여 저장하게 된다.</li>\n<li>Method Area는 JVM이 기동할때 생성이 되고 GC대상이며, 이는 벤더마다 구현이 다르다.</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-11-17T19:16:54.950Z","updated":"2019-11-17T19:16:54.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj2000l9zbpcbcve3ox","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"java-fundamental-method-stack","date":"2020-02-27T02:23:55.000Z","_content":"![](/images/java/fundamental/method_stack_memory/method_stacks.png)\n\n## Java Virtual Machine Stacks\n- Local Variable Section\n    - Method Parameters음\n        - float size 1\n        - long, double size 2\n        - char, byte, boolean, short, int 전체가 int형으로 선언되어 있음\n    - Local variable\n\n- Operand Stack\n    - Work Space in JVM \n        - JVM 작업 공간, JVM 이 프로그램을 수행하면서 연산을 위해 사용되는 데이터 및 결과를 Operand Stack에 집어넣고 처리함\n\n![](/images/java/fundamental/method_stack_memory/operand_stack.png)\n\n\n- Frame Data\n    - Constant pool Resolution\n    - Normal Method Return\n    - Exception Dispatch\n\n## Native Method Stacks\n- Native Code C ==> C Stack\n- Native Code C++ ==> C++ Stack\n\n![](/images/java/fundamental/method_stack_memory/native_method.png)\n","source":"_posts/java-fundamental-method-stack.md","raw":"---\ntitle: java-fundamental-method-stack\ndate: 2020-02-27 11:23:55\ntags:\n---\n![](/images/java/fundamental/method_stack_memory/method_stacks.png)\n\n## Java Virtual Machine Stacks\n- Local Variable Section\n    - Method Parameters음\n        - float size 1\n        - long, double size 2\n        - char, byte, boolean, short, int 전체가 int형으로 선언되어 있음\n    - Local variable\n\n- Operand Stack\n    - Work Space in JVM \n        - JVM 작업 공간, JVM 이 프로그램을 수행하면서 연산을 위해 사용되는 데이터 및 결과를 Operand Stack에 집어넣고 처리함\n\n![](/images/java/fundamental/method_stack_memory/operand_stack.png)\n\n\n- Frame Data\n    - Constant pool Resolution\n    - Normal Method Return\n    - Exception Dispatch\n\n## Native Method Stacks\n- Native Code C ==> C Stack\n- Native Code C++ ==> C++ Stack\n\n![](/images/java/fundamental/method_stack_memory/native_method.png)\n","slug":"java-fundamental-method-stack","published":1,"updated":"2020-03-01T11:50:21.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj3000m9zbphd360z8j","content":"<p><img src=\"/images/java/fundamental/method_stack_memory/method_stacks.png\" alt=\"\"></p>\n<h2 id=\"Java-Virtual-Machine-Stacks\"><a href=\"#Java-Virtual-Machine-Stacks\" class=\"headerlink\" title=\"Java Virtual Machine Stacks\"></a>Java Virtual Machine Stacks</h2><ul>\n<li><p>Local Variable Section</p>\n<ul>\n<li>Method Parameters음<ul>\n<li>float size 1</li>\n<li>long, double size 2</li>\n<li>char, byte, boolean, short, int 전체가 int형으로 선언되어 있음</li>\n</ul>\n</li>\n<li>Local variable</li>\n</ul>\n</li>\n<li><p>Operand Stack</p>\n<ul>\n<li>Work Space in JVM <ul>\n<li>JVM 작업 공간, JVM 이 프로그램을 수행하면서 연산을 위해 사용되는 데이터 및 결과를 Operand Stack에 집어넣고 처리함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/java/fundamental/method_stack_memory/operand_stack.png\" alt=\"\"></p>\n<ul>\n<li>Frame Data<ul>\n<li>Constant pool Resolution</li>\n<li>Normal Method Return</li>\n<li>Exception Dispatch</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Native-Method-Stacks\"><a href=\"#Native-Method-Stacks\" class=\"headerlink\" title=\"Native Method Stacks\"></a>Native Method Stacks</h2><ul>\n<li>Native Code C ==&gt; C Stack</li>\n<li>Native Code C++ ==&gt; C++ Stack</li>\n</ul>\n<p><img src=\"/images/java/fundamental/method_stack_memory/native_method.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/java/fundamental/method_stack_memory/method_stacks.png\" alt=\"\"></p>\n<h2 id=\"Java-Virtual-Machine-Stacks\"><a href=\"#Java-Virtual-Machine-Stacks\" class=\"headerlink\" title=\"Java Virtual Machine Stacks\"></a>Java Virtual Machine Stacks</h2><ul>\n<li><p>Local Variable Section</p>\n<ul>\n<li>Method Parameters음<ul>\n<li>float size 1</li>\n<li>long, double size 2</li>\n<li>char, byte, boolean, short, int 전체가 int형으로 선언되어 있음</li>\n</ul>\n</li>\n<li>Local variable</li>\n</ul>\n</li>\n<li><p>Operand Stack</p>\n<ul>\n<li>Work Space in JVM <ul>\n<li>JVM 작업 공간, JVM 이 프로그램을 수행하면서 연산을 위해 사용되는 데이터 및 결과를 Operand Stack에 집어넣고 처리함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/java/fundamental/method_stack_memory/operand_stack.png\" alt=\"\"></p>\n<ul>\n<li>Frame Data<ul>\n<li>Constant pool Resolution</li>\n<li>Normal Method Return</li>\n<li>Exception Dispatch</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Native-Method-Stacks\"><a href=\"#Native-Method-Stacks\" class=\"headerlink\" title=\"Native Method Stacks\"></a>Native Method Stacks</h2><ul>\n<li>Native Code C ==&gt; C Stack</li>\n<li>Native Code C++ ==&gt; C++ Stack</li>\n</ul>\n<p><img src=\"/images/java/fundamental/method_stack_memory/native_method.png\" alt=\"\"></p>\n"},{"title":"java-poi","date":"2020-02-19T12:28:41.000Z","_content":"확인해보\nhttps://blog.naver.com/tmondev/221388780914\nhttps://blog.miyam.net/41\nhttps://www.codejava.net/coding/java-code-example-to-export-data-from-database-to-excel-file\nhttp://jexcelapi.sourceforge.net/resources/faq/\nhttps://offbyone.tistory.com/70\nflyweight pattern\n","source":"_posts/java-poi.md","raw":"---\ntitle: java-poi\ndate: 2020-02-19 21:28:41\ntags:\n---\n확인해보\nhttps://blog.naver.com/tmondev/221388780914\nhttps://blog.miyam.net/41\nhttps://www.codejava.net/coding/java-code-example-to-export-data-from-database-to-excel-file\nhttp://jexcelapi.sourceforge.net/resources/faq/\nhttps://offbyone.tistory.com/70\nflyweight pattern\n","slug":"java-poi","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj4000n9zbpgg7ta9i3","content":"<p>확인해보<br><a href=\"https://blog.naver.com/tmondev/221388780914\">https://blog.naver.com/tmondev/221388780914</a><br><a href=\"https://blog.miyam.net/41\">https://blog.miyam.net/41</a><br><a href=\"https://www.codejava.net/coding/java-code-example-to-export-data-from-database-to-excel-file\">https://www.codejava.net/coding/java-code-example-to-export-data-from-database-to-excel-file</a><br><a href=\"http://jexcelapi.sourceforge.net/resources/faq/\">http://jexcelapi.sourceforge.net/resources/faq/</a><br><a href=\"https://offbyone.tistory.com/70\">https://offbyone.tistory.com/70</a><br>flyweight pattern</p>\n","site":{"data":{}},"excerpt":"","more":"<p>확인해보<br><a href=\"https://blog.naver.com/tmondev/221388780914\">https://blog.naver.com/tmondev/221388780914</a><br><a href=\"https://blog.miyam.net/41\">https://blog.miyam.net/41</a><br><a href=\"https://www.codejava.net/coding/java-code-example-to-export-data-from-database-to-excel-file\">https://www.codejava.net/coding/java-code-example-to-export-data-from-database-to-excel-file</a><br><a href=\"http://jexcelapi.sourceforge.net/resources/faq/\">http://jexcelapi.sourceforge.net/resources/faq/</a><br><a href=\"https://offbyone.tistory.com/70\">https://offbyone.tistory.com/70</a><br>flyweight pattern</p>\n"},{"title":"java-stream-function-interface","date":"2020-02-19T12:41:18.000Z","_content":"\n| 함수형 인터페이스 | Descriptor | Method명| \n| ------------ | ----------- | ------ |\n| Predicate<T> | T -> boolean| test() |\n| Consumer<T>  | T -> void   | accept()|\n| Supplier<T>  | () -> T     | accept()|\n| Function<T,R> | T -> R     | apply() |\n| UnaryOperator<T> | T -> T  | identity()|","source":"_posts/java-stream-function-interface.md","raw":"---\ntitle: java-stream-function-interface\ndate: 2020-02-19 21:41:18\ntags:\n---\n\n| 함수형 인터페이스 | Descriptor | Method명| \n| ------------ | ----------- | ------ |\n| Predicate<T> | T -> boolean| test() |\n| Consumer<T>  | T -> void   | accept()|\n| Supplier<T>  | () -> T     | accept()|\n| Function<T,R> | T -> R     | apply() |\n| UnaryOperator<T> | T -> T  | identity()|","slug":"java-stream-function-interface","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj5000o9zbp6ruwbyre","content":"<table>\n<thead>\n<tr>\n<th>함수형 인터페이스</th>\n<th>Descriptor</th>\n<th>Method명</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Predicate<T></td>\n<td>T -&gt; boolean</td>\n<td>test()</td>\n</tr>\n<tr>\n<td>Consumer<T></td>\n<td>T -&gt; void</td>\n<td>accept()</td>\n</tr>\n<tr>\n<td>Supplier<T></td>\n<td>() -&gt; T</td>\n<td>accept()</td>\n</tr>\n<tr>\n<td>Function&lt;T,R&gt;</td>\n<td>T -&gt; R</td>\n<td>apply()</td>\n</tr>\n<tr>\n<td>UnaryOperator<T></td>\n<td>T -&gt; T</td>\n<td>identity()</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>함수형 인터페이스</th>\n<th>Descriptor</th>\n<th>Method명</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Predicate<T></td>\n<td>T -&gt; boolean</td>\n<td>test()</td>\n</tr>\n<tr>\n<td>Consumer<T></td>\n<td>T -&gt; void</td>\n<td>accept()</td>\n</tr>\n<tr>\n<td>Supplier<T></td>\n<td>() -&gt; T</td>\n<td>accept()</td>\n</tr>\n<tr>\n<td>Function&lt;T,R&gt;</td>\n<td>T -&gt; R</td>\n<td>apply()</td>\n</tr>\n<tr>\n<td>UnaryOperator<T></td>\n<td>T -&gt; T</td>\n<td>identity()</td>\n</tr>\n</tbody></table>\n"},{"title":"java-stream-parallel","date":"2020-02-19T12:12:14.000Z","_content":"Java 8의 변경 사항중 하나인 lambda를 효과적으로 사용할 수 있도록 collection들은 stream을 제공한다.\nstream interface는 collection을 파이프식으로 처리 가능하도록 고차함수로 그 구조를 추상화 했다.\n\n스트림을 사용하면서, 반복적인 형번환 소스코드를 간편하게 처리 할 수 있게 되었고, 가독성 또한 높아졌다. 만\n또한 병렬연산을 쉽게 지원할 수 있게 도와주니 매력적으로 보인다.\n\n하지만 Thread Pool을 직접 지정하는 이전 소스코드에 비해 Java 내부에 존재하는 공유  CommonPorkJoinPool 을 사용하기 때문에\n여러개의 Thread가 일을 수행하는 Web Project의 경우에는 공유 Thread Pool의 Thread가 모자랄수 있다.\nJava는 내부적으로 Parallel Stream이 CommonPorkJoinPool을 가지고 있고 내부 Thread의 수를 해당 머신의 프로세서의 개수로 처음에 만들어 시작한다.\n\n그래서 Property로 Thread의 수를 지정하거나 ForkJoinPool을 명시적으로 사용해 parallelStream을 처리할 수 있게 할 수 있다.\n\n1) Property 설정\n```java\nSystem.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\",\"6\");\n```\n\n2) 명시적 ForkJoinPool 사용\n```java\nForkJoinPool forkjoinPool = new ForkJoinPool(5);\nforkjoinPool.submit(() -> {\n\tlist.parallelStream().forEach(index -> {\n\t\tSystem.out.printIn(\"Thread : \" + Thread.currentThread().getName()\n             + \", index + \", \" + new Date());\n\t\ttry{\n\t\t\tThread.sleep(500);\n\t\t} catch (InterruptedException e){\n\t\t}\n\t});\n}).get();\n```\n\nForkJoinPool 생성자에 Thread 개수를 지정해서 사용할 수 있다.\n\nForkJoinPool\n![](/images/java/stream/fork_join.jpg)\n\n기본적으로는 ExecutorService의 구현체이지만,  다른 점은 각 thread들이 개별 큐를 가지게 되며, \n다음 그림의 B처럼 아무런 task가 없으면 A의 task를 가져와 처리하게 됨으로써 \nCPU 자원을 효율적으로 사용할 수 있게 된다.\n\n![](/images/java/stream/fork_join_queue.jpg)\n\nForkJoinPool의 특성상 나누어지는 Job은 균등하게 처리가 되어야 한다.\nSpliterator의 trySplit()을 사용해 작업을 분할 하는데 균등하지 않으면 순차적으로 실행하는 것보다 비효율적일 수 있다.\n```java\npublic Spliterator<T> trySplit() {\n    int lo = index, mid = (lo + fence) >>> 1;\n    return (lo >= mid)\n           ? null\n           : new ArraySpliterator<>(array,\n                                    lo, index = mid,\n                                    characteristics);\n}\n```\n\n또한, 병렬로 처리되는 작업이 독립적이지 않다면, 수행 성능에 영향이 있을 수 있다.\nstream의 중간 단계 연산 중 sorted(), distinct()와 같은 작업을 수행하는 경우에는 \n내부적으로 상태에 대한 변수를 각 작업들이 공유(synchronized)하게 되어 있다. \n이럴때 순차적으로 실행하는 경우가 더 효과적일 수 있다.\n\n참고\nhttp://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html ","source":"_posts/java-stream-parallel.md","raw":"---\ntitle: java-stream-parallel\ndate: 2020-02-19 21:12:14\ntags:\n---\nJava 8의 변경 사항중 하나인 lambda를 효과적으로 사용할 수 있도록 collection들은 stream을 제공한다.\nstream interface는 collection을 파이프식으로 처리 가능하도록 고차함수로 그 구조를 추상화 했다.\n\n스트림을 사용하면서, 반복적인 형번환 소스코드를 간편하게 처리 할 수 있게 되었고, 가독성 또한 높아졌다. 만\n또한 병렬연산을 쉽게 지원할 수 있게 도와주니 매력적으로 보인다.\n\n하지만 Thread Pool을 직접 지정하는 이전 소스코드에 비해 Java 내부에 존재하는 공유  CommonPorkJoinPool 을 사용하기 때문에\n여러개의 Thread가 일을 수행하는 Web Project의 경우에는 공유 Thread Pool의 Thread가 모자랄수 있다.\nJava는 내부적으로 Parallel Stream이 CommonPorkJoinPool을 가지고 있고 내부 Thread의 수를 해당 머신의 프로세서의 개수로 처음에 만들어 시작한다.\n\n그래서 Property로 Thread의 수를 지정하거나 ForkJoinPool을 명시적으로 사용해 parallelStream을 처리할 수 있게 할 수 있다.\n\n1) Property 설정\n```java\nSystem.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\",\"6\");\n```\n\n2) 명시적 ForkJoinPool 사용\n```java\nForkJoinPool forkjoinPool = new ForkJoinPool(5);\nforkjoinPool.submit(() -> {\n\tlist.parallelStream().forEach(index -> {\n\t\tSystem.out.printIn(\"Thread : \" + Thread.currentThread().getName()\n             + \", index + \", \" + new Date());\n\t\ttry{\n\t\t\tThread.sleep(500);\n\t\t} catch (InterruptedException e){\n\t\t}\n\t});\n}).get();\n```\n\nForkJoinPool 생성자에 Thread 개수를 지정해서 사용할 수 있다.\n\nForkJoinPool\n![](/images/java/stream/fork_join.jpg)\n\n기본적으로는 ExecutorService의 구현체이지만,  다른 점은 각 thread들이 개별 큐를 가지게 되며, \n다음 그림의 B처럼 아무런 task가 없으면 A의 task를 가져와 처리하게 됨으로써 \nCPU 자원을 효율적으로 사용할 수 있게 된다.\n\n![](/images/java/stream/fork_join_queue.jpg)\n\nForkJoinPool의 특성상 나누어지는 Job은 균등하게 처리가 되어야 한다.\nSpliterator의 trySplit()을 사용해 작업을 분할 하는데 균등하지 않으면 순차적으로 실행하는 것보다 비효율적일 수 있다.\n```java\npublic Spliterator<T> trySplit() {\n    int lo = index, mid = (lo + fence) >>> 1;\n    return (lo >= mid)\n           ? null\n           : new ArraySpliterator<>(array,\n                                    lo, index = mid,\n                                    characteristics);\n}\n```\n\n또한, 병렬로 처리되는 작업이 독립적이지 않다면, 수행 성능에 영향이 있을 수 있다.\nstream의 중간 단계 연산 중 sorted(), distinct()와 같은 작업을 수행하는 경우에는 \n내부적으로 상태에 대한 변수를 각 작업들이 공유(synchronized)하게 되어 있다. \n이럴때 순차적으로 실행하는 경우가 더 효과적일 수 있다.\n\n참고\nhttp://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html ","slug":"java-stream-parallel","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj6000p9zbp0yuu3yhm","content":"<p>Java 8의 변경 사항중 하나인 lambda를 효과적으로 사용할 수 있도록 collection들은 stream을 제공한다.<br>stream interface는 collection을 파이프식으로 처리 가능하도록 고차함수로 그 구조를 추상화 했다.</p>\n<p>스트림을 사용하면서, 반복적인 형번환 소스코드를 간편하게 처리 할 수 있게 되었고, 가독성 또한 높아졌다. 만<br>또한 병렬연산을 쉽게 지원할 수 있게 도와주니 매력적으로 보인다.</p>\n<p>하지만 Thread Pool을 직접 지정하는 이전 소스코드에 비해 Java 내부에 존재하는 공유  CommonPorkJoinPool 을 사용하기 때문에<br>여러개의 Thread가 일을 수행하는 Web Project의 경우에는 공유 Thread Pool의 Thread가 모자랄수 있다.<br>Java는 내부적으로 Parallel Stream이 CommonPorkJoinPool을 가지고 있고 내부 Thread의 수를 해당 머신의 프로세서의 개수로 처음에 만들어 시작한다.</p>\n<p>그래서 Property로 Thread의 수를 지정하거나 ForkJoinPool을 명시적으로 사용해 parallelStream을 처리할 수 있게 할 수 있다.</p>\n<p>1) Property 설정</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>,<span class=\"string\">\"6\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2) 명시적 ForkJoinPool 사용</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ForkJoinPool forkjoinPool = <span class=\"keyword\">new</span> ForkJoinPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">forkjoinPool.submit(() -&gt; &#123;</span><br><span class=\"line\">\tlist.parallelStream().forEach(index -&gt; &#123;</span><br><span class=\"line\">\t\tSystem.out.printIn(<span class=\"string\">\"Thread : \"</span> + Thread.currentThread().getName()</span><br><span class=\"line\">             + <span class=\"string\">\", index + \"</span>, <span class=\"string\">\" + new Date());</span></span><br><span class=\"line\"><span class=\"string\">\t\ttry&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tThread.sleep(500);</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125; catch (InterruptedException e)&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;).get();</span></span><br></pre></td></tr></table></figure>\n\n<p>ForkJoinPool 생성자에 Thread 개수를 지정해서 사용할 수 있다.</p>\n<p>ForkJoinPool<br><img src=\"/images/java/stream/fork_join.jpg\" alt=\"\"></p>\n<p>기본적으로는 ExecutorService의 구현체이지만,  다른 점은 각 thread들이 개별 큐를 가지게 되며,<br>다음 그림의 B처럼 아무런 task가 없으면 A의 task를 가져와 처리하게 됨으로써<br>CPU 자원을 효율적으로 사용할 수 있게 된다.</p>\n<p><img src=\"/images/java/stream/fork_join_queue.jpg\" alt=\"\"></p>\n<p>ForkJoinPool의 특성상 나누어지는 Job은 균등하게 처리가 되어야 한다.<br>Spliterator의 trySplit()을 사용해 작업을 분할 하는데 균등하지 않으면 순차적으로 실행하는 것보다 비효율적일 수 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Spliterator&lt;T&gt; <span class=\"title\">trySplit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = index, mid = (lo + fence) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (lo &gt;= mid)</span><br><span class=\"line\">           ? <span class=\"keyword\">null</span></span><br><span class=\"line\">           : <span class=\"keyword\">new</span> ArraySpliterator&lt;&gt;(array,</span><br><span class=\"line\">                                    lo, index = mid,</span><br><span class=\"line\">                                    characteristics);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>또한, 병렬로 처리되는 작업이 독립적이지 않다면, 수행 성능에 영향이 있을 수 있다.<br>stream의 중간 단계 연산 중 sorted(), distinct()와 같은 작업을 수행하는 경우에는<br>내부적으로 상태에 대한 변수를 각 작업들이 공유(synchronized)하게 되어 있다.<br>이럴때 순차적으로 실행하는 경우가 더 효과적일 수 있다.</p>\n<p>참고<br><a href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java 8의 변경 사항중 하나인 lambda를 효과적으로 사용할 수 있도록 collection들은 stream을 제공한다.<br>stream interface는 collection을 파이프식으로 처리 가능하도록 고차함수로 그 구조를 추상화 했다.</p>\n<p>스트림을 사용하면서, 반복적인 형번환 소스코드를 간편하게 처리 할 수 있게 되었고, 가독성 또한 높아졌다. 만<br>또한 병렬연산을 쉽게 지원할 수 있게 도와주니 매력적으로 보인다.</p>\n<p>하지만 Thread Pool을 직접 지정하는 이전 소스코드에 비해 Java 내부에 존재하는 공유  CommonPorkJoinPool 을 사용하기 때문에<br>여러개의 Thread가 일을 수행하는 Web Project의 경우에는 공유 Thread Pool의 Thread가 모자랄수 있다.<br>Java는 내부적으로 Parallel Stream이 CommonPorkJoinPool을 가지고 있고 내부 Thread의 수를 해당 머신의 프로세서의 개수로 처음에 만들어 시작한다.</p>\n<p>그래서 Property로 Thread의 수를 지정하거나 ForkJoinPool을 명시적으로 사용해 parallelStream을 처리할 수 있게 할 수 있다.</p>\n<p>1) Property 설정</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>,<span class=\"string\">\"6\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2) 명시적 ForkJoinPool 사용</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ForkJoinPool forkjoinPool = <span class=\"keyword\">new</span> ForkJoinPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">forkjoinPool.submit(() -&gt; &#123;</span><br><span class=\"line\">\tlist.parallelStream().forEach(index -&gt; &#123;</span><br><span class=\"line\">\t\tSystem.out.printIn(<span class=\"string\">\"Thread : \"</span> + Thread.currentThread().getName()</span><br><span class=\"line\">             + <span class=\"string\">\", index + \"</span>, <span class=\"string\">\" + new Date());</span></span><br><span class=\"line\"><span class=\"string\">\t\ttry&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tThread.sleep(500);</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125; catch (InterruptedException e)&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"string\">&#125;).get();</span></span><br></pre></td></tr></table></figure>\n\n<p>ForkJoinPool 생성자에 Thread 개수를 지정해서 사용할 수 있다.</p>\n<p>ForkJoinPool<br><img src=\"/images/java/stream/fork_join.jpg\" alt=\"\"></p>\n<p>기본적으로는 ExecutorService의 구현체이지만,  다른 점은 각 thread들이 개별 큐를 가지게 되며,<br>다음 그림의 B처럼 아무런 task가 없으면 A의 task를 가져와 처리하게 됨으로써<br>CPU 자원을 효율적으로 사용할 수 있게 된다.</p>\n<p><img src=\"/images/java/stream/fork_join_queue.jpg\" alt=\"\"></p>\n<p>ForkJoinPool의 특성상 나누어지는 Job은 균등하게 처리가 되어야 한다.<br>Spliterator의 trySplit()을 사용해 작업을 분할 하는데 균등하지 않으면 순차적으로 실행하는 것보다 비효율적일 수 있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Spliterator&lt;T&gt; <span class=\"title\">trySplit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lo = index, mid = (lo + fence) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (lo &gt;= mid)</span><br><span class=\"line\">           ? <span class=\"keyword\">null</span></span><br><span class=\"line\">           : <span class=\"keyword\">new</span> ArraySpliterator&lt;&gt;(array,</span><br><span class=\"line\">                                    lo, index = mid,</span><br><span class=\"line\">                                    characteristics);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>또한, 병렬로 처리되는 작업이 독립적이지 않다면, 수행 성능에 영향이 있을 수 있다.<br>stream의 중간 단계 연산 중 sorted(), distinct()와 같은 작업을 수행하는 경우에는<br>내부적으로 상태에 대한 변수를 각 작업들이 공유(synchronized)하게 되어 있다.<br>이럴때 순차적으로 실행하는 경우가 더 효과적일 수 있다.</p>\n<p>참고<br><a href=\"http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html\">http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html</a> </p>\n"},{"title":"java-stream","date":"2020-02-19T12:01:08.000Z","_content":"\n스트림의 중개 연산(intermediate operation)\n스트림 API에 의해 생성된 초기 스트림은 중개 연산을 통해 또 다른 스트림으로 변환됩니다.\n이러한 중개 연산은 스트림을 전달받아 스트림을 반환하므로, 중개 연산은 연속으로 연결해서 사용할 수 있습니다.\n또한, 스트림의 중개 연산은 필터-맵(filter-map) 기반의 API를 사용함으로 지연(lazy) 연산을 통해 성능을 최적화할 수 있습니다.\n\n1. 스트림 필터링 : filter(), distinct()\n2. 스트림 변환 : map(), flatMap(), boxed()\n3. 스트림 제한 : limit(), skip()\n4. 스트림 정렬 : sorted()\n5. 스트림 연산 결과 확인 : peek()\n6. 스트림 반복 : forEach()\n7. 스트림 매칭 : allMatch() => 전부 만족, anyMatch() => 최소 한개가 조건 만족, noneMatch() => 모두 불만족\n8. 스트림 집계 : sum(), count(), average(), max(), min() / reduce()\npeek의 경우는 특수하게 동작하는데 중간 처리 단계에서 전체 요소를 루핑하고, 추가적 작업을 위해 사용하며 최종 처리 메소드가 호출 되어야만 동작한다.\n이중 스트림을 반복처리하는 forEach()는 최종 처리 메소드로 파이프 라인 마지막에 루핑하여 요소를 하나씩 처리한다.\n최종 처리 메소드 뒤에는 sum() 같은 최종 처리 메소드가 호출되면 안된다.","source":"_posts/java-stream.md","raw":"---\ntitle: java-stream\ndate: 2020-02-19 21:01:08\ntags:\n---\n\n스트림의 중개 연산(intermediate operation)\n스트림 API에 의해 생성된 초기 스트림은 중개 연산을 통해 또 다른 스트림으로 변환됩니다.\n이러한 중개 연산은 스트림을 전달받아 스트림을 반환하므로, 중개 연산은 연속으로 연결해서 사용할 수 있습니다.\n또한, 스트림의 중개 연산은 필터-맵(filter-map) 기반의 API를 사용함으로 지연(lazy) 연산을 통해 성능을 최적화할 수 있습니다.\n\n1. 스트림 필터링 : filter(), distinct()\n2. 스트림 변환 : map(), flatMap(), boxed()\n3. 스트림 제한 : limit(), skip()\n4. 스트림 정렬 : sorted()\n5. 스트림 연산 결과 확인 : peek()\n6. 스트림 반복 : forEach()\n7. 스트림 매칭 : allMatch() => 전부 만족, anyMatch() => 최소 한개가 조건 만족, noneMatch() => 모두 불만족\n8. 스트림 집계 : sum(), count(), average(), max(), min() / reduce()\npeek의 경우는 특수하게 동작하는데 중간 처리 단계에서 전체 요소를 루핑하고, 추가적 작업을 위해 사용하며 최종 처리 메소드가 호출 되어야만 동작한다.\n이중 스트림을 반복처리하는 forEach()는 최종 처리 메소드로 파이프 라인 마지막에 루핑하여 요소를 하나씩 처리한다.\n최종 처리 메소드 뒤에는 sum() 같은 최종 처리 메소드가 호출되면 안된다.","slug":"java-stream","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj7000q9zbpcbu6be37","content":"<p>스트림의 중개 연산(intermediate operation)<br>스트림 API에 의해 생성된 초기 스트림은 중개 연산을 통해 또 다른 스트림으로 변환됩니다.<br>이러한 중개 연산은 스트림을 전달받아 스트림을 반환하므로, 중개 연산은 연속으로 연결해서 사용할 수 있습니다.<br>또한, 스트림의 중개 연산은 필터-맵(filter-map) 기반의 API를 사용함으로 지연(lazy) 연산을 통해 성능을 최적화할 수 있습니다.</p>\n<ol>\n<li>스트림 필터링 : filter(), distinct()</li>\n<li>스트림 변환 : map(), flatMap(), boxed()</li>\n<li>스트림 제한 : limit(), skip()</li>\n<li>스트림 정렬 : sorted()</li>\n<li>스트림 연산 결과 확인 : peek()</li>\n<li>스트림 반복 : forEach()</li>\n<li>스트림 매칭 : allMatch() =&gt; 전부 만족, anyMatch() =&gt; 최소 한개가 조건 만족, noneMatch() =&gt; 모두 불만족</li>\n<li>스트림 집계 : sum(), count(), average(), max(), min() / reduce()<br>peek의 경우는 특수하게 동작하는데 중간 처리 단계에서 전체 요소를 루핑하고, 추가적 작업을 위해 사용하며 최종 처리 메소드가 호출 되어야만 동작한다.<br>이중 스트림을 반복처리하는 forEach()는 최종 처리 메소드로 파이프 라인 마지막에 루핑하여 요소를 하나씩 처리한다.<br>최종 처리 메소드 뒤에는 sum() 같은 최종 처리 메소드가 호출되면 안된다.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>스트림의 중개 연산(intermediate operation)<br>스트림 API에 의해 생성된 초기 스트림은 중개 연산을 통해 또 다른 스트림으로 변환됩니다.<br>이러한 중개 연산은 스트림을 전달받아 스트림을 반환하므로, 중개 연산은 연속으로 연결해서 사용할 수 있습니다.<br>또한, 스트림의 중개 연산은 필터-맵(filter-map) 기반의 API를 사용함으로 지연(lazy) 연산을 통해 성능을 최적화할 수 있습니다.</p>\n<ol>\n<li>스트림 필터링 : filter(), distinct()</li>\n<li>스트림 변환 : map(), flatMap(), boxed()</li>\n<li>스트림 제한 : limit(), skip()</li>\n<li>스트림 정렬 : sorted()</li>\n<li>스트림 연산 결과 확인 : peek()</li>\n<li>스트림 반복 : forEach()</li>\n<li>스트림 매칭 : allMatch() =&gt; 전부 만족, anyMatch() =&gt; 최소 한개가 조건 만족, noneMatch() =&gt; 모두 불만족</li>\n<li>스트림 집계 : sum(), count(), average(), max(), min() / reduce()<br>peek의 경우는 특수하게 동작하는데 중간 처리 단계에서 전체 요소를 루핑하고, 추가적 작업을 위해 사용하며 최종 처리 메소드가 호출 되어야만 동작한다.<br>이중 스트림을 반복처리하는 forEach()는 최종 처리 메소드로 파이프 라인 마지막에 루핑하여 요소를 하나씩 처리한다.<br>최종 처리 메소드 뒤에는 sum() 같은 최종 처리 메소드가 호출되면 안된다.</li>\n</ol>\n"},{"title":"project-start-materials","date":"2020-03-01T11:26:59.000Z","_content":"## Jenkins\n\nCI/CD 환경을 만들기 위해서 가장 익숙한 도구를 사용했다.\nwar파일을 받아 실행만 하면 매우 쉽기 때문에 설치해서 사용하려고 한다.\n\n```shell script\n#!/bin/bash\n\nexport HTTP_PORT=9090\nexport JENKINS_HOME=~/project/jenkins/jenkins_home\n\nnohup java -jar jenkins.war --httpPort=$HTTP_PORT --sessionTimeout=120 -XX:+AggressiveOpts >> ./logs/jenkins.log 2>&1 &\n```\n\n아무 설정도 하지 않으면 JENKINS_HOME을 기본적으로 홈의 .jenkins 폴더에 구성하기 떄문에 Jenkins_home을 지정해주고,\nPort 설정을 하지 않으면 8080 포트로 기동 되기에 HTTP_PORT 를 변경할 수 있도록 한다.\n그리고 기동 후 $JENKINS_HOME/secrets/initialAdminPassword 를 물어보기 때문에 이를 넣고 기동하도록 하자\n\n## Docker\n\nDocker를 이용한 Container 배포를 하기 위해 로컬에서 Docker를 사용할 수 있도록 설치 해보자\nhttps://docs.docker.com/install/linux/docker-ce/ubuntu/ 에 매우 잘 나와 있다.\n### SET UP THE REPOSITORY\n\n1. update the apt package index :\n```shell script\napt update\n```    \n\n2. Install packages to allow apt to use a repository over HTTPS:\n```shell script\nsudo apt-get install \\\n     apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg-agent \\\n     software-properties-common\n```\n\n3. Add Docker’s official GPG key:\nGPG(PGP)는 암호화 프로그램으로 RSA 방식을 사용하며 주로 이메일을 암호화 하는데 사용된다.\n ```shell script\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo apt-key fingerprint 0EBFCD88\n```\n\n4. Set up the stable repository\nlsb_release -cs 는 Ubuntu distribution 정보를 알수 있다.\n- Eoan 19.10\n- Bionic 18.04 (LTS)\n- Xenial 16.04 (LTS)\n\n```shell script\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n### INSTALL DOCKER ENGINE - COMMUNITY\n\n1. Update the apt package index.\n```shell script\nsudo apt update\n```\n\n2. Install the latest version of Docker Engine - Community and containerd, or go to the next step to install a specific version:\n```shell script\nsudo apt install docker-ce docker-ce-cli containerd.io\n```   \n\n3. Verify that Docker Engine\n```shell script\nsudo docker run hello-world\n```\n\n4. 확인\n```shell script\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:fc6a51919cfeb2e6763f62b6d9e8815acbf7cd2e476ea353743570610737b752\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n```\n\n","source":"_posts/project-start-materials.md","raw":"---\ntitle: project-start-materials\ndate: 2020-03-01 20:26:59\ntags:\n---\n## Jenkins\n\nCI/CD 환경을 만들기 위해서 가장 익숙한 도구를 사용했다.\nwar파일을 받아 실행만 하면 매우 쉽기 때문에 설치해서 사용하려고 한다.\n\n```shell script\n#!/bin/bash\n\nexport HTTP_PORT=9090\nexport JENKINS_HOME=~/project/jenkins/jenkins_home\n\nnohup java -jar jenkins.war --httpPort=$HTTP_PORT --sessionTimeout=120 -XX:+AggressiveOpts >> ./logs/jenkins.log 2>&1 &\n```\n\n아무 설정도 하지 않으면 JENKINS_HOME을 기본적으로 홈의 .jenkins 폴더에 구성하기 떄문에 Jenkins_home을 지정해주고,\nPort 설정을 하지 않으면 8080 포트로 기동 되기에 HTTP_PORT 를 변경할 수 있도록 한다.\n그리고 기동 후 $JENKINS_HOME/secrets/initialAdminPassword 를 물어보기 때문에 이를 넣고 기동하도록 하자\n\n## Docker\n\nDocker를 이용한 Container 배포를 하기 위해 로컬에서 Docker를 사용할 수 있도록 설치 해보자\nhttps://docs.docker.com/install/linux/docker-ce/ubuntu/ 에 매우 잘 나와 있다.\n### SET UP THE REPOSITORY\n\n1. update the apt package index :\n```shell script\napt update\n```    \n\n2. Install packages to allow apt to use a repository over HTTPS:\n```shell script\nsudo apt-get install \\\n     apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg-agent \\\n     software-properties-common\n```\n\n3. Add Docker’s official GPG key:\nGPG(PGP)는 암호화 프로그램으로 RSA 방식을 사용하며 주로 이메일을 암호화 하는데 사용된다.\n ```shell script\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo apt-key fingerprint 0EBFCD88\n```\n\n4. Set up the stable repository\nlsb_release -cs 는 Ubuntu distribution 정보를 알수 있다.\n- Eoan 19.10\n- Bionic 18.04 (LTS)\n- Xenial 16.04 (LTS)\n\n```shell script\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n### INSTALL DOCKER ENGINE - COMMUNITY\n\n1. Update the apt package index.\n```shell script\nsudo apt update\n```\n\n2. Install the latest version of Docker Engine - Community and containerd, or go to the next step to install a specific version:\n```shell script\nsudo apt install docker-ce docker-ce-cli containerd.io\n```   \n\n3. Verify that Docker Engine\n```shell script\nsudo docker run hello-world\n```\n\n4. 확인\n```shell script\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:fc6a51919cfeb2e6763f62b6d9e8815acbf7cd2e476ea353743570610737b752\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n```\n\n","slug":"project-start-materials","published":1,"updated":"2020-03-01T12:50:25.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj7000r9zbp3rslchgi","content":"<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>CI/CD 환경을 만들기 위해서 가장 익숙한 도구를 사용했다.<br>war파일을 받아 실행만 하면 매우 쉽기 때문에 설치해서 사용하려고 한다.</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">export HTTP_PORT=9090</span><br><span class=\"line\">export JENKINS_HOME=~/project/jenkins/jenkins_home</span><br><span class=\"line\"></span><br><span class=\"line\">nohup java -jar jenkins.war --httpPort=$HTTP_PORT --sessionTimeout=120 -XX:+AggressiveOpts &gt;&gt; ./logs/jenkins.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>아무 설정도 하지 않으면 JENKINS_HOME을 기본적으로 홈의 .jenkins 폴더에 구성하기 떄문에 Jenkins_home을 지정해주고,<br>Port 설정을 하지 않으면 8080 포트로 기동 되기에 HTTP_PORT 를 변경할 수 있도록 한다.<br>그리고 기동 후 $JENKINS_HOME/secrets/initialAdminPassword 를 물어보기 때문에 이를 넣고 기동하도록 하자</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>Docker를 이용한 Container 배포를 하기 위해 로컬에서 Docker를 사용할 수 있도록 설치 해보자<br><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a> 에 매우 잘 나와 있다.</p>\n<h3 id=\"SET-UP-THE-REPOSITORY\"><a href=\"#SET-UP-THE-REPOSITORY\" class=\"headerlink\" title=\"SET UP THE REPOSITORY\"></a>SET UP THE REPOSITORY</h3><ol>\n<li><p>update the apt package index :</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\">2. Install packages to allow apt to use a repository over HTTPS:</span><br><span class=\"line\">```shell script</span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">     apt-transport-https \\</span><br><span class=\"line\">     ca-certificates \\</span><br><span class=\"line\">     curl \\</span><br><span class=\"line\">     gnupg-agent \\</span><br><span class=\"line\">     software-properties-common</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add Docker’s official GPG key:<br>GPG(PGP)는 암호화 프로그램으로 RSA 방식을 사용하며 주로 이메일을 암호화 하는데 사용된다.</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Set up the stable repository<br>lsb_release -cs 는 Ubuntu distribution 정보를 알수 있다.</p>\n</li>\n</ol>\n<ul>\n<li>Eoan 19.10</li>\n<li>Bionic 18.04 (LTS)</li>\n<li>Xenial 16.04 (LTS)</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INSTALL-DOCKER-ENGINE-COMMUNITY\"><a href=\"#INSTALL-DOCKER-ENGINE-COMMUNITY\" class=\"headerlink\" title=\"INSTALL DOCKER ENGINE - COMMUNITY\"></a>INSTALL DOCKER ENGINE - COMMUNITY</h3><ol>\n<li><p>Update the apt package index.</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Install the latest version of Docker Engine - Community and containerd, or go to the next step to install a specific version:</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">3. Verify that Docker Engine</span><br><span class=\"line\">```shell script</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>확인</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to find image 'hello-world:latest' locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">1b930d010525: Pull complete </span><br><span class=\"line\">Digest: sha256:fc6a51919cfeb2e6763f62b6d9e8815acbf7cd2e476ea353743570610737b752</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"><span class=\"meta\"> $</span><span class=\"bash\"> docker run -it ubuntu bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>CI/CD 환경을 만들기 위해서 가장 익숙한 도구를 사용했다.<br>war파일을 받아 실행만 하면 매우 쉽기 때문에 설치해서 사용하려고 한다.</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">export HTTP_PORT=9090</span><br><span class=\"line\">export JENKINS_HOME=~/project/jenkins/jenkins_home</span><br><span class=\"line\"></span><br><span class=\"line\">nohup java -jar jenkins.war --httpPort=$HTTP_PORT --sessionTimeout=120 -XX:+AggressiveOpts &gt;&gt; ./logs/jenkins.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>아무 설정도 하지 않으면 JENKINS_HOME을 기본적으로 홈의 .jenkins 폴더에 구성하기 떄문에 Jenkins_home을 지정해주고,<br>Port 설정을 하지 않으면 8080 포트로 기동 되기에 HTTP_PORT 를 변경할 수 있도록 한다.<br>그리고 기동 후 $JENKINS_HOME/secrets/initialAdminPassword 를 물어보기 때문에 이를 넣고 기동하도록 하자</p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>Docker를 이용한 Container 배포를 하기 위해 로컬에서 Docker를 사용할 수 있도록 설치 해보자<br><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a> 에 매우 잘 나와 있다.</p>\n<h3 id=\"SET-UP-THE-REPOSITORY\"><a href=\"#SET-UP-THE-REPOSITORY\" class=\"headerlink\" title=\"SET UP THE REPOSITORY\"></a>SET UP THE REPOSITORY</h3><ol>\n<li><p>update the apt package index :</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt update</span><br><span class=\"line\">```    </span><br><span class=\"line\"></span><br><span class=\"line\">2. Install packages to allow apt to use a repository over HTTPS:</span><br><span class=\"line\">```shell script</span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">     apt-transport-https \\</span><br><span class=\"line\">     ca-certificates \\</span><br><span class=\"line\">     curl \\</span><br><span class=\"line\">     gnupg-agent \\</span><br><span class=\"line\">     software-properties-common</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Add Docker’s official GPG key:<br>GPG(PGP)는 암호화 프로그램으로 RSA 방식을 사용하며 주로 이메일을 암호화 하는데 사용된다.</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Set up the stable repository<br>lsb_release -cs 는 Ubuntu distribution 정보를 알수 있다.</p>\n</li>\n</ol>\n<ul>\n<li>Eoan 19.10</li>\n<li>Bionic 18.04 (LTS)</li>\n<li>Xenial 16.04 (LTS)</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INSTALL-DOCKER-ENGINE-COMMUNITY\"><a href=\"#INSTALL-DOCKER-ENGINE-COMMUNITY\" class=\"headerlink\" title=\"INSTALL DOCKER ENGINE - COMMUNITY\"></a>INSTALL DOCKER ENGINE - COMMUNITY</h3><ol>\n<li><p>Update the apt package index.</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Install the latest version of Docker Engine - Community and containerd, or go to the next step to install a specific version:</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">3. Verify that Docker Engine</span><br><span class=\"line\">```shell script</span><br><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>확인</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable to find image 'hello-world:latest' locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">1b930d010525: Pull complete </span><br><span class=\"line\">Digest: sha256:fc6a51919cfeb2e6763f62b6d9e8815acbf7cd2e476ea353743570610737b752</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"><span class=\"meta\"> $</span><span class=\"bash\"> docker run -it ubuntu bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"next-generation-web-styling","date":"2019-12-13T05:08:15.000Z","_content":"Closed Caption (폐쇄 자막, 자막의 표시여부를 설정할 수 있는 자) \n## 1) Scroll-snap\n\n```css\nsection {\n    overflow-x: auto;\n    overscroll-behavior-y: contain;\n    scroll-snap-type: y mandatory;\n}\n\nsection > picture{\n    scroll-snap-align: center;\n}\n```\n\n### List with Sub-List HTML\n\n```html\n<ul>\n    <li><a herf=\"...\">One</a></li>\n    <li><a herf=\"...\" aria-haspopup=\"true\">TWO</a>\n        <ul class=\"\"dropdown\" aria-label=\"submenu\">\n            <li><a herf=\"...\">SUB-1</a></li>\n        </ul>\n    </li>\n</ul>\n```\n```css\nli:hover > el,\nli:focus > ul {\nvisibility: visible;\nopacity: 1;\n\n}\n```\n\n## 2) @media (prefers-*)\n### prefers-reduced-motion\n![](/images/next-generation-web-styling/prefer_1.png)\n![](/images/next-generation-web-styling/prefer_2.png)\n```css\n@media (prefers-reduced-motion: reduce) {\n    animation: cross-fade 3s ease-in-out infinite;\n\n}\n```\n\n### prefers-color-scheme\n```css\n@media(prefers-color-scheme: dark) {\n    --lightness: 90%;\n    --text-1: hsl(200 10% var(--lightness));\n}\n```\n\n## 3) Logical properties\n### new mental modal \nthe browser does all of that great work for you to make that website more internaltionalized.\n![](/images/next-generation-web-styling/localproperty_1.png)\n![](/images/next-generation-web-styling/localproperty_2.png)\n![](/images/next-generation-web-styling/localproperty_3.png)\n![](/images/next-generation-web-styling/localproperty_4.png)\n\n```css\n.box {  \n    block-size: 300px;\n    inline-size: 200px;\n}\n\n.h2, p {\n    // margin-left: 3rem;\n    margin-inline-start: 3rem;\n}\n\nmain {\n    //border-top: 2px dashed;\n    border-block-start: 2px dashed;\n    //margin-top: 3rem;\n    margin-block-start: 3rem;\n}\n```\nhttps://wit.nts-corp.com/2018/08/28/5317\n\n## 4) Sticky situations\n\nClassic sticky\nThe Sticky stack {CSS}\nUi layers overlap within the viewport\n\n```css\ndl > dt {\n    position: sticky;\n    top: 0;\n}\n```\n\n```html\n<dl>\n<dt>A</dt>\n...\n<dt>B</dt>\n</dl>\n```\n\nThe sticky Desperado {HTML}\n\n## 5) backdrop-filter\n```css\nelement.style {\n    backdrop-filter: blur(10px);\n}\n```\n\n## 6) :is()\n### any(), match()\n\n```css\nbutton:is(.focus, :focus) {\n    ...\n}\n\narticle > :is(h1,h2,h3,h4,h5,h6) {\n    ...\n}\n```\n\n## 7) grid gap gap (for Flexbox)\n\n```css\n.flex-button {\n    display: inline-flex;\n    gap: 1rem;\n    place-items: center;\n}\n```\n\n## 8) Houdini\n### low-level css \n\n![](/images/next-generation-web-styling/houdini_1.png)\n![](/images/next-generation-web-styling/houdini_2.png)\n\n\n## 9) Properties & Values API\n ![](/images/next-generation-web-styling/property_value_1.png)\n ![](/images/next-generation-web-styling/property_value_2.png)\n ![](/images/next-generation-web-styling/property_value_3.png)\n\n## 10) Typed OM\n ![](/images/next-generation-web-styling/typedOM_1.png)\n\n## 11) Paint API\n ![](/images/next-generation-web-styling/paintedAPI_1.png)\n ![](/images/next-generation-web-styling/paintedAPI_2.png)\n ![](/images/next-generation-web-styling/paintedAPI_3.png)\n ![](/images/next-generation-web-styling/paintedAPI_4.png)\n\n\n## 12) Animation Worklet\n ![](/images/next-generation-web-styling/animation_worklet_1.png)\n\n## Speed Round\n```css\n.box { size: 50vw; }\niframe { aspect-ratio: 16 / 9;}\n// min(),max(),clamp() \nh1 { font-size: clamp(1.5rem, 6vw);}\n\n\n```\n\nhttps://css-at-cds.netlify.com/","source":"_posts/next-generation-web-styling.md","raw":"---\ntitle: next-generation-web-styling\ndate: 2019-12-13 14:08:15\ntags:\n---\nClosed Caption (폐쇄 자막, 자막의 표시여부를 설정할 수 있는 자) \n## 1) Scroll-snap\n\n```css\nsection {\n    overflow-x: auto;\n    overscroll-behavior-y: contain;\n    scroll-snap-type: y mandatory;\n}\n\nsection > picture{\n    scroll-snap-align: center;\n}\n```\n\n### List with Sub-List HTML\n\n```html\n<ul>\n    <li><a herf=\"...\">One</a></li>\n    <li><a herf=\"...\" aria-haspopup=\"true\">TWO</a>\n        <ul class=\"\"dropdown\" aria-label=\"submenu\">\n            <li><a herf=\"...\">SUB-1</a></li>\n        </ul>\n    </li>\n</ul>\n```\n```css\nli:hover > el,\nli:focus > ul {\nvisibility: visible;\nopacity: 1;\n\n}\n```\n\n## 2) @media (prefers-*)\n### prefers-reduced-motion\n![](/images/next-generation-web-styling/prefer_1.png)\n![](/images/next-generation-web-styling/prefer_2.png)\n```css\n@media (prefers-reduced-motion: reduce) {\n    animation: cross-fade 3s ease-in-out infinite;\n\n}\n```\n\n### prefers-color-scheme\n```css\n@media(prefers-color-scheme: dark) {\n    --lightness: 90%;\n    --text-1: hsl(200 10% var(--lightness));\n}\n```\n\n## 3) Logical properties\n### new mental modal \nthe browser does all of that great work for you to make that website more internaltionalized.\n![](/images/next-generation-web-styling/localproperty_1.png)\n![](/images/next-generation-web-styling/localproperty_2.png)\n![](/images/next-generation-web-styling/localproperty_3.png)\n![](/images/next-generation-web-styling/localproperty_4.png)\n\n```css\n.box {  \n    block-size: 300px;\n    inline-size: 200px;\n}\n\n.h2, p {\n    // margin-left: 3rem;\n    margin-inline-start: 3rem;\n}\n\nmain {\n    //border-top: 2px dashed;\n    border-block-start: 2px dashed;\n    //margin-top: 3rem;\n    margin-block-start: 3rem;\n}\n```\nhttps://wit.nts-corp.com/2018/08/28/5317\n\n## 4) Sticky situations\n\nClassic sticky\nThe Sticky stack {CSS}\nUi layers overlap within the viewport\n\n```css\ndl > dt {\n    position: sticky;\n    top: 0;\n}\n```\n\n```html\n<dl>\n<dt>A</dt>\n...\n<dt>B</dt>\n</dl>\n```\n\nThe sticky Desperado {HTML}\n\n## 5) backdrop-filter\n```css\nelement.style {\n    backdrop-filter: blur(10px);\n}\n```\n\n## 6) :is()\n### any(), match()\n\n```css\nbutton:is(.focus, :focus) {\n    ...\n}\n\narticle > :is(h1,h2,h3,h4,h5,h6) {\n    ...\n}\n```\n\n## 7) grid gap gap (for Flexbox)\n\n```css\n.flex-button {\n    display: inline-flex;\n    gap: 1rem;\n    place-items: center;\n}\n```\n\n## 8) Houdini\n### low-level css \n\n![](/images/next-generation-web-styling/houdini_1.png)\n![](/images/next-generation-web-styling/houdini_2.png)\n\n\n## 9) Properties & Values API\n ![](/images/next-generation-web-styling/property_value_1.png)\n ![](/images/next-generation-web-styling/property_value_2.png)\n ![](/images/next-generation-web-styling/property_value_3.png)\n\n## 10) Typed OM\n ![](/images/next-generation-web-styling/typedOM_1.png)\n\n## 11) Paint API\n ![](/images/next-generation-web-styling/paintedAPI_1.png)\n ![](/images/next-generation-web-styling/paintedAPI_2.png)\n ![](/images/next-generation-web-styling/paintedAPI_3.png)\n ![](/images/next-generation-web-styling/paintedAPI_4.png)\n\n\n## 12) Animation Worklet\n ![](/images/next-generation-web-styling/animation_worklet_1.png)\n\n## Speed Round\n```css\n.box { size: 50vw; }\niframe { aspect-ratio: 16 / 9;}\n// min(),max(),clamp() \nh1 { font-size: clamp(1.5rem, 6vw);}\n\n\n```\n\nhttps://css-at-cds.netlify.com/","slug":"next-generation-web-styling","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttj9000s9zbp0kshg1xd","content":"<p>Closed Caption (폐쇄 자막, 자막의 표시여부를 설정할 수 있는 자) </p>\n<h2 id=\"1-Scroll-snap\"><a href=\"#1-Scroll-snap\" class=\"headerlink\" title=\"1) Scroll-snap\"></a>1) Scroll-snap</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">section</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">overscroll-behavior-y</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">scroll-snap-type</span>: y mandatory;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">section</span> &gt; <span class=\"selector-tag\">picture</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">scroll-snap-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"List-with-Sub-List-HTML\"><a href=\"#List-with-Sub-List-HTML\" class=\"headerlink\" title=\"List with Sub-List HTML\"></a>List with Sub-List HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">\"...\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">\"...\"</span> <span class=\"attr\">aria-haspopup</span>=<span class=\"string\">\"true\"</span>&gt;</span>TWO<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span><span class=\"attr\">dropdown</span>\" <span class=\"attr\">aria-label</span>=<span class=\"string\">\"submenu\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">\"...\"</span>&gt;</span>SUB-1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> &gt; <span class=\"selector-tag\">el</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:focus</span> &gt; <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">visibility</span>: visible;</span><br><span class=\"line\"><span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-media-prefers\"><a href=\"#2-media-prefers\" class=\"headerlink\" title=\"2) @media (prefers-*)\"></a>2) @media (prefers-*)</h2><h3 id=\"prefers-reduced-motion\"><a href=\"#prefers-reduced-motion\" class=\"headerlink\" title=\"prefers-reduced-motion\"></a>prefers-reduced-motion</h3><p><img src=\"/images/next-generation-web-styling/prefer_1.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/prefer_2.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-reduced-motion: reduce) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">cross-fade</span> 3<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-in-out</span> <span class=\"selector-tag\">infinite</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prefers-color-scheme\"><a href=\"#prefers-color-scheme\" class=\"headerlink\" title=\"prefers-color-scheme\"></a>prefers-color-scheme</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media(prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">--lightness</span>: 90%;</span><br><span class=\"line\">    <span class=\"selector-tag\">--text-1</span>: <span class=\"selector-tag\">hsl</span>(200 10% <span class=\"selector-tag\">var</span>(<span class=\"selector-tag\">--lightness</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Logical-properties\"><a href=\"#3-Logical-properties\" class=\"headerlink\" title=\"3) Logical properties\"></a>3) Logical properties</h2><h3 id=\"new-mental-modal\"><a href=\"#new-mental-modal\" class=\"headerlink\" title=\"new mental modal\"></a>new mental modal</h3><p>the browser does all of that great work for you to make that website more internaltionalized.<br><img src=\"/images/next-generation-web-styling/localproperty_1.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/localproperty_2.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/localproperty_3.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/localproperty_4.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;  </span><br><span class=\"line\">    <span class=\"attribute\">block-size</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">inline-size</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.h2</span>, <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    // margin-left: 3rem;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-inline-start</span>: 3<span class=\"selector-tag\">rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    //border-top: 2px dashed;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-block-start</span>: 2<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">dashed</span>;</span><br><span class=\"line\">    //margin-top: 3rem;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-block-start</span>: 3<span class=\"selector-tag\">rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://wit.nts-corp.com/2018/08/28/5317\">https://wit.nts-corp.com/2018/08/28/5317</a></p>\n<h2 id=\"4-Sticky-situations\"><a href=\"#4-Sticky-situations\" class=\"headerlink\" title=\"4) Sticky situations\"></a>4) Sticky situations</h2><p>Classic sticky<br>The Sticky stack {CSS}<br>Ui layers overlap within the viewport</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dl</span> &gt; <span class=\"selector-tag\">dt</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The sticky Desperado {HTML}</p>\n<h2 id=\"5-backdrop-filter\"><a href=\"#5-backdrop-filter\" class=\"headerlink\" title=\"5) backdrop-filter\"></a>5) backdrop-filter</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">element</span><span class=\"selector-class\">.style</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">backdrop-filter</span>: <span class=\"built_in\">blur</span>(10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-is\"><a href=\"#6-is\" class=\"headerlink\" title=\"6) :is()\"></a>6) :is()</h2><h3 id=\"any-match\"><a href=\"#any-match\" class=\"headerlink\" title=\"any(), match()\"></a>any(), match()</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">:is(.focus</span>, <span class=\"selector-pseudo\">:focus)</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span> &gt; <span class=\"selector-pseudo\">:is(h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-grid-gap-gap-for-Flexbox\"><a href=\"#7-grid-gap-gap-for-Flexbox\" class=\"headerlink\" title=\"7) grid gap gap (for Flexbox)\"></a>7) grid gap gap (for Flexbox)</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex-button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">    <span class=\"attribute\">gap</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">place-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Houdini\"><a href=\"#8-Houdini\" class=\"headerlink\" title=\"8) Houdini\"></a>8) Houdini</h2><h3 id=\"low-level-css\"><a href=\"#low-level-css\" class=\"headerlink\" title=\"low-level css\"></a>low-level css</h3><p><img src=\"/images/next-generation-web-styling/houdini_1.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/houdini_2.png\" alt=\"\"></p>\n<h2 id=\"9-Properties-amp-Values-API\"><a href=\"#9-Properties-amp-Values-API\" class=\"headerlink\" title=\"9) Properties &amp; Values API\"></a>9) Properties &amp; Values API</h2><p> <img src=\"/images/next-generation-web-styling/property_value_1.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/property_value_2.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/property_value_3.png\" alt=\"\"></p>\n<h2 id=\"10-Typed-OM\"><a href=\"#10-Typed-OM\" class=\"headerlink\" title=\"10) Typed OM\"></a>10) Typed OM</h2><p> <img src=\"/images/next-generation-web-styling/typedOM_1.png\" alt=\"\"></p>\n<h2 id=\"11-Paint-API\"><a href=\"#11-Paint-API\" class=\"headerlink\" title=\"11) Paint API\"></a>11) Paint API</h2><p> <img src=\"/images/next-generation-web-styling/paintedAPI_1.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/paintedAPI_2.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/paintedAPI_3.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/paintedAPI_4.png\" alt=\"\"></p>\n<h2 id=\"12-Animation-Worklet\"><a href=\"#12-Animation-Worklet\" class=\"headerlink\" title=\"12) Animation Worklet\"></a>12) Animation Worklet</h2><p> <img src=\"/images/next-generation-web-styling/animation_worklet_1.png\" alt=\"\"></p>\n<h2 id=\"Speed-Round\"><a href=\"#Speed-Round\" class=\"headerlink\" title=\"Speed Round\"></a>Speed Round</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123; <span class=\"attribute\">size</span>: <span class=\"number\">50vw</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">iframe</span> &#123; <span class=\"attribute\">aspect-ratio</span>: <span class=\"number\">16</span> / <span class=\"number\">9</span>;&#125;</span><br><span class=\"line\">// min(),max(),clamp() </span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"built_in\">clamp</span>(1.5rem, 6vw);&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://css-at-cds.netlify.com/\">https://css-at-cds.netlify.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Closed Caption (폐쇄 자막, 자막의 표시여부를 설정할 수 있는 자) </p>\n<h2 id=\"1-Scroll-snap\"><a href=\"#1-Scroll-snap\" class=\"headerlink\" title=\"1) Scroll-snap\"></a>1) Scroll-snap</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">section</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow-x</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">overscroll-behavior-y</span>: contain;</span><br><span class=\"line\">    <span class=\"attribute\">scroll-snap-type</span>: y mandatory;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">section</span> &gt; <span class=\"selector-tag\">picture</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">scroll-snap-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"List-with-Sub-List-HTML\"><a href=\"#List-with-Sub-List-HTML\" class=\"headerlink\" title=\"List with Sub-List HTML\"></a>List with Sub-List HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">\"...\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">\"...\"</span> <span class=\"attr\">aria-haspopup</span>=<span class=\"string\">\"true\"</span>&gt;</span>TWO<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span><span class=\"attr\">dropdown</span>\" <span class=\"attr\">aria-label</span>=<span class=\"string\">\"submenu\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">herf</span>=<span class=\"string\">\"...\"</span>&gt;</span>SUB-1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:hover</span> &gt; <span class=\"selector-tag\">el</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:focus</span> &gt; <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">visibility</span>: visible;</span><br><span class=\"line\"><span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-media-prefers\"><a href=\"#2-media-prefers\" class=\"headerlink\" title=\"2) @media (prefers-*)\"></a>2) @media (prefers-*)</h2><h3 id=\"prefers-reduced-motion\"><a href=\"#prefers-reduced-motion\" class=\"headerlink\" title=\"prefers-reduced-motion\"></a>prefers-reduced-motion</h3><p><img src=\"/images/next-generation-web-styling/prefer_1.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/prefer_2.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> (prefers-reduced-motion: reduce) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">cross-fade</span> 3<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-in-out</span> <span class=\"selector-tag\">infinite</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prefers-color-scheme\"><a href=\"#prefers-color-scheme\" class=\"headerlink\" title=\"prefers-color-scheme\"></a>prefers-color-scheme</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media(prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">--lightness</span>: 90%;</span><br><span class=\"line\">    <span class=\"selector-tag\">--text-1</span>: <span class=\"selector-tag\">hsl</span>(200 10% <span class=\"selector-tag\">var</span>(<span class=\"selector-tag\">--lightness</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Logical-properties\"><a href=\"#3-Logical-properties\" class=\"headerlink\" title=\"3) Logical properties\"></a>3) Logical properties</h2><h3 id=\"new-mental-modal\"><a href=\"#new-mental-modal\" class=\"headerlink\" title=\"new mental modal\"></a>new mental modal</h3><p>the browser does all of that great work for you to make that website more internaltionalized.<br><img src=\"/images/next-generation-web-styling/localproperty_1.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/localproperty_2.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/localproperty_3.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/localproperty_4.png\" alt=\"\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;  </span><br><span class=\"line\">    <span class=\"attribute\">block-size</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">inline-size</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.h2</span>, <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    // margin-left: 3rem;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-inline-start</span>: 3<span class=\"selector-tag\">rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">    //border-top: 2px dashed;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-block-start</span>: 2<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">dashed</span>;</span><br><span class=\"line\">    //margin-top: 3rem;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-block-start</span>: 3<span class=\"selector-tag\">rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://wit.nts-corp.com/2018/08/28/5317\">https://wit.nts-corp.com/2018/08/28/5317</a></p>\n<h2 id=\"4-Sticky-situations\"><a href=\"#4-Sticky-situations\" class=\"headerlink\" title=\"4) Sticky situations\"></a>4) Sticky situations</h2><p>Classic sticky<br>The Sticky stack {CSS}<br>Ui layers overlap within the viewport</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">dl</span> &gt; <span class=\"selector-tag\">dt</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>The sticky Desperado {HTML}</p>\n<h2 id=\"5-backdrop-filter\"><a href=\"#5-backdrop-filter\" class=\"headerlink\" title=\"5) backdrop-filter\"></a>5) backdrop-filter</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">element</span><span class=\"selector-class\">.style</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">backdrop-filter</span>: <span class=\"built_in\">blur</span>(10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-is\"><a href=\"#6-is\" class=\"headerlink\" title=\"6) :is()\"></a>6) :is()</h2><h3 id=\"any-match\"><a href=\"#any-match\" class=\"headerlink\" title=\"any(), match()\"></a>any(), match()</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">:is(.focus</span>, <span class=\"selector-pseudo\">:focus)</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span> &gt; <span class=\"selector-pseudo\">:is(h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-grid-gap-gap-for-Flexbox\"><a href=\"#7-grid-gap-gap-for-Flexbox\" class=\"headerlink\" title=\"7) grid gap gap (for Flexbox)\"></a>7) grid gap gap (for Flexbox)</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex-button</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">    <span class=\"attribute\">gap</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">place-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Houdini\"><a href=\"#8-Houdini\" class=\"headerlink\" title=\"8) Houdini\"></a>8) Houdini</h2><h3 id=\"low-level-css\"><a href=\"#low-level-css\" class=\"headerlink\" title=\"low-level css\"></a>low-level css</h3><p><img src=\"/images/next-generation-web-styling/houdini_1.png\" alt=\"\"><br><img src=\"/images/next-generation-web-styling/houdini_2.png\" alt=\"\"></p>\n<h2 id=\"9-Properties-amp-Values-API\"><a href=\"#9-Properties-amp-Values-API\" class=\"headerlink\" title=\"9) Properties &amp; Values API\"></a>9) Properties &amp; Values API</h2><p> <img src=\"/images/next-generation-web-styling/property_value_1.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/property_value_2.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/property_value_3.png\" alt=\"\"></p>\n<h2 id=\"10-Typed-OM\"><a href=\"#10-Typed-OM\" class=\"headerlink\" title=\"10) Typed OM\"></a>10) Typed OM</h2><p> <img src=\"/images/next-generation-web-styling/typedOM_1.png\" alt=\"\"></p>\n<h2 id=\"11-Paint-API\"><a href=\"#11-Paint-API\" class=\"headerlink\" title=\"11) Paint API\"></a>11) Paint API</h2><p> <img src=\"/images/next-generation-web-styling/paintedAPI_1.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/paintedAPI_2.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/paintedAPI_3.png\" alt=\"\"><br> <img src=\"/images/next-generation-web-styling/paintedAPI_4.png\" alt=\"\"></p>\n<h2 id=\"12-Animation-Worklet\"><a href=\"#12-Animation-Worklet\" class=\"headerlink\" title=\"12) Animation Worklet\"></a>12) Animation Worklet</h2><p> <img src=\"/images/next-generation-web-styling/animation_worklet_1.png\" alt=\"\"></p>\n<h2 id=\"Speed-Round\"><a href=\"#Speed-Round\" class=\"headerlink\" title=\"Speed Round\"></a>Speed Round</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123; <span class=\"attribute\">size</span>: <span class=\"number\">50vw</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">iframe</span> &#123; <span class=\"attribute\">aspect-ratio</span>: <span class=\"number\">16</span> / <span class=\"number\">9</span>;&#125;</span><br><span class=\"line\">// min(),max(),clamp() </span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"built_in\">clamp</span>(1.5rem, 6vw);&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://css-at-cds.netlify.com/\">https://css-at-cds.netlify.com/</a></p>\n"},{"title":"spring-application-run-listeners","date":"2019-12-19T06:33:04.000Z","_content":"\nSpring에서 사용하는 기본적인 Listeners 구현체\nSpringApplicationRunListener를 들고 있고 변경 불가능하게 되어있다.\n```java \nclass SpringApplicationRunListeners {\n\n\tprivate final Log log;\n\n\tprivate final List<SpringApplicationRunListener> listeners;\n\n\tSpringApplicationRunListeners(Log log, Collection<? extends SpringApplicationRunListener> listeners) {\n\t\tthis.log = log;\n\t\tthis.listeners = new ArrayList<>(listeners);\n\t}\n\n\tpublic void starting() {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.starting();\n\t\t}\n\t}\n\n\tpublic void environmentPrepared(ConfigurableEnvironment environment) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.environmentPrepared(environment);\n\t\t}\n\t}\n\n\tpublic void contextPrepared(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.contextPrepared(context);\n\t\t}\n\t}\n\n\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.contextLoaded(context);\n\t\t}\n\t}\n\n\tpublic void started(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.started(context);\n\t\t}\n\t}\n\n\tpublic void running(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.running(context);\n\t\t}\n\t}\n\n\tpublic void failed(ConfigurableApplicationContext context, Throwable exception) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tcallFailedListener(listener, context, exception);\n\t\t}\n\t}\n\n\tprivate void callFailedListener(SpringApplicationRunListener listener, ConfigurableApplicationContext context,\n\t\t\tThrowable exception) {\n\t\ttry {\n\t\t\tlistener.failed(context, exception);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tif (exception == null) {\n\t\t\t\tReflectionUtils.rethrowRuntimeException(ex);\n\t\t\t}\n\t\t\tif (this.log.isDebugEnabled()) {\n\t\t\t\tthis.log.error(\"Error handling failed\", ex);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString message = ex.getMessage();\n\t\t\t\tmessage = (message != null) ? message : \"no error message\";\n\t\t\t\tthis.log.warn(\"Error handling failed (\" + message + \")\");\n\t\t\t}\n\t\t}\n\t}\n\n}\n```\n\n","source":"_posts/spring-application-run-listeners.md","raw":"---\ntitle: spring-application-run-listeners\ndate: 2019-12-19 15:33:04\ntags: SpringBoot\n---\n\nSpring에서 사용하는 기본적인 Listeners 구현체\nSpringApplicationRunListener를 들고 있고 변경 불가능하게 되어있다.\n```java \nclass SpringApplicationRunListeners {\n\n\tprivate final Log log;\n\n\tprivate final List<SpringApplicationRunListener> listeners;\n\n\tSpringApplicationRunListeners(Log log, Collection<? extends SpringApplicationRunListener> listeners) {\n\t\tthis.log = log;\n\t\tthis.listeners = new ArrayList<>(listeners);\n\t}\n\n\tpublic void starting() {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.starting();\n\t\t}\n\t}\n\n\tpublic void environmentPrepared(ConfigurableEnvironment environment) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.environmentPrepared(environment);\n\t\t}\n\t}\n\n\tpublic void contextPrepared(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.contextPrepared(context);\n\t\t}\n\t}\n\n\tpublic void contextLoaded(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.contextLoaded(context);\n\t\t}\n\t}\n\n\tpublic void started(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.started(context);\n\t\t}\n\t}\n\n\tpublic void running(ConfigurableApplicationContext context) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.running(context);\n\t\t}\n\t}\n\n\tpublic void failed(ConfigurableApplicationContext context, Throwable exception) {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tcallFailedListener(listener, context, exception);\n\t\t}\n\t}\n\n\tprivate void callFailedListener(SpringApplicationRunListener listener, ConfigurableApplicationContext context,\n\t\t\tThrowable exception) {\n\t\ttry {\n\t\t\tlistener.failed(context, exception);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tif (exception == null) {\n\t\t\t\tReflectionUtils.rethrowRuntimeException(ex);\n\t\t\t}\n\t\t\tif (this.log.isDebugEnabled()) {\n\t\t\t\tthis.log.error(\"Error handling failed\", ex);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString message = ex.getMessage();\n\t\t\t\tmessage = (message != null) ? message : \"no error message\";\n\t\t\t\tthis.log.warn(\"Error handling failed (\" + message + \")\");\n\t\t\t}\n\t\t}\n\t}\n\n}\n```\n\n","slug":"spring-application-run-listeners","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttja000t9zbpbuoxemb3","content":"<p>Spring에서 사용하는 기본적인 Listeners 구현체<br>SpringApplicationRunListener를 들고 있고 변경 불가능하게 되어있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringApplicationRunListeners</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Log log;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.log = log;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.starting();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.environmentPrepared(environment);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.contextPrepared(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.contextLoaded(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">started</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.started(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">running</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.running(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tcallFailedListener(listener, context, exception);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">callFailedListener</span><span class=\"params\">(SpringApplicationRunListener listener, ConfigurableApplicationContext context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tThrowable exception)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlistener.failed(context, exception);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (exception == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tReflectionUtils.rethrowRuntimeException(ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.log.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.log.error(<span class=\"string\">\"Error handling failed\"</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tString message = ex.getMessage();</span><br><span class=\"line\">\t\t\t\tmessage = (message != <span class=\"keyword\">null</span>) ? message : <span class=\"string\">\"no error message\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.log.warn(<span class=\"string\">\"Error handling failed (\"</span> + message + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>Spring에서 사용하는 기본적인 Listeners 구현체<br>SpringApplicationRunListener를 들고 있고 변경 불가능하게 되어있다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringApplicationRunListeners</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Log log;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.log = log;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.starting();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.environmentPrepared(environment);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.contextPrepared(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.contextLoaded(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">started</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.started(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">running</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.running(context);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tcallFailedListener(listener, context, exception);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">callFailedListener</span><span class=\"params\">(SpringApplicationRunListener listener, ConfigurableApplicationContext context,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tThrowable exception)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tlistener.failed(context, exception);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (exception == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tReflectionUtils.rethrowRuntimeException(ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.log.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.log.error(<span class=\"string\">\"Error handling failed\"</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tString message = ex.getMessage();</span><br><span class=\"line\">\t\t\t\tmessage = (message != <span class=\"keyword\">null</span>) ? message : <span class=\"string\">\"no error message\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.log.warn(<span class=\"string\">\"Error handling failed (\"</span> + message + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"spring-boot-logging","date":"2020-02-18T12:23:27.000Z","_content":"\n스프링 부트에서는 로깅 설정을 자동적으로 지원한다.\nSLF4J를 사용한 로깅 파사드를 통해 구현체를 사용하게 되며 스프링부트의 기본은 logback으로 되어 있다.\nSpring Boot는 기존 Spring에서의 사용법과는 다르게 logback-spring.xml를 사용하도록 권장하고 있다.\n\n기존 logback과 다른점은 logback file 안에서 Spring context를 접근할 수 있다는 것이다.\n기존 logback은 파일이름으로 프로파일을 지정해 사용했던 반면, spring boot의 logback은 \n내부에서 프로파일에 대한 if문 처리를 해 파일 하나로 간단하게 관리할 수 있게 도와준다.\n\nhttps://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-logging\n상단 링크에 적혀있는 글이 매우 도움이 될 것이다.\n\n현재 프로젝트에서는 Spring-boot-starter-web을 기준으로 프로젝트를 진행하고 있다.\nhttps://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.2.4.RELEASE\n\n해당 spring-boot-starter-web은 내부에 spring-boot-starter를 참조하고 있고, \nspring-boot-starter는 spring-boot-starter-logging을 참조 하고 있어서 logback 이외에 다른 구현체를 사용하고 싶으면\nspring-boot-starter-logging을 exclude하고 다른 spring-boot-starter를 선언해주면 된다.\n\n","source":"_posts/spring-boot-logging.md","raw":"---\ntitle: spring-boot-logging\ndate: 2020-02-18 21:23:27\ntags:\n---\n\n스프링 부트에서는 로깅 설정을 자동적으로 지원한다.\nSLF4J를 사용한 로깅 파사드를 통해 구현체를 사용하게 되며 스프링부트의 기본은 logback으로 되어 있다.\nSpring Boot는 기존 Spring에서의 사용법과는 다르게 logback-spring.xml를 사용하도록 권장하고 있다.\n\n기존 logback과 다른점은 logback file 안에서 Spring context를 접근할 수 있다는 것이다.\n기존 logback은 파일이름으로 프로파일을 지정해 사용했던 반면, spring boot의 logback은 \n내부에서 프로파일에 대한 if문 처리를 해 파일 하나로 간단하게 관리할 수 있게 도와준다.\n\nhttps://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-logging\n상단 링크에 적혀있는 글이 매우 도움이 될 것이다.\n\n현재 프로젝트에서는 Spring-boot-starter-web을 기준으로 프로젝트를 진행하고 있다.\nhttps://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.2.4.RELEASE\n\n해당 spring-boot-starter-web은 내부에 spring-boot-starter를 참조하고 있고, \nspring-boot-starter는 spring-boot-starter-logging을 참조 하고 있어서 logback 이외에 다른 구현체를 사용하고 싶으면\nspring-boot-starter-logging을 exclude하고 다른 spring-boot-starter를 선언해주면 된다.\n\n","slug":"spring-boot-logging","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttja000u9zbpbexs6zwu","content":"<p>스프링 부트에서는 로깅 설정을 자동적으로 지원한다.<br>SLF4J를 사용한 로깅 파사드를 통해 구현체를 사용하게 되며 스프링부트의 기본은 logback으로 되어 있다.<br>Spring Boot는 기존 Spring에서의 사용법과는 다르게 logback-spring.xml를 사용하도록 권장하고 있다.</p>\n<p>기존 logback과 다른점은 logback file 안에서 Spring context를 접근할 수 있다는 것이다.<br>기존 logback은 파일이름으로 프로파일을 지정해 사용했던 반면, spring boot의 logback은<br>내부에서 프로파일에 대한 if문 처리를 해 파일 하나로 간단하게 관리할 수 있게 도와준다.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-logging\">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-logging</a><br>상단 링크에 적혀있는 글이 매우 도움이 될 것이다.</p>\n<p>현재 프로젝트에서는 Spring-boot-starter-web을 기준으로 프로젝트를 진행하고 있다.<br><a href=\"https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.2.4.RELEASE\">https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.2.4.RELEASE</a></p>\n<p>해당 spring-boot-starter-web은 내부에 spring-boot-starter를 참조하고 있고,<br>spring-boot-starter는 spring-boot-starter-logging을 참조 하고 있어서 logback 이외에 다른 구현체를 사용하고 싶으면<br>spring-boot-starter-logging을 exclude하고 다른 spring-boot-starter를 선언해주면 된다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>스프링 부트에서는 로깅 설정을 자동적으로 지원한다.<br>SLF4J를 사용한 로깅 파사드를 통해 구현체를 사용하게 되며 스프링부트의 기본은 logback으로 되어 있다.<br>Spring Boot는 기존 Spring에서의 사용법과는 다르게 logback-spring.xml를 사용하도록 권장하고 있다.</p>\n<p>기존 logback과 다른점은 logback file 안에서 Spring context를 접근할 수 있다는 것이다.<br>기존 logback은 파일이름으로 프로파일을 지정해 사용했던 반면, spring boot의 logback은<br>내부에서 프로파일에 대한 if문 처리를 해 파일 하나로 간단하게 관리할 수 있게 도와준다.</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-logging\">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-logging</a><br>상단 링크에 적혀있는 글이 매우 도움이 될 것이다.</p>\n<p>현재 프로젝트에서는 Spring-boot-starter-web을 기준으로 프로젝트를 진행하고 있다.<br><a href=\"https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.2.4.RELEASE\">https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.2.4.RELEASE</a></p>\n<p>해당 spring-boot-starter-web은 내부에 spring-boot-starter를 참조하고 있고,<br>spring-boot-starter는 spring-boot-starter-logging을 참조 하고 있어서 logback 이외에 다른 구현체를 사용하고 싶으면<br>spring-boot-starter-logging을 exclude하고 다른 spring-boot-starter를 선언해주면 된다.</p>\n"},{"title":"spring-initializer","date":"2019-12-20T05:18:24.000Z","_content":"\n1. An ApplicationStartingEvent is sent at the start of a run, but before any processing except the registration of listeners and initializers.\n2. An ApplicationEnvironmentPreparedEvent is sent when the Environment to be used in the context is known, but before the context is created.\n3. An ApplicationPreparedEvent is sent just before the refresh is started, but after bean definitions have been loaded.\n4. An ApplicationReadyEvent is sent after the refresh and any related callbacks have been processed to indicate the application is ready to service requests.\n5. An ApplicationFailedEvent is sent if there is an exception on startup.\n\n\n### 1. SharedMetadataReaderFactoryContextInitializer\n\n- initialize 함수가 호출되면 applicationContext에 PostProcessor로 CachingMetadataReaderFactoryPostProcessor를 등록한다.\n\n#### CachingMetadataReaderFactoryPostProcessor\n```java\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\t// Must happen before the ConfigurationClassPostProcessor is created\n\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t}\n```\n\t\n```java\npublic interface Ordered {\n\tint HIGHEST_PRECEDENCE = Integer.MIN_VALUE;\n\tint LOWEST_PRECEDENCE = Integer.MAX_VALUE;\n\tint getOrder();\n}\n```\n- ConfigurationClassPostProcessor가 생성되기전 반드시 수행되어야 하는 프로세서이다.\n- HIGHEST_PRECEDENCE의 값은 Integer.MIN_VALUE\n- register 수행시 BeanDefinitionRegistry에 BeanDefinition에 \n  \"org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory\"으로 BeanDefinition 등록\n\n####  ","source":"_posts/spring-initializer.md","raw":"---\ntitle: spring-initializer\ndate: 2019-12-20 14:18:24\ntags:\n---\n\n1. An ApplicationStartingEvent is sent at the start of a run, but before any processing except the registration of listeners and initializers.\n2. An ApplicationEnvironmentPreparedEvent is sent when the Environment to be used in the context is known, but before the context is created.\n3. An ApplicationPreparedEvent is sent just before the refresh is started, but after bean definitions have been loaded.\n4. An ApplicationReadyEvent is sent after the refresh and any related callbacks have been processed to indicate the application is ready to service requests.\n5. An ApplicationFailedEvent is sent if there is an exception on startup.\n\n\n### 1. SharedMetadataReaderFactoryContextInitializer\n\n- initialize 함수가 호출되면 applicationContext에 PostProcessor로 CachingMetadataReaderFactoryPostProcessor를 등록한다.\n\n#### CachingMetadataReaderFactoryPostProcessor\n```java\n\t\t@Override\n\t\tpublic int getOrder() {\n\t\t\t// Must happen before the ConfigurationClassPostProcessor is created\n\t\t\treturn Ordered.HIGHEST_PRECEDENCE;\n\t\t}\n```\n\t\n```java\npublic interface Ordered {\n\tint HIGHEST_PRECEDENCE = Integer.MIN_VALUE;\n\tint LOWEST_PRECEDENCE = Integer.MAX_VALUE;\n\tint getOrder();\n}\n```\n- ConfigurationClassPostProcessor가 생성되기전 반드시 수행되어야 하는 프로세서이다.\n- HIGHEST_PRECEDENCE의 값은 Integer.MIN_VALUE\n- register 수행시 BeanDefinitionRegistry에 BeanDefinition에 \n  \"org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory\"으로 BeanDefinition 등록\n\n####  ","slug":"spring-initializer","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttje000w9zbpdx0b9l5p","content":"<ol>\n<li>An ApplicationStartingEvent is sent at the start of a run, but before any processing except the registration of listeners and initializers.</li>\n<li>An ApplicationEnvironmentPreparedEvent is sent when the Environment to be used in the context is known, but before the context is created.</li>\n<li>An ApplicationPreparedEvent is sent just before the refresh is started, but after bean definitions have been loaded.</li>\n<li>An ApplicationReadyEvent is sent after the refresh and any related callbacks have been processed to indicate the application is ready to service requests.</li>\n<li>An ApplicationFailedEvent is sent if there is an exception on startup.</li>\n</ol>\n<h3 id=\"1-SharedMetadataReaderFactoryContextInitializer\"><a href=\"#1-SharedMetadataReaderFactoryContextInitializer\" class=\"headerlink\" title=\"1. SharedMetadataReaderFactoryContextInitializer\"></a>1. SharedMetadataReaderFactoryContextInitializer</h3><ul>\n<li>initialize 함수가 호출되면 applicationContext에 PostProcessor로 CachingMetadataReaderFactoryPostProcessor를 등록한다.</li>\n</ul>\n<h4 id=\"CachingMetadataReaderFactoryPostProcessor\"><a href=\"#CachingMetadataReaderFactoryPostProcessor\" class=\"headerlink\" title=\"CachingMetadataReaderFactoryPostProcessor\"></a>CachingMetadataReaderFactoryPostProcessor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Must happen before the ConfigurationClassPostProcessor is created</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> HIGHEST_PRECEDENCE = Integer.MIN_VALUE;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> LOWEST_PRECEDENCE = Integer.MAX_VALUE;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ConfigurationClassPostProcessor가 생성되기전 반드시 수행되어야 하는 프로세서이다.</li>\n<li>HIGHEST_PRECEDENCE의 값은 Integer.MIN_VALUE</li>\n<li>register 수행시 BeanDefinitionRegistry에 BeanDefinition에<br>“org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory”으로 BeanDefinition 등록</li>\n</ul>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4>","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>An ApplicationStartingEvent is sent at the start of a run, but before any processing except the registration of listeners and initializers.</li>\n<li>An ApplicationEnvironmentPreparedEvent is sent when the Environment to be used in the context is known, but before the context is created.</li>\n<li>An ApplicationPreparedEvent is sent just before the refresh is started, but after bean definitions have been loaded.</li>\n<li>An ApplicationReadyEvent is sent after the refresh and any related callbacks have been processed to indicate the application is ready to service requests.</li>\n<li>An ApplicationFailedEvent is sent if there is an exception on startup.</li>\n</ol>\n<h3 id=\"1-SharedMetadataReaderFactoryContextInitializer\"><a href=\"#1-SharedMetadataReaderFactoryContextInitializer\" class=\"headerlink\" title=\"1. SharedMetadataReaderFactoryContextInitializer\"></a>1. SharedMetadataReaderFactoryContextInitializer</h3><ul>\n<li>initialize 함수가 호출되면 applicationContext에 PostProcessor로 CachingMetadataReaderFactoryPostProcessor를 등록한다.</li>\n</ul>\n<h4 id=\"CachingMetadataReaderFactoryPostProcessor\"><a href=\"#CachingMetadataReaderFactoryPostProcessor\" class=\"headerlink\" title=\"CachingMetadataReaderFactoryPostProcessor\"></a>CachingMetadataReaderFactoryPostProcessor</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Must happen before the ConfigurationClassPostProcessor is created</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> HIGHEST_PRECEDENCE = Integer.MIN_VALUE;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> LOWEST_PRECEDENCE = Integer.MAX_VALUE;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getOrder</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ConfigurationClassPostProcessor가 생성되기전 반드시 수행되어야 하는 프로세서이다.</li>\n<li>HIGHEST_PRECEDENCE의 값은 Integer.MIN_VALUE</li>\n<li>register 수행시 BeanDefinitionRegistry에 BeanDefinition에<br>“org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory”으로 BeanDefinition 등록</li>\n</ul>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4>"},{"title":"spring-security","date":"2019-11-22T05:04:46.000Z","_content":"## Authentication Manager\n\nSpring Security에서는 AuthenticationManager라는 Interface가 존재하고 이를 구현하면 된다.\n웹 어플리케이션에서 보통 WebConfig를 설정하기 위해 extends 받는 객체가 WebSecurityConfigurerAdapter이며 \n이는 WebSecurityConfigurer를 구현한 것이다. \nInit함수 실행시 HttpSecurity를 생성하고 내부적으로 내부 init 함수 안에서 최초 1번 생성해서 반환하게 된다.\n\n## Provider Manager\nProvider Manager는 Request의 Authentication을 다루는 AuthenticationProvider를 관리하기 위한 manager이며, \n각각의 AuthenticationProvider의 구현에 따라 인증할 수 있는 범위가 넓어지며, \nDAO기반, LDAP기반, anonymous기반 등 여러가지 Provider를 관리할 수 있다. 만약 각 Provider에서 처리할 수 없고 null값이 나온다면\nProvider Manager는 ProviderNotFoundException을 Throw 해 처리한다.\n\n## Authentication - DaoAuthenticationProvider\n\nAuthentication의 간단한 구현체는 DaoAuthenticationProvider이며 이는 프레임워크에서 조기에 지원한 하나의 구현체입니다. \n```java\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n\tprivate static final String USER_NOT_FOUND_PASSWORD = \"userNotFoundPassword\";\n\n\tprivate PasswordEncoder passwordEncoder;\n\n\tprivate volatile String userNotFoundEncodedPassword;\n    ## UserDetailService\n\tprivate UserDetailsService userDetailsService;\n\n\tprivate UserDetailsPasswordService userDetailsPasswordService; \n```\n\nUserDetailService를 Injection받아 해당 유저가 올바른 유저인지 체크한다.\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n@Configuration\npublic class WebConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withUsername(\"user\").password(\"password\").roles(\"USER\").build());\n        return manager;\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.\n            authorizeRequests()\n            .antMatchers(\"/db-console/**\")\n            .permitAll().anyRequest().authenticated();\n        http.csrf().disable();\n        http.headers().frameOptions().disable();\n\n    }\n}\n```\n보통 테스트시에는 InMemoryUserDetailsManager를 UserDetailsService 빈으로 생성해 사용한다.\n인증을 성공한 이후 보안상의 문제로 인증된 Authentication 객체를 삭제한다고 한다. 허나 Stateless Application상의 성능 향상을 위해선 Cache가 필수이고\n이를 지원하기 위해 AuthenticationProvider에 캐쉬구현을 하거나 복사본을 만들어 놓고, eraseCredentialsAfterAuthentication Property를 disable 할수도 있다고 한다.\n자세한 사항은 Javadoc의 구현을 확인하라고 한다. \n\n### UserDetailService \n\n \n\n","source":"_posts/spring-security.md","raw":"---\ntitle: spring-security\ndate: 2019-11-22 14:04:46\ntags:\n---\n## Authentication Manager\n\nSpring Security에서는 AuthenticationManager라는 Interface가 존재하고 이를 구현하면 된다.\n웹 어플리케이션에서 보통 WebConfig를 설정하기 위해 extends 받는 객체가 WebSecurityConfigurerAdapter이며 \n이는 WebSecurityConfigurer를 구현한 것이다. \nInit함수 실행시 HttpSecurity를 생성하고 내부적으로 내부 init 함수 안에서 최초 1번 생성해서 반환하게 된다.\n\n## Provider Manager\nProvider Manager는 Request의 Authentication을 다루는 AuthenticationProvider를 관리하기 위한 manager이며, \n각각의 AuthenticationProvider의 구현에 따라 인증할 수 있는 범위가 넓어지며, \nDAO기반, LDAP기반, anonymous기반 등 여러가지 Provider를 관리할 수 있다. 만약 각 Provider에서 처리할 수 없고 null값이 나온다면\nProvider Manager는 ProviderNotFoundException을 Throw 해 처리한다.\n\n## Authentication - DaoAuthenticationProvider\n\nAuthentication의 간단한 구현체는 DaoAuthenticationProvider이며 이는 프레임워크에서 조기에 지원한 하나의 구현체입니다. \n```java\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n\tprivate static final String USER_NOT_FOUND_PASSWORD = \"userNotFoundPassword\";\n\n\tprivate PasswordEncoder passwordEncoder;\n\n\tprivate volatile String userNotFoundEncodedPassword;\n    ## UserDetailService\n\tprivate UserDetailsService userDetailsService;\n\n\tprivate UserDetailsPasswordService userDetailsPasswordService; \n```\n\nUserDetailService를 Injection받아 해당 유저가 올바른 유저인지 체크한다.\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\n\n@Configuration\npublic class WebConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withUsername(\"user\").password(\"password\").roles(\"USER\").build());\n        return manager;\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.\n            authorizeRequests()\n            .antMatchers(\"/db-console/**\")\n            .permitAll().anyRequest().authenticated();\n        http.csrf().disable();\n        http.headers().frameOptions().disable();\n\n    }\n}\n```\n보통 테스트시에는 InMemoryUserDetailsManager를 UserDetailsService 빈으로 생성해 사용한다.\n인증을 성공한 이후 보안상의 문제로 인증된 Authentication 객체를 삭제한다고 한다. 허나 Stateless Application상의 성능 향상을 위해선 Cache가 필수이고\n이를 지원하기 위해 AuthenticationProvider에 캐쉬구현을 하거나 복사본을 만들어 놓고, eraseCredentialsAfterAuthentication Property를 disable 할수도 있다고 한다.\n자세한 사항은 Javadoc의 구현을 확인하라고 한다. \n\n### UserDetailService \n\n \n\n","slug":"spring-security","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttjf000x9zbp4exj8p74","content":"<h2 id=\"Authentication-Manager\"><a href=\"#Authentication-Manager\" class=\"headerlink\" title=\"Authentication Manager\"></a>Authentication Manager</h2><p>Spring Security에서는 AuthenticationManager라는 Interface가 존재하고 이를 구현하면 된다.<br>웹 어플리케이션에서 보통 WebConfig를 설정하기 위해 extends 받는 객체가 WebSecurityConfigurerAdapter이며<br>이는 WebSecurityConfigurer를 구현한 것이다.<br>Init함수 실행시 HttpSecurity를 생성하고 내부적으로 내부 init 함수 안에서 최초 1번 생성해서 반환하게 된다.</p>\n<h2 id=\"Provider-Manager\"><a href=\"#Provider-Manager\" class=\"headerlink\" title=\"Provider Manager\"></a>Provider Manager</h2><p>Provider Manager는 Request의 Authentication을 다루는 AuthenticationProvider를 관리하기 위한 manager이며,<br>각각의 AuthenticationProvider의 구현에 따라 인증할 수 있는 범위가 넓어지며,<br>DAO기반, LDAP기반, anonymous기반 등 여러가지 Provider를 관리할 수 있다. 만약 각 Provider에서 처리할 수 없고 null값이 나온다면<br>Provider Manager는 ProviderNotFoundException을 Throw 해 처리한다.</p>\n<h2 id=\"Authentication-DaoAuthenticationProvider\"><a href=\"#Authentication-DaoAuthenticationProvider\" class=\"headerlink\" title=\"Authentication - DaoAuthenticationProvider\"></a>Authentication - DaoAuthenticationProvider</h2><p>Authentication의 간단한 구현체는 DaoAuthenticationProvider이며 이는 프레임워크에서 조기에 지원한 하나의 구현체입니다. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoAuthenticationProvider</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractUserDetailsAuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USER_NOT_FOUND_PASSWORD = <span class=\"string\">\"userNotFoundPassword\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PasswordEncoder passwordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> String userNotFoundEncodedPassword;</span><br><span class=\"line\">    ## UserDetailService</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserDetailsPasswordService userDetailsPasswordService;</span><br></pre></td></tr></table></figure>\n\n<p>UserDetailService를 Injection받아 해당 유저가 올바른 유저인지 체크한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetailsService <span class=\"title\">userDetailsService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        InMemoryUserDetailsManager manager = <span class=\"keyword\">new</span> InMemoryUserDetailsManager();</span><br><span class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">\"user\"</span>).password(<span class=\"string\">\"password\"</span>).roles(<span class=\"string\">\"USER\"</span>).build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> manager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        http.</span><br><span class=\"line\">            authorizeRequests()</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">\"/db-console/**\"</span>)</span><br><span class=\"line\">            .permitAll().anyRequest().authenticated();</span><br><span class=\"line\">        http.csrf().disable();</span><br><span class=\"line\">        http.headers().frameOptions().disable();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>보통 테스트시에는 InMemoryUserDetailsManager를 UserDetailsService 빈으로 생성해 사용한다.<br>인증을 성공한 이후 보안상의 문제로 인증된 Authentication 객체를 삭제한다고 한다. 허나 Stateless Application상의 성능 향상을 위해선 Cache가 필수이고<br>이를 지원하기 위해 AuthenticationProvider에 캐쉬구현을 하거나 복사본을 만들어 놓고, eraseCredentialsAfterAuthentication Property를 disable 할수도 있다고 한다.<br>자세한 사항은 Javadoc의 구현을 확인하라고 한다. </p>\n<h3 id=\"UserDetailService\"><a href=\"#UserDetailService\" class=\"headerlink\" title=\"UserDetailService\"></a>UserDetailService</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Authentication-Manager\"><a href=\"#Authentication-Manager\" class=\"headerlink\" title=\"Authentication Manager\"></a>Authentication Manager</h2><p>Spring Security에서는 AuthenticationManager라는 Interface가 존재하고 이를 구현하면 된다.<br>웹 어플리케이션에서 보통 WebConfig를 설정하기 위해 extends 받는 객체가 WebSecurityConfigurerAdapter이며<br>이는 WebSecurityConfigurer를 구현한 것이다.<br>Init함수 실행시 HttpSecurity를 생성하고 내부적으로 내부 init 함수 안에서 최초 1번 생성해서 반환하게 된다.</p>\n<h2 id=\"Provider-Manager\"><a href=\"#Provider-Manager\" class=\"headerlink\" title=\"Provider Manager\"></a>Provider Manager</h2><p>Provider Manager는 Request의 Authentication을 다루는 AuthenticationProvider를 관리하기 위한 manager이며,<br>각각의 AuthenticationProvider의 구현에 따라 인증할 수 있는 범위가 넓어지며,<br>DAO기반, LDAP기반, anonymous기반 등 여러가지 Provider를 관리할 수 있다. 만약 각 Provider에서 처리할 수 없고 null값이 나온다면<br>Provider Manager는 ProviderNotFoundException을 Throw 해 처리한다.</p>\n<h2 id=\"Authentication-DaoAuthenticationProvider\"><a href=\"#Authentication-DaoAuthenticationProvider\" class=\"headerlink\" title=\"Authentication - DaoAuthenticationProvider\"></a>Authentication - DaoAuthenticationProvider</h2><p>Authentication의 간단한 구현체는 DaoAuthenticationProvider이며 이는 프레임워크에서 조기에 지원한 하나의 구현체입니다. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoAuthenticationProvider</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractUserDetailsAuthenticationProvider</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String USER_NOT_FOUND_PASSWORD = <span class=\"string\">\"userNotFoundPassword\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PasswordEncoder passwordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> String userNotFoundEncodedPassword;</span><br><span class=\"line\">    ## UserDetailService</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserDetailsService userDetailsService;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserDetailsPasswordService userDetailsPasswordService;</span><br></pre></td></tr></table></figure>\n\n<p>UserDetailService를 Injection받아 해당 유저가 올바른 유저인지 체크한다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetailsService <span class=\"title\">userDetailsService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        InMemoryUserDetailsManager manager = <span class=\"keyword\">new</span> InMemoryUserDetailsManager();</span><br><span class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">\"user\"</span>).password(<span class=\"string\">\"password\"</span>).roles(<span class=\"string\">\"USER\"</span>).build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> manager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        http.</span><br><span class=\"line\">            authorizeRequests()</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">\"/db-console/**\"</span>)</span><br><span class=\"line\">            .permitAll().anyRequest().authenticated();</span><br><span class=\"line\">        http.csrf().disable();</span><br><span class=\"line\">        http.headers().frameOptions().disable();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>보통 테스트시에는 InMemoryUserDetailsManager를 UserDetailsService 빈으로 생성해 사용한다.<br>인증을 성공한 이후 보안상의 문제로 인증된 Authentication 객체를 삭제한다고 한다. 허나 Stateless Application상의 성능 향상을 위해선 Cache가 필수이고<br>이를 지원하기 위해 AuthenticationProvider에 캐쉬구현을 하거나 복사본을 만들어 놓고, eraseCredentialsAfterAuthentication Property를 disable 할수도 있다고 한다.<br>자세한 사항은 Javadoc의 구현을 확인하라고 한다. </p>\n<h3 id=\"UserDetailService\"><a href=\"#UserDetailService\" class=\"headerlink\" title=\"UserDetailService\"></a>UserDetailService</h3>"},{"title":"springboot-run","date":"2019-12-19T05:57:33.000Z","_content":"Spring Boot를 사용한 프로젝트를 진행하다보니 Spring Boot 및 Security에 대한 전반적인 지식이 필요 해졌고, \n기존 설정들과는 다른 부분들이 존재해 Run을 진행하는 Entry Point 부터 하나씩 분석하기로 한다.\n\nhttps://www.jetbrains.com/help/idea/class-diagram.html 로 클래스 다이어그램을 추출해 기록할 예정이며,\n분석하는 Spring Boot버전은 2.1.1, Tomcat은 9버전이 될 것이다. \n\n```java\n\tpublic ConfigurableApplicationContext run(String... args) {\n\t\tStopWatch stopWatch = new StopWatch();\n\t\tstopWatch.start();\n\t\tConfigurableApplicationContext context = null;\n\t\tCollection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n\t\tconfigureHeadlessProperty(); // 1\n\t\tSpringApplicationRunListeners listeners = getRunListeners(args); // 2\n\t\tlisteners.starting();\n\t\ttry {\n\t\t\tApplicationArguments applicationArguments = new DefaultApplicationArguments(args); // 1\n\t\t\tConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);\n\t\t\tconfigureIgnoreBeanInfo(environment);\n\t\t\tBanner printedBanner = printBanner(environment);\n\t\t\tcontext = createApplicationContext();\n\t\t\texceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,\n\t\t\t\t\tnew Class[] { ConfigurableApplicationContext.class }, context);\n\t\t\tprepareContext(context, environment, listeners, applicationArguments, printedBanner);\n\t\t\trefreshContext(context);\n\t\t\tafterRefresh(context, applicationArguments);\n\t\t\tstopWatch.stop();\n\t\t\tif (this.logStartupInfo) {\n\t\t\t\tnew StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);\n\t\t\t}\n\t\t\tlisteners.started(context);\n\t\t\tcallRunners(context, applicationArguments);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, listeners);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\n\t\ttry {\n\t\t\tlisteners.running(context);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, null);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn context;\n\t}\n```\n\n### 1 Configure HeadLess Property\n\n- SYSTEM_PROPERTY_JAVA_AWT_HEADLESS를 True로 바꿔준다. \n- SYSTEM_PROPERTY_JAVA_AWT_HEADLESS는 비 윈도우 환경에서 GUI컴포넌트를 사용할 수 있게 하는 JAVA System Property\n\n### 2 getRunListeners\n- Observer Pattern으로 동록된 모든 Listener 들에게 해당 이벤트가 발생할 경우 전부 실행해준다.\n\n```java\nclass SpringApplicationRunListeners {\n\n\tprivate final Log log;\n\n\tprivate final List<SpringApplicationRunListener> listeners;\n\n\tSpringApplicationRunListeners(Log log, Collection<? extends SpringApplicationRunListener> listeners) {\n\t\tthis.log = log;\n\t\tthis.listeners = new ArrayList<>(listeners);\n\t}\n\n\tpublic void starting() {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.starting();\n\t\t}\n\t}\n}\n```\n\nSpringBoot는 Listener를 별도로 등록하지 않을 경우 EventPublishingRunListener를 등록해 사용한다.\n ","source":"_posts/springboot-run.md","raw":"---\ntitle: springboot-run\ndate: 2019-12-19 14:57:33\ntags: SpringBoot\n---\nSpring Boot를 사용한 프로젝트를 진행하다보니 Spring Boot 및 Security에 대한 전반적인 지식이 필요 해졌고, \n기존 설정들과는 다른 부분들이 존재해 Run을 진행하는 Entry Point 부터 하나씩 분석하기로 한다.\n\nhttps://www.jetbrains.com/help/idea/class-diagram.html 로 클래스 다이어그램을 추출해 기록할 예정이며,\n분석하는 Spring Boot버전은 2.1.1, Tomcat은 9버전이 될 것이다. \n\n```java\n\tpublic ConfigurableApplicationContext run(String... args) {\n\t\tStopWatch stopWatch = new StopWatch();\n\t\tstopWatch.start();\n\t\tConfigurableApplicationContext context = null;\n\t\tCollection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();\n\t\tconfigureHeadlessProperty(); // 1\n\t\tSpringApplicationRunListeners listeners = getRunListeners(args); // 2\n\t\tlisteners.starting();\n\t\ttry {\n\t\t\tApplicationArguments applicationArguments = new DefaultApplicationArguments(args); // 1\n\t\t\tConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);\n\t\t\tconfigureIgnoreBeanInfo(environment);\n\t\t\tBanner printedBanner = printBanner(environment);\n\t\t\tcontext = createApplicationContext();\n\t\t\texceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,\n\t\t\t\t\tnew Class[] { ConfigurableApplicationContext.class }, context);\n\t\t\tprepareContext(context, environment, listeners, applicationArguments, printedBanner);\n\t\t\trefreshContext(context);\n\t\t\tafterRefresh(context, applicationArguments);\n\t\t\tstopWatch.stop();\n\t\t\tif (this.logStartupInfo) {\n\t\t\t\tnew StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);\n\t\t\t}\n\t\t\tlisteners.started(context);\n\t\t\tcallRunners(context, applicationArguments);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, listeners);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\n\t\ttry {\n\t\t\tlisteners.running(context);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\thandleRunFailure(context, ex, exceptionReporters, null);\n\t\t\tthrow new IllegalStateException(ex);\n\t\t}\n\t\treturn context;\n\t}\n```\n\n### 1 Configure HeadLess Property\n\n- SYSTEM_PROPERTY_JAVA_AWT_HEADLESS를 True로 바꿔준다. \n- SYSTEM_PROPERTY_JAVA_AWT_HEADLESS는 비 윈도우 환경에서 GUI컴포넌트를 사용할 수 있게 하는 JAVA System Property\n\n### 2 getRunListeners\n- Observer Pattern으로 동록된 모든 Listener 들에게 해당 이벤트가 발생할 경우 전부 실행해준다.\n\n```java\nclass SpringApplicationRunListeners {\n\n\tprivate final Log log;\n\n\tprivate final List<SpringApplicationRunListener> listeners;\n\n\tSpringApplicationRunListeners(Log log, Collection<? extends SpringApplicationRunListener> listeners) {\n\t\tthis.log = log;\n\t\tthis.listeners = new ArrayList<>(listeners);\n\t}\n\n\tpublic void starting() {\n\t\tfor (SpringApplicationRunListener listener : this.listeners) {\n\t\t\tlistener.starting();\n\t\t}\n\t}\n}\n```\n\nSpringBoot는 Listener를 별도로 등록하지 않을 경우 EventPublishingRunListener를 등록해 사용한다.\n ","slug":"springboot-run","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttjf000y9zbp60w3fxb6","content":"<p>Spring Boot를 사용한 프로젝트를 진행하다보니 Spring Boot 및 Security에 대한 전반적인 지식이 필요 해졌고,<br>기존 설정들과는 다른 부분들이 존재해 Run을 진행하는 Entry Point 부터 하나씩 분석하기로 한다.</p>\n<p><a href=\"https://www.jetbrains.com/help/idea/class-diagram.html\">https://www.jetbrains.com/help/idea/class-diagram.html</a> 로 클래스 다이어그램을 추출해 기록할 예정이며,<br>분석하는 Spring Boot버전은 2.1.1, Tomcat은 9버전이 될 것이다. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">\tStopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">\tstopWatch.start();</span><br><span class=\"line\">\tConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tCollection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\tconfigureHeadlessProperty(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">\tSpringApplicationRunListeners listeners = getRunListeners(args); <span class=\"comment\">// 2</span></span><br><span class=\"line\">\tlisteners.starting();</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(args); <span class=\"comment\">// 1</span></span><br><span class=\"line\">\t\tConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class=\"line\">\t\tconfigureIgnoreBeanInfo(environment);</span><br><span class=\"line\">\t\tBanner printedBanner = printBanner(environment);</span><br><span class=\"line\">\t\tcontext = createApplicationContext();</span><br><span class=\"line\">\t\texceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">\t\tprepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class=\"line\">\t\trefreshContext(context);</span><br><span class=\"line\">\t\tafterRefresh(context, applicationArguments);</span><br><span class=\"line\">\t\tstopWatch.stop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlisteners.started(context);</span><br><span class=\"line\">\t\tcallRunners(context, applicationArguments);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\thandleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tlisteners.running(context);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\thandleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-Configure-HeadLess-Property\"><a href=\"#1-Configure-HeadLess-Property\" class=\"headerlink\" title=\"1 Configure HeadLess Property\"></a>1 Configure HeadLess Property</h3><ul>\n<li>SYSTEM_PROPERTY_JAVA_AWT_HEADLESS를 True로 바꿔준다. </li>\n<li>SYSTEM_PROPERTY_JAVA_AWT_HEADLESS는 비 윈도우 환경에서 GUI컴포넌트를 사용할 수 있게 하는 JAVA System Property</li>\n</ul>\n<h3 id=\"2-getRunListeners\"><a href=\"#2-getRunListeners\" class=\"headerlink\" title=\"2 getRunListeners\"></a>2 getRunListeners</h3><ul>\n<li>Observer Pattern으로 동록된 모든 Listener 들에게 해당 이벤트가 발생할 경우 전부 실행해준다.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringApplicationRunListeners</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Log log;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.log = log;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.starting();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot는 Listener를 별도로 등록하지 않을 경우 EventPublishingRunListener를 등록해 사용한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Spring Boot를 사용한 프로젝트를 진행하다보니 Spring Boot 및 Security에 대한 전반적인 지식이 필요 해졌고,<br>기존 설정들과는 다른 부분들이 존재해 Run을 진행하는 Entry Point 부터 하나씩 분석하기로 한다.</p>\n<p><a href=\"https://www.jetbrains.com/help/idea/class-diagram.html\">https://www.jetbrains.com/help/idea/class-diagram.html</a> 로 클래스 다이어그램을 추출해 기록할 예정이며,<br>분석하는 Spring Boot버전은 2.1.1, Tomcat은 9버전이 될 것이다. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title\">run</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">\tStopWatch stopWatch = <span class=\"keyword\">new</span> StopWatch();</span><br><span class=\"line\">\tstopWatch.start();</span><br><span class=\"line\">\tConfigurableApplicationContext context = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tCollection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\tconfigureHeadlessProperty(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">\tSpringApplicationRunListeners listeners = getRunListeners(args); <span class=\"comment\">// 2</span></span><br><span class=\"line\">\tlisteners.starting();</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tApplicationArguments applicationArguments = <span class=\"keyword\">new</span> DefaultApplicationArguments(args); <span class=\"comment\">// 1</span></span><br><span class=\"line\">\t\tConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class=\"line\">\t\tconfigureIgnoreBeanInfo(environment);</span><br><span class=\"line\">\t\tBanner printedBanner = printBanner(environment);</span><br><span class=\"line\">\t\tcontext = createApplicationContext();</span><br><span class=\"line\">\t\texceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">\t\tprepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class=\"line\">\t\trefreshContext(context);</span><br><span class=\"line\">\t\tafterRefresh(context, applicationArguments);</span><br><span class=\"line\">\t\tstopWatch.stop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> StartupInfoLogger(<span class=\"keyword\">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlisteners.started(context);</span><br><span class=\"line\">\t\tcallRunners(context, applicationArguments);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\thandleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tlisteners.running(context);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\thandleRunFailure(context, ex, exceptionReporters, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-Configure-HeadLess-Property\"><a href=\"#1-Configure-HeadLess-Property\" class=\"headerlink\" title=\"1 Configure HeadLess Property\"></a>1 Configure HeadLess Property</h3><ul>\n<li>SYSTEM_PROPERTY_JAVA_AWT_HEADLESS를 True로 바꿔준다. </li>\n<li>SYSTEM_PROPERTY_JAVA_AWT_HEADLESS는 비 윈도우 환경에서 GUI컴포넌트를 사용할 수 있게 하는 JAVA System Property</li>\n</ul>\n<h3 id=\"2-getRunListeners\"><a href=\"#2-getRunListeners\" class=\"headerlink\" title=\"2 getRunListeners\"></a>2 getRunListeners</h3><ul>\n<li>Observer Pattern으로 동록된 모든 Listener 들에게 해당 이벤트가 발생할 경우 전부 실행해준다.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringApplicationRunListeners</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Log log;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSpringApplicationRunListeners(Log log, Collection&lt;? extends SpringApplicationRunListener&gt; listeners) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.log = log;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"keyword\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\tlistener.starting();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot는 Listener를 별도로 등록하지 않을 경우 EventPublishingRunListener를 등록해 사용한다.</p>\n"},{"title":"spring_security_filter","date":"2019-11-21T07:07:05.000Z","_content":"\n|순서|제목|내용|\n|---|---|---|\n|1|WebAsyncManagerIntegrationFilter| 조사 요망|\n|2|SecurityContextPersistence Filter|Security Context Repository에서 SecurityContext를 로드하고 저장|\n|3|HeaderWriterFilter| 조사 요망|\n|4|Logout Filter|로그아웃 URL로 지정된 가상 URL에 대한 요청 감시, 매칭되면 로그아웃|\n|5|UsernamePasswordAuthenticationFilter|사용자명과 비밀번호로 이뤄진 폼 기반 인증 URL 확인 및 인증 진행|\n|6|RequestCacheAwareFilter|로그인 성공 이후 인증 요청에 의해 가로 채어진 사용자의 원래 요청을 재구성|\n|7|SecurityContextHolderAwareRequestFilter| 조사 요망|\n|8|AnonymousAuthenticationFilter|이 필터가 호출되는 시점까지 사용자가 아직 인증을 받지 못했다면 요청 관련 인증 토큰에서 사용자가 익명 사용자로 나타남|\n|9|SessionManagementFilter|인증된 주체를 바탕으로 세션 트래킹을 처리해 단일 주체와 관련된 모든 세션 트래킹|\n|10|ExceptionTranslationFilter|발생하는 예외 처리 담당|\n|11|FilterSecurityFilter|권한부여 등 여러 결정을 AccessDecisionManager에게 위임해 최종 제어|\n\n하단은 타 블로그에서 참조\n\nSecurityContextPersistenceFilter\n\nSecurityContextRepository 에서 SecurityContext 를 로딩하거나 SecurityContextRepository 로 SecurityContext 를 저장하는 역할을 한다.SecurityContext 란 사용자의 보호및 인증된 세션을 의미한다.\n\n\n\nLogoutFilter\n\n로그아웃 URL(디폴트 값 : /j_spring_security_logout) 로의 요청을 감시하여 해당 사용자를 로그아웃 시킨다.\n\n\n\nUsernamePasswordAuthenticationFilter\n\nusername 과 password 를 사용하는 폼기반 인증 요청 URL(디폴트 값: /j_spring_security_check) 을 감시하여 사용자를 인증하는 역할을 한다. \n\n\n\nDefaultLoginPageGeneratingFilter\n\n폼또는 OpenID 기반 인증을 위한 로그인폼 URL(디폴트 값: /spring_security_login)을 감시하여 로그인폼을 생성한다.\n\n\n\nBasicAuthenticationFilter\n\n HTTP 기본 인증 헤더를 감시하여 처리한다.\n\n\n\nRequestCacheAwareFilter\n\n로그인 성공 후, 원래 요청 정보를 재구성하기 위해 사용됨\n\n\n\nSecurityContextHolderAwareRequestFilter\n\nHttpServletRequestWrapper 를 상속한 SecurityContextHolderAwareRequestWapper 클래스로 HttpServletRequest 정보를 감싼다. SecurityContextHolderAwareRequestWrapper 클래스는 필터 체인상의 다음 필터들에게 추가 정보를 제공한다.\n\n\n\nAnonymousAuthenticationFilter\n\n이 필터가 호출되는 시점까지 사용자 정보가 인증되지 않았다면 사용자가 익명이라는 것 나타내는 인증토큰이 요청과 관련지어 진다.\n\n\n\nSessionManagementFilter\n\n이 필터는 하나의 인증된 사용자와 관련된 모든 세션을 추적하고, 인증된 사용자 정보를 기반으로 세션을 추적을 처리한다.\n\n\n\nExceptionTranslationFilter\n\n이 필터는 보호된 요청을 처리하는 중에 발생하는 예상된 예외를 위임하거나 전달하는 역할을 한다.\n\n\n\nFilterSecurityInterceptor\n\n이 필터는 AccessDecisionManager 로 인증에 대한 결정권을 위임함으로써 인증허가 및  접근제어 결정을 용이하게 한다.\n","source":"_posts/spring-security-filter.md","raw":"---\ntitle: spring_security_filter\ndate: 2019-11-21 16:07:05\ntags:\n---\n\n|순서|제목|내용|\n|---|---|---|\n|1|WebAsyncManagerIntegrationFilter| 조사 요망|\n|2|SecurityContextPersistence Filter|Security Context Repository에서 SecurityContext를 로드하고 저장|\n|3|HeaderWriterFilter| 조사 요망|\n|4|Logout Filter|로그아웃 URL로 지정된 가상 URL에 대한 요청 감시, 매칭되면 로그아웃|\n|5|UsernamePasswordAuthenticationFilter|사용자명과 비밀번호로 이뤄진 폼 기반 인증 URL 확인 및 인증 진행|\n|6|RequestCacheAwareFilter|로그인 성공 이후 인증 요청에 의해 가로 채어진 사용자의 원래 요청을 재구성|\n|7|SecurityContextHolderAwareRequestFilter| 조사 요망|\n|8|AnonymousAuthenticationFilter|이 필터가 호출되는 시점까지 사용자가 아직 인증을 받지 못했다면 요청 관련 인증 토큰에서 사용자가 익명 사용자로 나타남|\n|9|SessionManagementFilter|인증된 주체를 바탕으로 세션 트래킹을 처리해 단일 주체와 관련된 모든 세션 트래킹|\n|10|ExceptionTranslationFilter|발생하는 예외 처리 담당|\n|11|FilterSecurityFilter|권한부여 등 여러 결정을 AccessDecisionManager에게 위임해 최종 제어|\n\n하단은 타 블로그에서 참조\n\nSecurityContextPersistenceFilter\n\nSecurityContextRepository 에서 SecurityContext 를 로딩하거나 SecurityContextRepository 로 SecurityContext 를 저장하는 역할을 한다.SecurityContext 란 사용자의 보호및 인증된 세션을 의미한다.\n\n\n\nLogoutFilter\n\n로그아웃 URL(디폴트 값 : /j_spring_security_logout) 로의 요청을 감시하여 해당 사용자를 로그아웃 시킨다.\n\n\n\nUsernamePasswordAuthenticationFilter\n\nusername 과 password 를 사용하는 폼기반 인증 요청 URL(디폴트 값: /j_spring_security_check) 을 감시하여 사용자를 인증하는 역할을 한다. \n\n\n\nDefaultLoginPageGeneratingFilter\n\n폼또는 OpenID 기반 인증을 위한 로그인폼 URL(디폴트 값: /spring_security_login)을 감시하여 로그인폼을 생성한다.\n\n\n\nBasicAuthenticationFilter\n\n HTTP 기본 인증 헤더를 감시하여 처리한다.\n\n\n\nRequestCacheAwareFilter\n\n로그인 성공 후, 원래 요청 정보를 재구성하기 위해 사용됨\n\n\n\nSecurityContextHolderAwareRequestFilter\n\nHttpServletRequestWrapper 를 상속한 SecurityContextHolderAwareRequestWapper 클래스로 HttpServletRequest 정보를 감싼다. SecurityContextHolderAwareRequestWrapper 클래스는 필터 체인상의 다음 필터들에게 추가 정보를 제공한다.\n\n\n\nAnonymousAuthenticationFilter\n\n이 필터가 호출되는 시점까지 사용자 정보가 인증되지 않았다면 사용자가 익명이라는 것 나타내는 인증토큰이 요청과 관련지어 진다.\n\n\n\nSessionManagementFilter\n\n이 필터는 하나의 인증된 사용자와 관련된 모든 세션을 추적하고, 인증된 사용자 정보를 기반으로 세션을 추적을 처리한다.\n\n\n\nExceptionTranslationFilter\n\n이 필터는 보호된 요청을 처리하는 중에 발생하는 예상된 예외를 위임하거나 전달하는 역할을 한다.\n\n\n\nFilterSecurityInterceptor\n\n이 필터는 AccessDecisionManager 로 인증에 대한 결정권을 위임함으로써 인증허가 및  접근제어 결정을 용이하게 한다.\n","slug":"spring-security-filter","published":1,"updated":"2020-02-23T07:36:49.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck792ttjk00109zbp8d1sbbm2","content":"<table>\n<thead>\n<tr>\n<th>순서</th>\n<th>제목</th>\n<th>내용</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>WebAsyncManagerIntegrationFilter</td>\n<td>조사 요망</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SecurityContextPersistence Filter</td>\n<td>Security Context Repository에서 SecurityContext를 로드하고 저장</td>\n</tr>\n<tr>\n<td>3</td>\n<td>HeaderWriterFilter</td>\n<td>조사 요망</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Logout Filter</td>\n<td>로그아웃 URL로 지정된 가상 URL에 대한 요청 감시, 매칭되면 로그아웃</td>\n</tr>\n<tr>\n<td>5</td>\n<td>UsernamePasswordAuthenticationFilter</td>\n<td>사용자명과 비밀번호로 이뤄진 폼 기반 인증 URL 확인 및 인증 진행</td>\n</tr>\n<tr>\n<td>6</td>\n<td>RequestCacheAwareFilter</td>\n<td>로그인 성공 이후 인증 요청에 의해 가로 채어진 사용자의 원래 요청을 재구성</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SecurityContextHolderAwareRequestFilter</td>\n<td>조사 요망</td>\n</tr>\n<tr>\n<td>8</td>\n<td>AnonymousAuthenticationFilter</td>\n<td>이 필터가 호출되는 시점까지 사용자가 아직 인증을 받지 못했다면 요청 관련 인증 토큰에서 사용자가 익명 사용자로 나타남</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SessionManagementFilter</td>\n<td>인증된 주체를 바탕으로 세션 트래킹을 처리해 단일 주체와 관련된 모든 세션 트래킹</td>\n</tr>\n<tr>\n<td>10</td>\n<td>ExceptionTranslationFilter</td>\n<td>발생하는 예외 처리 담당</td>\n</tr>\n<tr>\n<td>11</td>\n<td>FilterSecurityFilter</td>\n<td>권한부여 등 여러 결정을 AccessDecisionManager에게 위임해 최종 제어</td>\n</tr>\n</tbody></table>\n<p>하단은 타 블로그에서 참조</p>\n<p>SecurityContextPersistenceFilter</p>\n<p>SecurityContextRepository 에서 SecurityContext 를 로딩하거나 SecurityContextRepository 로 SecurityContext 를 저장하는 역할을 한다.SecurityContext 란 사용자의 보호및 인증된 세션을 의미한다.</p>\n<p>LogoutFilter</p>\n<p>로그아웃 URL(디폴트 값 : /j_spring_security_logout) 로의 요청을 감시하여 해당 사용자를 로그아웃 시킨다.</p>\n<p>UsernamePasswordAuthenticationFilter</p>\n<p>username 과 password 를 사용하는 폼기반 인증 요청 URL(디폴트 값: /j_spring_security_check) 을 감시하여 사용자를 인증하는 역할을 한다. </p>\n<p>DefaultLoginPageGeneratingFilter</p>\n<p>폼또는 OpenID 기반 인증을 위한 로그인폼 URL(디폴트 값: /spring_security_login)을 감시하여 로그인폼을 생성한다.</p>\n<p>BasicAuthenticationFilter</p>\n<p> HTTP 기본 인증 헤더를 감시하여 처리한다.</p>\n<p>RequestCacheAwareFilter</p>\n<p>로그인 성공 후, 원래 요청 정보를 재구성하기 위해 사용됨</p>\n<p>SecurityContextHolderAwareRequestFilter</p>\n<p>HttpServletRequestWrapper 를 상속한 SecurityContextHolderAwareRequestWapper 클래스로 HttpServletRequest 정보를 감싼다. SecurityContextHolderAwareRequestWrapper 클래스는 필터 체인상의 다음 필터들에게 추가 정보를 제공한다.</p>\n<p>AnonymousAuthenticationFilter</p>\n<p>이 필터가 호출되는 시점까지 사용자 정보가 인증되지 않았다면 사용자가 익명이라는 것 나타내는 인증토큰이 요청과 관련지어 진다.</p>\n<p>SessionManagementFilter</p>\n<p>이 필터는 하나의 인증된 사용자와 관련된 모든 세션을 추적하고, 인증된 사용자 정보를 기반으로 세션을 추적을 처리한다.</p>\n<p>ExceptionTranslationFilter</p>\n<p>이 필터는 보호된 요청을 처리하는 중에 발생하는 예상된 예외를 위임하거나 전달하는 역할을 한다.</p>\n<p>FilterSecurityInterceptor</p>\n<p>이 필터는 AccessDecisionManager 로 인증에 대한 결정권을 위임함으로써 인증허가 및  접근제어 결정을 용이하게 한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>순서</th>\n<th>제목</th>\n<th>내용</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>WebAsyncManagerIntegrationFilter</td>\n<td>조사 요망</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SecurityContextPersistence Filter</td>\n<td>Security Context Repository에서 SecurityContext를 로드하고 저장</td>\n</tr>\n<tr>\n<td>3</td>\n<td>HeaderWriterFilter</td>\n<td>조사 요망</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Logout Filter</td>\n<td>로그아웃 URL로 지정된 가상 URL에 대한 요청 감시, 매칭되면 로그아웃</td>\n</tr>\n<tr>\n<td>5</td>\n<td>UsernamePasswordAuthenticationFilter</td>\n<td>사용자명과 비밀번호로 이뤄진 폼 기반 인증 URL 확인 및 인증 진행</td>\n</tr>\n<tr>\n<td>6</td>\n<td>RequestCacheAwareFilter</td>\n<td>로그인 성공 이후 인증 요청에 의해 가로 채어진 사용자의 원래 요청을 재구성</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SecurityContextHolderAwareRequestFilter</td>\n<td>조사 요망</td>\n</tr>\n<tr>\n<td>8</td>\n<td>AnonymousAuthenticationFilter</td>\n<td>이 필터가 호출되는 시점까지 사용자가 아직 인증을 받지 못했다면 요청 관련 인증 토큰에서 사용자가 익명 사용자로 나타남</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SessionManagementFilter</td>\n<td>인증된 주체를 바탕으로 세션 트래킹을 처리해 단일 주체와 관련된 모든 세션 트래킹</td>\n</tr>\n<tr>\n<td>10</td>\n<td>ExceptionTranslationFilter</td>\n<td>발생하는 예외 처리 담당</td>\n</tr>\n<tr>\n<td>11</td>\n<td>FilterSecurityFilter</td>\n<td>권한부여 등 여러 결정을 AccessDecisionManager에게 위임해 최종 제어</td>\n</tr>\n</tbody></table>\n<p>하단은 타 블로그에서 참조</p>\n<p>SecurityContextPersistenceFilter</p>\n<p>SecurityContextRepository 에서 SecurityContext 를 로딩하거나 SecurityContextRepository 로 SecurityContext 를 저장하는 역할을 한다.SecurityContext 란 사용자의 보호및 인증된 세션을 의미한다.</p>\n<p>LogoutFilter</p>\n<p>로그아웃 URL(디폴트 값 : /j_spring_security_logout) 로의 요청을 감시하여 해당 사용자를 로그아웃 시킨다.</p>\n<p>UsernamePasswordAuthenticationFilter</p>\n<p>username 과 password 를 사용하는 폼기반 인증 요청 URL(디폴트 값: /j_spring_security_check) 을 감시하여 사용자를 인증하는 역할을 한다. </p>\n<p>DefaultLoginPageGeneratingFilter</p>\n<p>폼또는 OpenID 기반 인증을 위한 로그인폼 URL(디폴트 값: /spring_security_login)을 감시하여 로그인폼을 생성한다.</p>\n<p>BasicAuthenticationFilter</p>\n<p> HTTP 기본 인증 헤더를 감시하여 처리한다.</p>\n<p>RequestCacheAwareFilter</p>\n<p>로그인 성공 후, 원래 요청 정보를 재구성하기 위해 사용됨</p>\n<p>SecurityContextHolderAwareRequestFilter</p>\n<p>HttpServletRequestWrapper 를 상속한 SecurityContextHolderAwareRequestWapper 클래스로 HttpServletRequest 정보를 감싼다. SecurityContextHolderAwareRequestWrapper 클래스는 필터 체인상의 다음 필터들에게 추가 정보를 제공한다.</p>\n<p>AnonymousAuthenticationFilter</p>\n<p>이 필터가 호출되는 시점까지 사용자 정보가 인증되지 않았다면 사용자가 익명이라는 것 나타내는 인증토큰이 요청과 관련지어 진다.</p>\n<p>SessionManagementFilter</p>\n<p>이 필터는 하나의 인증된 사용자와 관련된 모든 세션을 추적하고, 인증된 사용자 정보를 기반으로 세션을 추적을 처리한다.</p>\n<p>ExceptionTranslationFilter</p>\n<p>이 필터는 보호된 요청을 처리하는 중에 발생하는 예상된 예외를 위임하거나 전달하는 역할을 한다.</p>\n<p>FilterSecurityInterceptor</p>\n<p>이 필터는 AccessDecisionManager 로 인증에 대한 결정권을 위임함으로써 인증허가 및  접근제어 결정을 용이하게 한다.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck792ttie00029zbpg0hr87qz","tag_id":"ck792ttik00069zbp9gt6f1tn","_id":"ck792ttit000b9zbp56prdxjs"},{"post_id":"ck792ttiw000e9zbp1xpd18g2","tag_id":"ck792ttiz000g9zbp8wnz1cpo","_id":"ck792ttj2000k9zbpbtfd316n"},{"post_id":"ck792ttja000t9zbpbuoxemb3","tag_id":"ck792ttjd000v9zbp14h7bd4n","_id":"ck792ttjg000z9zbpaequ26dm"},{"post_id":"ck792ttjf000y9zbp60w3fxb6","tag_id":"ck792ttjd000v9zbp14h7bd4n","_id":"ck792ttjl00119zbpee6vg3ua"}],"Tag":[{"name":"jpa, hibernate","_id":"ck792ttik00069zbp9gt6f1tn"},{"name":"Spring Boot Listener","_id":"ck792ttiz000g9zbp8wnz1cpo"},{"name":"SpringBoot","_id":"ck792ttjd000v9zbp14h7bd4n"}]}}